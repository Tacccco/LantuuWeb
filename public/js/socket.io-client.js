/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzFmYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz85MTUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0EsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsUUFBUSxVQUFVOztBQUVsQjtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lM2RiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/socket.io-client.js":
/*!******************************************!*\
  !*** ./resources/js/socket.io-client.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, Buffer, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof2(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\n/*!\n * Socket.IO v3.0.3\n * (c) 2014-2020 Guillermo Rauch\n * Released under the MIT License.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (( false ? undefined : _typeof2(exports)) === 'object' && ( false ? undefined : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\n})(function () {\n  if (typeof self !== 'undefined') {\n    return self;\n  } else if (typeof window !== 'undefined') {\n    return window;\n  } else if (typeof global !== 'undefined') {\n    return global;\n  } else {\n    return Function('return this')();\n  }\n}(), function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && _typeof2(value) === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\n          __webpack_require__.d(ns, key, function (key) {\n            return value[key];\n          }.bind(null, key));\n        }\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = \"./build/index.js\");\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      \"./build/index.js\":\n      /*!************************!*\\\n        !*** ./build/index.js ***!\n        \\************************/\n\n      /*! no static exports found */\n\n      /***/\n      function buildIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Socket = exports.io = exports.Manager = exports.protocol = void 0;\n\n        var url_1 = __webpack_require__(\n        /*! ./url */\n        \"./build/url.js\");\n\n        var manager_1 = __webpack_require__(\n        /*! ./manager */\n        \"./build/manager.js\");\n\n        var socket_1 = __webpack_require__(\n        /*! ./socket */\n        \"./build/socket.js\");\n\n        Object.defineProperty(exports, \"Socket\", {\n          enumerable: true,\n          get: function get() {\n            return socket_1.Socket;\n          }\n        });\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"socket.io-client\");\n        /**\n         * Module exports.\n         */\n\n\n        module.exports = exports = lookup;\n        /**\n         * Managers cache.\n         */\n\n        var cache = exports.managers = {};\n\n        function lookup(uri, opts) {\n          if (_typeof(uri) === \"object\") {\n            opts = uri;\n            uri = undefined;\n          }\n\n          opts = opts || {};\n          var parsed = url_1.url(uri);\n          var source = parsed.source;\n          var id = parsed.id;\n          var path = parsed.path;\n          var sameNamespace = cache[id] && path in cache[id].nsps;\n          var newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n          var io;\n\n          if (newConnection) {\n            debug(\"ignoring socket cache for %s\", source);\n            io = new manager_1.Manager(source, opts);\n          } else {\n            if (!cache[id]) {\n              debug(\"new io instance for %s\", source);\n              cache[id] = new manager_1.Manager(source, opts);\n            }\n\n            io = cache[id];\n          }\n\n          if (parsed.query && !opts.query) {\n            opts.query = parsed.query;\n          }\n\n          return io.socket(parsed.path, opts);\n        }\n\n        exports.io = lookup;\n        /**\n         * Protocol version.\n         *\n         * @public\n         */\n\n        var socket_io_parser_1 = __webpack_require__(\n        /*! socket.io-parser */\n        \"./node_modules/socket.io-parser/dist/index.js\");\n\n        Object.defineProperty(exports, \"protocol\", {\n          enumerable: true,\n          get: function get() {\n            return socket_io_parser_1.protocol;\n          }\n        });\n        /**\n         * `connect`.\n         *\n         * @param {String} uri\n         * @public\n         */\n\n        exports.connect = lookup;\n        /**\n         * Expose constructors for standalone build.\n         *\n         * @public\n         */\n\n        var manager_2 = __webpack_require__(\n        /*! ./manager */\n        \"./build/manager.js\");\n\n        Object.defineProperty(exports, \"Manager\", {\n          enumerable: true,\n          get: function get() {\n            return manager_2.Manager;\n          }\n        });\n        /***/\n      },\n\n      /***/\n      \"./build/manager.js\":\n      /*!**************************!*\\\n        !*** ./build/manager.js ***!\n        \\**************************/\n\n      /*! no static exports found */\n\n      /***/\n      function buildManagerJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Manager = void 0;\n\n        var eio = __webpack_require__(\n        /*! engine.io-client */\n        \"./node_modules/engine.io-client/lib/index.js\");\n\n        var socket_1 = __webpack_require__(\n        /*! ./socket */\n        \"./build/socket.js\");\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var parser = __webpack_require__(\n        /*! socket.io-parser */\n        \"./node_modules/socket.io-parser/dist/index.js\");\n\n        var on_1 = __webpack_require__(\n        /*! ./on */\n        \"./build/on.js\");\n\n        var bind = __webpack_require__(\n        /*! component-bind */\n        \"./node_modules/component-bind/index.js\");\n\n        var Backoff = __webpack_require__(\n        /*! backo2 */\n        \"./node_modules/backo2/index.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"socket.io-client:manager\");\n\n        var Manager = /*#__PURE__*/function (_Emitter) {\n          _inherits(Manager, _Emitter);\n\n          var _super = _createSuper(Manager);\n\n          function Manager(uri, opts) {\n            var _this;\n\n            _classCallCheck(this, Manager);\n\n            _this = _super.call(this);\n            _this.nsps = {};\n            _this.subs = [];\n            _this.connecting = [];\n\n            if (uri && \"object\" === _typeof(uri)) {\n              opts = uri;\n              uri = undefined;\n            }\n\n            opts = opts || {};\n            opts.path = opts.path || \"/socket.io\";\n            _this.opts = opts;\n\n            _this.reconnection(opts.reconnection !== false);\n\n            _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n            _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n            _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n            _this.randomizationFactor(opts.randomizationFactor || 0.5);\n\n            _this.backoff = new Backoff({\n              min: _this.reconnectionDelay(),\n              max: _this.reconnectionDelayMax(),\n              jitter: _this.randomizationFactor()\n            });\n\n            _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n            _this._readyState = \"closed\";\n            _this.uri = uri;\n\n            var _parser = opts.parser || parser;\n\n            _this.encoder = new _parser.Encoder();\n            _this.decoder = new _parser.Decoder();\n            _this._autoConnect = opts.autoConnect !== false;\n            if (_this._autoConnect) _this.open();\n            return _this;\n          }\n\n          _createClass(Manager, [{\n            key: \"reconnection\",\n            value: function reconnection(v) {\n              if (!arguments.length) return this._reconnection;\n              this._reconnection = !!v;\n              return this;\n            }\n          }, {\n            key: \"reconnectionAttempts\",\n            value: function reconnectionAttempts(v) {\n              if (v === undefined) return this._reconnectionAttempts;\n              this._reconnectionAttempts = v;\n              return this;\n            }\n          }, {\n            key: \"reconnectionDelay\",\n            value: function reconnectionDelay(v) {\n              if (v === undefined) return this._reconnectionDelay;\n              this._reconnectionDelay = v;\n              this.backoff && this.backoff.setMin(v);\n              return this;\n            }\n          }, {\n            key: \"randomizationFactor\",\n            value: function randomizationFactor(v) {\n              if (v === undefined) return this._randomizationFactor;\n              this._randomizationFactor = v;\n              this.backoff && this.backoff.setJitter(v);\n              return this;\n            }\n          }, {\n            key: \"reconnectionDelayMax\",\n            value: function reconnectionDelayMax(v) {\n              if (v === undefined) return this._reconnectionDelayMax;\n              this._reconnectionDelayMax = v;\n              this.backoff && this.backoff.setMax(v);\n              return this;\n            }\n          }, {\n            key: \"timeout\",\n            value: function timeout(v) {\n              if (!arguments.length) return this._timeout;\n              this._timeout = v;\n              return this;\n            }\n            /**\n             * Starts trying to reconnect if reconnection is enabled and we have not\n             * started reconnecting yet\n             *\n             * @private\n             */\n\n          }, {\n            key: \"maybeReconnectOnOpen\",\n            value: function maybeReconnectOnOpen() {\n              // Only try to reconnect if it's the first time we're connecting\n              if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n                // keeps reconnection from firing twice for the same reconnection loop\n                this.reconnect();\n              }\n            }\n            /**\n             * Sets the current transport `socket`.\n             *\n             * @param {Function} fn - optional, callback\n             * @return {Manager} self\n             * @public\n             */\n\n          }, {\n            key: \"open\",\n            value: function open(fn) {\n              var _this2 = this;\n\n              debug(\"readyState %s\", this._readyState);\n              if (~this._readyState.indexOf(\"open\")) return this;\n              debug(\"opening %s\", this.uri);\n              this.engine = eio(this.uri, this.opts);\n              var socket = this.engine;\n              var self = this;\n              this._readyState = \"opening\";\n              this.skipReconnect = false; // emit `open`\n\n              var openSub = on_1.on(socket, \"open\", function () {\n                self.onopen();\n                fn && fn();\n              }); // emit `error`\n\n              var errorSub = on_1.on(socket, \"error\", function (err) {\n                debug(\"error\");\n                self.cleanup();\n                self._readyState = \"closed\";\n\n                _get(_getPrototypeOf(Manager.prototype), \"emit\", _this2).call(_this2, \"error\", err);\n\n                if (fn) {\n                  fn(err);\n                } else {\n                  // Only do this if there is no fn to handle the error\n                  self.maybeReconnectOnOpen();\n                }\n              });\n\n              if (false !== this._timeout) {\n                var timeout = this._timeout;\n                debug(\"connect attempt will timeout after %d\", timeout);\n\n                if (timeout === 0) {\n                  openSub.destroy(); // prevents a race condition with the 'open' event\n                } // set timer\n\n\n                var timer = setTimeout(function () {\n                  debug(\"connect attempt timed out after %d\", timeout);\n                  openSub.destroy();\n                  socket.close();\n                  socket.emit(\"error\", new Error(\"timeout\"));\n                }, timeout);\n                this.subs.push({\n                  destroy: function destroy() {\n                    clearTimeout(timer);\n                  }\n                });\n              }\n\n              this.subs.push(openSub);\n              this.subs.push(errorSub);\n              return this;\n            }\n            /**\n             * Alias for open()\n             *\n             * @return {Manager} self\n             * @public\n             */\n\n          }, {\n            key: \"connect\",\n            value: function connect(fn) {\n              return this.open(fn);\n            }\n            /**\n             * Called upon transport open.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onopen\",\n            value: function onopen() {\n              debug(\"open\"); // clear old subs\n\n              this.cleanup(); // mark as open\n\n              this._readyState = \"open\";\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"open\"); // add new subs\n\n\n              var socket = this.engine;\n              this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")));\n              this.subs.push(on_1.on(socket, \"ping\", bind(this, \"onping\")));\n              this.subs.push(on_1.on(socket, \"error\", bind(this, \"onerror\")));\n              this.subs.push(on_1.on(socket, \"close\", bind(this, \"onclose\")));\n              this.subs.push(on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\n            }\n            /**\n             * Called upon a ping.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onping\",\n            value: function onping() {\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"ping\");\n            }\n            /**\n             * Called with data.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"ondata\",\n            value: function ondata(data) {\n              this.decoder.add(data);\n            }\n            /**\n             * Called when parser fully decodes a packet.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"ondecoded\",\n            value: function ondecoded(packet) {\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"packet\", packet);\n            }\n            /**\n             * Called upon socket error.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onerror\",\n            value: function onerror(err) {\n              debug(\"error\", err);\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"error\", err);\n            }\n            /**\n             * Creates a new socket for the given `nsp`.\n             *\n             * @return {Socket}\n             * @public\n             */\n\n          }, {\n            key: \"socket\",\n            value: function socket(nsp, opts) {\n              var socket = this.nsps[nsp];\n\n              if (!socket) {\n                socket = new socket_1.Socket(this, nsp, opts);\n                this.nsps[nsp] = socket;\n                var self = this;\n                socket.on(\"connecting\", onConnecting);\n\n                if (this._autoConnect) {\n                  // manually call here since connecting event is fired before listening\n                  onConnecting();\n                }\n              }\n\n              function onConnecting() {\n                if (!~self.connecting.indexOf(socket)) {\n                  self.connecting.push(socket);\n                }\n              }\n\n              return socket;\n            }\n            /**\n             * Called upon a socket close.\n             *\n             * @param {Socket} socket\n             * @private\n             */\n\n          }, {\n            key: \"_destroy\",\n            value: function _destroy(socket) {\n              var index = this.connecting.indexOf(socket);\n              if (~index) this.connecting.splice(index, 1);\n              if (this.connecting.length) return;\n\n              this._close();\n            }\n            /**\n             * Writes a packet.\n             *\n             * @param {Object} packet\n             * @private\n             */\n\n          }, {\n            key: \"_packet\",\n            value: function _packet(packet) {\n              debug(\"writing packet %j\", packet);\n              if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n              var encodedPackets = this.encoder.encode(packet);\n\n              for (var i = 0; i < encodedPackets.length; i++) {\n                this.engine.write(encodedPackets[i], packet.options);\n              }\n            }\n            /**\n             * Clean up transport subscriptions and packet buffer.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"cleanup\",\n            value: function cleanup() {\n              debug(\"cleanup\");\n              var subsLength = this.subs.length;\n\n              for (var i = 0; i < subsLength; i++) {\n                var sub = this.subs.shift();\n                sub.destroy();\n              }\n\n              this.decoder.destroy();\n            }\n            /**\n             * Close the current socket.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"_close\",\n            value: function _close() {\n              debug(\"disconnect\");\n              this.skipReconnect = true;\n              this._reconnecting = false;\n\n              if (\"opening\" === this._readyState) {\n                // `onclose` will not fire because\n                // an open event never happened\n                this.cleanup();\n              }\n\n              this.backoff.reset();\n              this._readyState = \"closed\";\n              if (this.engine) this.engine.close();\n            }\n            /**\n             * Alias for close()\n             *\n             * @private\n             */\n\n          }, {\n            key: \"disconnect\",\n            value: function disconnect() {\n              return this._close();\n            }\n            /**\n             * Called upon engine close.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onclose\",\n            value: function onclose(reason) {\n              debug(\"onclose\");\n              this.cleanup();\n              this.backoff.reset();\n              this._readyState = \"closed\";\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"close\", reason);\n\n              if (this._reconnection && !this.skipReconnect) {\n                this.reconnect();\n              }\n            }\n            /**\n             * Attempt a reconnection.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"reconnect\",\n            value: function reconnect() {\n              var _this3 = this;\n\n              if (this._reconnecting || this.skipReconnect) return this;\n              var self = this;\n\n              if (this.backoff.attempts >= this._reconnectionAttempts) {\n                debug(\"reconnect failed\");\n                this.backoff.reset();\n\n                _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect_failed\");\n\n                this._reconnecting = false;\n              } else {\n                var delay = this.backoff.duration();\n                debug(\"will wait %dms before reconnect attempt\", delay);\n                this._reconnecting = true;\n                var timer = setTimeout(function () {\n                  if (self.skipReconnect) return;\n                  debug(\"attempting reconnect\");\n\n                  _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n                  if (self.skipReconnect) return;\n                  self.open(function (err) {\n                    if (err) {\n                      debug(\"reconnect attempt error\");\n                      self._reconnecting = false;\n                      self.reconnect();\n\n                      _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_error\", err);\n                    } else {\n                      debug(\"reconnect success\");\n                      self.onreconnect();\n                    }\n                  });\n                }, delay);\n                this.subs.push({\n                  destroy: function destroy() {\n                    clearTimeout(timer);\n                  }\n                });\n              }\n            }\n            /**\n             * Called upon successful reconnect.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onreconnect\",\n            value: function onreconnect() {\n              var attempt = this.backoff.attempts;\n              this._reconnecting = false;\n              this.backoff.reset();\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect\", attempt);\n            }\n          }]);\n\n          return Manager;\n        }(Emitter);\n\n        exports.Manager = Manager;\n        /***/\n      },\n\n      /***/\n      \"./build/on.js\":\n      /*!*********************!*\\\n        !*** ./build/on.js ***!\n        \\*********************/\n\n      /*! no static exports found */\n\n      /***/\n      function buildOnJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.on = void 0;\n\n        function on(obj, ev, fn) {\n          obj.on(ev, fn);\n          return {\n            destroy: function destroy() {\n              obj.removeListener(ev, fn);\n            }\n          };\n        }\n\n        exports.on = on;\n        /***/\n      },\n\n      /***/\n      \"./build/socket.js\":\n      /*!*************************!*\\\n        !*** ./build/socket.js ***!\n        \\*************************/\n\n      /*! no static exports found */\n\n      /***/\n      function buildSocketJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _createForOfIteratorHelper(o, allowArrayLike) {\n          var it;\n\n          if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n            if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n              if (it) o = it;\n              var i = 0;\n\n              var F = function F() {};\n\n              return {\n                s: F,\n                n: function n() {\n                  if (i >= o.length) return {\n                    done: true\n                  };\n                  return {\n                    done: false,\n                    value: o[i++]\n                  };\n                },\n                e: function e(_e) {\n                  throw _e;\n                },\n                f: F\n              };\n            }\n\n            throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n          }\n\n          var normalCompletion = true,\n              didErr = false,\n              err;\n          return {\n            s: function s() {\n              it = o[Symbol.iterator]();\n            },\n            n: function n() {\n              var step = it.next();\n              normalCompletion = step.done;\n              return step;\n            },\n            e: function e(_e2) {\n              didErr = true;\n              err = _e2;\n            },\n            f: function f() {\n              try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n              } finally {\n                if (didErr) throw err;\n              }\n            }\n          };\n        }\n\n        function _unsupportedIterableToArray(o, minLen) {\n          if (!o) return;\n          if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n          var n = Object.prototype.toString.call(o).slice(8, -1);\n          if (n === \"Object\" && o.constructor) n = o.constructor.name;\n          if (n === \"Map\" || n === \"Set\") return Array.from(o);\n          if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n        }\n\n        function _arrayLikeToArray(arr, len) {\n          if (len == null || len > arr.length) len = arr.length;\n\n          for (var i = 0, arr2 = new Array(len); i < len; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Socket = void 0;\n\n        var socket_io_parser_1 = __webpack_require__(\n        /*! socket.io-parser */\n        \"./node_modules/socket.io-parser/dist/index.js\");\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var on_1 = __webpack_require__(\n        /*! ./on */\n        \"./build/on.js\");\n\n        var bind = __webpack_require__(\n        /*! component-bind */\n        \"./node_modules/component-bind/index.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"socket.io-client:socket\");\n        /**\n         * Internal events.\n         * These events can't be emitted by the user.\n         */\n\n\n        var RESERVED_EVENTS = {\n          connect: 1,\n          connect_error: 1,\n          disconnect: 1,\n          disconnecting: 1,\n          // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n          newListener: 1,\n          removeListener: 1\n        };\n\n        var Socket = /*#__PURE__*/function (_Emitter) {\n          _inherits(Socket, _Emitter);\n\n          var _super = _createSuper(Socket);\n          /**\n           * `Socket` constructor.\n           *\n           * @public\n           */\n\n\n          function Socket(io, nsp, opts) {\n            var _this;\n\n            _classCallCheck(this, Socket);\n\n            _this = _super.call(this);\n            _this.ids = 0;\n            _this.acks = {};\n            _this.receiveBuffer = [];\n            _this.sendBuffer = [];\n            _this.flags = {};\n            _this.io = io;\n            _this.nsp = nsp;\n            _this.ids = 0;\n            _this.acks = {};\n            _this.receiveBuffer = [];\n            _this.sendBuffer = [];\n            _this.connected = false;\n            _this.disconnected = true;\n            _this.flags = {};\n\n            if (opts && opts.auth) {\n              _this.auth = opts.auth;\n            }\n\n            if (_this.io._autoConnect) _this.open();\n            return _this;\n          }\n          /**\n           * Subscribe to open, close and packet events\n           *\n           * @private\n           */\n\n\n          _createClass(Socket, [{\n            key: \"subEvents\",\n            value: function subEvents() {\n              if (this.subs) return;\n              var io = this.io;\n              this.subs = [on_1.on(io, \"open\", bind(this, \"onopen\")), on_1.on(io, \"packet\", bind(this, \"onpacket\")), on_1.on(io, \"close\", bind(this, \"onclose\"))];\n            }\n            /**\n             * \"Opens\" the socket.\n             *\n             * @public\n             */\n\n          }, {\n            key: \"connect\",\n            value: function connect() {\n              if (this.connected) return this;\n              this.subEvents();\n              if (!this.io._reconnecting) this.io.open(); // ensure open\n\n              if (\"open\" === this.io._readyState) this.onopen();\n              return this;\n            }\n            /**\n             * Alias for connect()\n             */\n\n          }, {\n            key: \"open\",\n            value: function open() {\n              return this.connect();\n            }\n            /**\n             * Sends a `message` event.\n             *\n             * @return {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"send\",\n            value: function send() {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              }\n\n              args.unshift(\"message\");\n              this.emit.apply(this, args);\n              return this;\n            }\n            /**\n             * Override `emit`.\n             * If the event is in `events`, it's emitted normally.\n             *\n             * @param {String} ev - event name\n             * @return {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"emit\",\n            value: function emit(ev) {\n              if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n                throw new Error('\"' + ev + '\" is a reserved event name');\n              }\n\n              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n                args[_key2 - 1] = arguments[_key2];\n              }\n\n              args.unshift(ev);\n              var packet = {\n                type: socket_io_parser_1.PacketType.EVENT,\n                data: args\n              };\n              packet.options = {};\n              packet.options.compress = this.flags.compress !== false; // event ack callback\n\n              if (\"function\" === typeof args[args.length - 1]) {\n                debug(\"emitting packet with ack id %d\", this.ids);\n                this.acks[this.ids] = args.pop();\n                packet.id = this.ids++;\n              }\n\n              var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n              var discardPacket = this.flags[\"volatile\"] && (!isTransportWritable || !this.connected);\n\n              if (discardPacket) {\n                debug(\"discard packet as the transport is not currently writable\");\n              } else if (this.connected) {\n                this.packet(packet);\n              } else {\n                this.sendBuffer.push(packet);\n              }\n\n              this.flags = {};\n              return this;\n            }\n            /**\n             * Sends a packet.\n             *\n             * @param {Object} packet\n             * @private\n             */\n\n          }, {\n            key: \"packet\",\n            value: function packet(_packet) {\n              _packet.nsp = this.nsp;\n\n              this.io._packet(_packet);\n            }\n            /**\n             * Called upon engine `open`.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onopen\",\n            value: function onopen() {\n              var _this2 = this;\n\n              debug(\"transport is open - connecting\");\n\n              if (typeof this.auth == \"function\") {\n                this.auth(function (data) {\n                  _this2.packet({\n                    type: socket_io_parser_1.PacketType.CONNECT,\n                    data: data\n                  });\n                });\n              } else {\n                this.packet({\n                  type: socket_io_parser_1.PacketType.CONNECT,\n                  data: this.auth\n                });\n              }\n            }\n            /**\n             * Called upon engine `close`.\n             *\n             * @param {String} reason\n             * @private\n             */\n\n          }, {\n            key: \"onclose\",\n            value: function onclose(reason) {\n              debug(\"close (%s)\", reason);\n              this.connected = false;\n              this.disconnected = true;\n              delete this.id;\n\n              _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"disconnect\", reason);\n            }\n            /**\n             * Called with socket packet.\n             *\n             * @param {Object} packet\n             * @private\n             */\n\n          }, {\n            key: \"onpacket\",\n            value: function onpacket(packet) {\n              var sameNamespace = packet.nsp === this.nsp;\n              if (!sameNamespace) return;\n\n              switch (packet.type) {\n                case socket_io_parser_1.PacketType.CONNECT:\n                  var id = packet.data.sid;\n                  this.onconnect(id);\n                  break;\n\n                case socket_io_parser_1.PacketType.EVENT:\n                  this.onevent(packet);\n                  break;\n\n                case socket_io_parser_1.PacketType.BINARY_EVENT:\n                  this.onevent(packet);\n                  break;\n\n                case socket_io_parser_1.PacketType.ACK:\n                  this.onack(packet);\n                  break;\n\n                case socket_io_parser_1.PacketType.BINARY_ACK:\n                  this.onack(packet);\n                  break;\n\n                case socket_io_parser_1.PacketType.DISCONNECT:\n                  this.ondisconnect();\n                  break;\n\n                case socket_io_parser_1.PacketType.CONNECT_ERROR:\n                  var err = new Error(packet.data.message); // @ts-ignore\n\n                  err.data = packet.data.data;\n\n                  _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect_error\", err);\n\n                  break;\n              }\n            }\n            /**\n             * Called upon a server event.\n             *\n             * @param {Object} packet\n             * @private\n             */\n\n          }, {\n            key: \"onevent\",\n            value: function onevent(packet) {\n              var args = packet.data || [];\n              debug(\"emitting event %j\", args);\n\n              if (null != packet.id) {\n                debug(\"attaching ack callback to event\");\n                args.push(this.ack(packet.id));\n              }\n\n              if (this.connected) {\n                this.emitEvent(args);\n              } else {\n                this.receiveBuffer.push(args);\n              }\n            }\n          }, {\n            key: \"emitEvent\",\n            value: function emitEvent(args) {\n              if (this._anyListeners && this._anyListeners.length) {\n                var listeners = this._anyListeners.slice();\n\n                var _iterator = _createForOfIteratorHelper(listeners),\n                    _step;\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    var listener = _step.value;\n                    listener.apply(this, args);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n              }\n\n              _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n            }\n            /**\n             * Produces an ack callback to emit with an event.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"ack\",\n            value: function ack(id) {\n              var self = this;\n              var sent = false;\n              return function () {\n                // prevent double callbacks\n                if (sent) return;\n                sent = true;\n\n                for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                  args[_key3] = arguments[_key3];\n                }\n\n                debug(\"sending ack %j\", args);\n                self.packet({\n                  type: socket_io_parser_1.PacketType.ACK,\n                  id: id,\n                  data: args\n                });\n              };\n            }\n            /**\n             * Called upon a server acknowlegement.\n             *\n             * @param {Object} packet\n             * @private\n             */\n\n          }, {\n            key: \"onack\",\n            value: function onack(packet) {\n              var ack = this.acks[packet.id];\n\n              if (\"function\" === typeof ack) {\n                debug(\"calling ack %s with %j\", packet.id, packet.data);\n                ack.apply(this, packet.data);\n                delete this.acks[packet.id];\n              } else {\n                debug(\"bad ack %s\", packet.id);\n              }\n            }\n            /**\n             * Called upon server connect.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"onconnect\",\n            value: function onconnect(id) {\n              this.id = id;\n              this.connected = true;\n              this.disconnected = false;\n\n              _get(_getPrototypeOf(Socket.prototype), \"emit\", this).call(this, \"connect\");\n\n              this.emitBuffered();\n            }\n            /**\n             * Emit buffered events (received and emitted).\n             *\n             * @private\n             */\n\n          }, {\n            key: \"emitBuffered\",\n            value: function emitBuffered() {\n              for (var i = 0; i < this.receiveBuffer.length; i++) {\n                this.emitEvent(this.receiveBuffer[i]);\n              }\n\n              this.receiveBuffer = [];\n\n              for (var _i = 0; _i < this.sendBuffer.length; _i++) {\n                this.packet(this.sendBuffer[_i]);\n              }\n\n              this.sendBuffer = [];\n            }\n            /**\n             * Called upon server disconnect.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"ondisconnect\",\n            value: function ondisconnect() {\n              debug(\"server disconnect (%s)\", this.nsp);\n              this.destroy();\n              this.onclose(\"io server disconnect\");\n            }\n            /**\n             * Called upon forced client/server side disconnections,\n             * this method ensures the manager stops tracking us and\n             * that reconnections don't get triggered for this.\n             *\n             * @private\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              if (this.subs) {\n                // clean subscriptions to avoid reconnections\n                for (var i = 0; i < this.subs.length; i++) {\n                  this.subs[i].destroy();\n                }\n\n                this.subs = null;\n              }\n\n              this.io._destroy(this);\n            }\n            /**\n             * Disconnects the socket manually.\n             *\n             * @return {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"disconnect\",\n            value: function disconnect() {\n              if (this.connected) {\n                debug(\"performing disconnect (%s)\", this.nsp);\n                this.packet({\n                  type: socket_io_parser_1.PacketType.DISCONNECT\n                });\n              } // remove socket from pool\n\n\n              this.destroy();\n\n              if (this.connected) {\n                // fire events\n                this.onclose(\"io client disconnect\");\n              }\n\n              return this;\n            }\n            /**\n             * Alias for disconnect()\n             *\n             * @return {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"close\",\n            value: function close() {\n              return this.disconnect();\n            }\n            /**\n             * Sets the compress flag.\n             *\n             * @param {Boolean} compress - if `true`, compresses the sending data\n             * @return {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"compress\",\n            value: function compress(_compress) {\n              this.flags.compress = _compress;\n              return this;\n            }\n            /**\n             * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n             * ready to send messages.\n             *\n             * @returns {Socket} self\n             * @public\n             */\n\n          }, {\n            key: \"onAny\",\n\n            /**\n             * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n             * callback.\n             *\n             * @param listener\n             * @public\n             */\n            value: function onAny(listener) {\n              this._anyListeners = this._anyListeners || [];\n\n              this._anyListeners.push(listener);\n\n              return this;\n            }\n            /**\n             * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n             * callback. The listener is added to the beginning of the listeners array.\n             *\n             * @param listener\n             * @public\n             */\n\n          }, {\n            key: \"prependAny\",\n            value: function prependAny(listener) {\n              this._anyListeners = this._anyListeners || [];\n\n              this._anyListeners.unshift(listener);\n\n              return this;\n            }\n            /**\n             * Removes the listener that will be fired when any event is emitted.\n             *\n             * @param listener\n             * @public\n             */\n\n          }, {\n            key: \"offAny\",\n            value: function offAny(listener) {\n              if (!this._anyListeners) {\n                return this;\n              }\n\n              if (listener) {\n                var listeners = this._anyListeners;\n\n                for (var i = 0; i < listeners.length; i++) {\n                  if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                  }\n                }\n              } else {\n                this._anyListeners = [];\n              }\n\n              return this;\n            }\n            /**\n             * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n             * e.g. to remove listeners.\n             *\n             * @public\n             */\n\n          }, {\n            key: \"listenersAny\",\n            value: function listenersAny() {\n              return this._anyListeners || [];\n            }\n          }, {\n            key: \"volatile\",\n            get: function get() {\n              this.flags[\"volatile\"] = true;\n              return this;\n            }\n          }]);\n\n          return Socket;\n        }(Emitter);\n\n        exports.Socket = Socket;\n        /***/\n      },\n\n      /***/\n      \"./build/url.js\":\n      /*!**********************!*\\\n        !*** ./build/url.js ***!\n        \\**********************/\n\n      /*! no static exports found */\n\n      /***/\n      function buildUrlJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.url = void 0;\n\n        var parseuri = __webpack_require__(\n        /*! parseuri */\n        \"./node_modules/parseuri/index.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"socket.io-client:url\");\n        /**\n         * URL parser.\n         *\n         * @param {String} uri - url\n         * @param {Object} loc - An object meant to mimic window.location.\n         *                 Defaults to window.location.\n         * @public\n         */\n\n\n        function url(uri, loc) {\n          var obj = uri; // default to window.location\n\n          loc = loc || typeof location !== \"undefined\" && location;\n          if (null == uri) uri = loc.protocol + \"//\" + loc.host; // relative path support\n\n          if (\"string\" === typeof uri) {\n            if (\"/\" === uri.charAt(0)) {\n              if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n              } else {\n                uri = loc.host + uri;\n              }\n            }\n\n            if (!/^(https?|wss?):\\/\\//.test(uri)) {\n              debug(\"protocol-less url %s\", uri);\n\n              if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n              } else {\n                uri = \"https://\" + uri;\n              }\n            } // parse\n\n\n            debug(\"parse %s\", uri);\n            obj = parseuri(uri);\n          } // make sure we treat `localhost:80` and `localhost` equally\n\n\n          if (!obj.port) {\n            if (/^(http|ws)$/.test(obj.protocol)) {\n              obj.port = \"80\";\n            } else if (/^(http|ws)s$/.test(obj.protocol)) {\n              obj.port = \"443\";\n            }\n          }\n\n          obj.path = obj.path || \"/\";\n          var ipv6 = obj.host.indexOf(\":\") !== -1;\n          var host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host; // define unique id\n\n          obj.id = obj.protocol + \"://\" + host + \":\" + obj.port; // define href\n\n          obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n          return obj;\n        }\n\n        exports.url = url;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/backo2/index.js\":\n      /*!**************************************!*\\\n        !*** ./node_modules/backo2/index.js ***!\n        \\**************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesBacko2IndexJs(module, exports) {\n        /**\n         * Expose `Backoff`.\n         */\n        module.exports = Backoff;\n        /**\n         * Initialize backoff timer with `opts`.\n         *\n         * - `min` initial timeout in milliseconds [100]\n         * - `max` max timeout [10000]\n         * - `jitter` [0]\n         * - `factor` [2]\n         *\n         * @param {Object} opts\n         * @api public\n         */\n\n        function Backoff(opts) {\n          opts = opts || {};\n          this.ms = opts.min || 100;\n          this.max = opts.max || 10000;\n          this.factor = opts.factor || 2;\n          this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n          this.attempts = 0;\n        }\n        /**\n         * Return the backoff duration.\n         *\n         * @return {Number}\n         * @api public\n         */\n\n\n        Backoff.prototype.duration = function () {\n          var ms = this.ms * Math.pow(this.factor, this.attempts++);\n\n          if (this.jitter) {\n            var rand = Math.random();\n            var deviation = Math.floor(rand * this.jitter * ms);\n            ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n          }\n\n          return Math.min(ms, this.max) | 0;\n        };\n        /**\n         * Reset the number of attempts.\n         *\n         * @api public\n         */\n\n\n        Backoff.prototype.reset = function () {\n          this.attempts = 0;\n        };\n        /**\n         * Set the minimum duration\n         *\n         * @api public\n         */\n\n\n        Backoff.prototype.setMin = function (min) {\n          this.ms = min;\n        };\n        /**\n         * Set the maximum duration\n         *\n         * @api public\n         */\n\n\n        Backoff.prototype.setMax = function (max) {\n          this.max = max;\n        };\n        /**\n         * Set the jitter\n         *\n         * @api public\n         */\n\n\n        Backoff.prototype.setJitter = function (jitter) {\n          this.jitter = jitter;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js\":\n      /*!*******************************************************************!*\\\n        !*** ./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js ***!\n        \\*******************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesBase64ArraybufferLibBase64ArraybufferJs(module, exports) {\n        /*\n         * base64-arraybuffer\n         * https://github.com/niklasvh/base64-arraybuffer\n         *\n         * Copyright (c) 2012 Niklas von Hertzen\n         * Licensed under the MIT license.\n         */\n        (function () {\n          \"use strict\";\n\n          var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"; // Use a lookup table to find the index.\n\n          var lookup = new Uint8Array(256);\n\n          for (var i = 0; i < chars.length; i++) {\n            lookup[chars.charCodeAt(i)] = i;\n          }\n\n          exports.encode = function (arraybuffer) {\n            var bytes = new Uint8Array(arraybuffer),\n                i,\n                len = bytes.length,\n                base64 = \"\";\n\n            for (i = 0; i < len; i += 3) {\n              base64 += chars[bytes[i] >> 2];\n              base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n              base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n              base64 += chars[bytes[i + 2] & 63];\n            }\n\n            if (len % 3 === 2) {\n              base64 = base64.substring(0, base64.length - 1) + \"=\";\n            } else if (len % 3 === 1) {\n              base64 = base64.substring(0, base64.length - 2) + \"==\";\n            }\n\n            return base64;\n          };\n\n          exports.decode = function (base64) {\n            var bufferLength = base64.length * 0.75,\n                len = base64.length,\n                i,\n                p = 0,\n                encoded1,\n                encoded2,\n                encoded3,\n                encoded4;\n\n            if (base64[base64.length - 1] === \"=\") {\n              bufferLength--;\n\n              if (base64[base64.length - 2] === \"=\") {\n                bufferLength--;\n              }\n            }\n\n            var arraybuffer = new ArrayBuffer(bufferLength),\n                bytes = new Uint8Array(arraybuffer);\n\n            for (i = 0; i < len; i += 4) {\n              encoded1 = lookup[base64.charCodeAt(i)];\n              encoded2 = lookup[base64.charCodeAt(i + 1)];\n              encoded3 = lookup[base64.charCodeAt(i + 2)];\n              encoded4 = lookup[base64.charCodeAt(i + 3)];\n              bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n              bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n              bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n            }\n\n            return arraybuffer;\n          };\n        })();\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/component-bind/index.js\":\n      /*!**********************************************!*\\\n        !*** ./node_modules/component-bind/index.js ***!\n        \\**********************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesComponentBindIndexJs(module, exports) {\n        /**\n         * Slice reference.\n         */\n        var slice = [].slice;\n        /**\n         * Bind `obj` to `fn`.\n         *\n         * @param {Object} obj\n         * @param {Function|String} fn or string\n         * @return {Function}\n         * @api public\n         */\n\n        module.exports = function (obj, fn) {\n          if ('string' == typeof fn) fn = obj[fn];\n          if ('function' != typeof fn) throw new Error('bind() requires a function');\n          var args = slice.call(arguments, 2);\n          return function () {\n            return fn.apply(obj, args.concat(slice.call(arguments)));\n          };\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/component-emitter/index.js\":\n      /*!*************************************************!*\\\n        !*** ./node_modules/component-emitter/index.js ***!\n        \\*************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesComponentEmitterIndexJs(module, exports, __webpack_require__) {\n        /**\r\n         * Expose `Emitter`.\r\n         */\n        if (true) {\n          module.exports = Emitter;\n        }\n        /**\r\n         * Initialize a new `Emitter`.\r\n         *\r\n         * @api public\r\n         */\n\n\n        function Emitter(obj) {\n          if (obj) return mixin(obj);\n        }\n\n        ;\n        /**\r\n         * Mixin the emitter properties.\r\n         *\r\n         * @param {Object} obj\r\n         * @return {Object}\r\n         * @api private\r\n         */\n\n        function mixin(obj) {\n          for (var key in Emitter.prototype) {\n            obj[key] = Emitter.prototype[key];\n          }\n\n          return obj;\n        }\n        /**\r\n         * Listen on the given `event` with `fn`.\r\n         *\r\n         * @param {String} event\r\n         * @param {Function} fn\r\n         * @return {Emitter}\r\n         * @api public\r\n         */\n\n\n        Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {};\n          (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);\n          return this;\n        };\n        /**\r\n         * Adds an `event` listener that will be invoked a single\r\n         * time then automatically removed.\r\n         *\r\n         * @param {String} event\r\n         * @param {Function} fn\r\n         * @return {Emitter}\r\n         * @api public\r\n         */\n\n\n        Emitter.prototype.once = function (event, fn) {\n          function on() {\n            this.off(event, on);\n            fn.apply(this, arguments);\n          }\n\n          on.fn = fn;\n          this.on(event, on);\n          return this;\n        };\n        /**\r\n         * Remove the given callback for `event` or all\r\n         * registered callbacks.\r\n         *\r\n         * @param {String} event\r\n         * @param {Function} fn\r\n         * @return {Emitter}\r\n         * @api public\r\n         */\n\n\n        Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {\n          this._callbacks = this._callbacks || {}; // all\n\n          if (0 == arguments.length) {\n            this._callbacks = {};\n            return this;\n          } // specific event\n\n\n          var callbacks = this._callbacks['$' + event];\n          if (!callbacks) return this; // remove all handlers\n\n          if (1 == arguments.length) {\n            delete this._callbacks['$' + event];\n            return this;\n          } // remove specific handler\n\n\n          var cb;\n\n          for (var i = 0; i < callbacks.length; i++) {\n            cb = callbacks[i];\n\n            if (cb === fn || cb.fn === fn) {\n              callbacks.splice(i, 1);\n              break;\n            }\n          } // Remove event specific arrays for event types that no\n          // one is subscribed for to avoid memory leak.\n\n\n          if (callbacks.length === 0) {\n            delete this._callbacks['$' + event];\n          }\n\n          return this;\n        };\n        /**\r\n         * Emit `event` with the given args.\r\n         *\r\n         * @param {String} event\r\n         * @param {Mixed} ...\r\n         * @return {Emitter}\r\n         */\n\n\n        Emitter.prototype.emit = function (event) {\n          this._callbacks = this._callbacks || {};\n          var args = new Array(arguments.length - 1),\n              callbacks = this._callbacks['$' + event];\n\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n\n          if (callbacks) {\n            callbacks = callbacks.slice(0);\n\n            for (var i = 0, len = callbacks.length; i < len; ++i) {\n              callbacks[i].apply(this, args);\n            }\n          }\n\n          return this;\n        };\n        /**\r\n         * Return array of callbacks for `event`.\r\n         *\r\n         * @param {String} event\r\n         * @return {Array}\r\n         * @api public\r\n         */\n\n\n        Emitter.prototype.listeners = function (event) {\n          this._callbacks = this._callbacks || {};\n          return this._callbacks['$' + event] || [];\n        };\n        /**\r\n         * Check if this emitter has `event` handlers.\r\n         *\r\n         * @param {String} event\r\n         * @return {Boolean}\r\n         * @api public\r\n         */\n\n\n        Emitter.prototype.hasListeners = function (event) {\n          return !!this.listeners(event).length;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/debug/src/browser.js\":\n      /*!*******************************************!*\\\n        !*** ./node_modules/debug/src/browser.js ***!\n        \\*******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesDebugSrcBrowserJs(module, exports, __webpack_require__) {\n        /* WEBPACK VAR INJECTION */\n        (function (process) {\n          function _typeof(obj) {\n            \"@babel/helpers - typeof\";\n\n            if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n              _typeof = function _typeof(obj) {\n                return typeof obj;\n              };\n            } else {\n              _typeof = function _typeof(obj) {\n                return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n              };\n            }\n\n            return _typeof(obj);\n          }\n          /* eslint-env browser */\n\n          /**\n           * This is the web browser implementation of `debug()`.\n           */\n\n\n          exports.log = log;\n          exports.formatArgs = formatArgs;\n          exports.save = save;\n          exports.load = load;\n          exports.useColors = useColors;\n          exports.storage = localstorage();\n          /**\n           * Colors.\n           */\n\n          exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];\n          /**\n           * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n           * and the Firebug extension (any Firefox version) are known\n           * to support \"%c\" CSS customizations.\n           *\n           * TODO: add a `localStorage` variable to explicitly enable/disable colors\n           */\n          // eslint-disable-next-line complexity\n\n          function useColors() {\n            // NB: In an Electron preload script, document will be defined but not fully\n            // initialized. Since we know we're in Chrome, we'll just detect this case\n            // explicitly\n            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n              return true;\n            } // Internet Explorer and Edge do not support colors.\n\n\n            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n              return false;\n            } // Is webkit? http://stackoverflow.com/a/16459606/376773\n            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\n\n            return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773\n            typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?\n            // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker\n            typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n          }\n          /**\n           * Colorize log arguments if enabled.\n           *\n           * @api public\n           */\n\n\n          function formatArgs(args) {\n            args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);\n\n            if (!this.useColors) {\n              return;\n            }\n\n            var c = 'color: ' + this.color;\n            args.splice(1, 0, c, 'color: inherit'); // The final \"%c\" is somewhat tricky, because there could be other\n            // arguments passed either before or after the %c, so we need to\n            // figure out the correct index to insert the CSS into\n\n            var index = 0;\n            var lastC = 0;\n            args[0].replace(/%[a-zA-Z%]/g, function (match) {\n              if (match === '%%') {\n                return;\n              }\n\n              index++;\n\n              if (match === '%c') {\n                // We only are interested in the *last* %c\n                // (the user may have provided their own)\n                lastC = index;\n              }\n            });\n            args.splice(lastC, 0, c);\n          }\n          /**\n           * Invokes `console.log()` when available.\n           * No-op when `console.log` is not a \"function\".\n           *\n           * @api public\n           */\n\n\n          function log() {\n            var _console; // This hackery is required for IE8/9, where\n            // the `console.log` function doesn't have 'apply'\n\n\n            return (typeof console === \"undefined\" ? \"undefined\" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);\n          }\n          /**\n           * Save `namespaces`.\n           *\n           * @param {String} namespaces\n           * @api private\n           */\n\n\n          function save(namespaces) {\n            try {\n              if (namespaces) {\n                exports.storage.setItem('debug', namespaces);\n              } else {\n                exports.storage.removeItem('debug');\n              }\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            }\n          }\n          /**\n           * Load `namespaces`.\n           *\n           * @return {String} returns the previously persisted debug modes\n           * @api private\n           */\n\n\n          function load() {\n            var r;\n\n            try {\n              r = exports.storage.getItem('debug');\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            } // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\n\n            if (!r && typeof process !== 'undefined' && 'env' in process) {\n              r = process.env.DEBUG;\n            }\n\n            return r;\n          }\n          /**\n           * Localstorage attempts to return the localstorage.\n           *\n           * This is necessary because safari throws\n           * when a user disables cookies/localstorage\n           * and you attempt to access it.\n           *\n           * @return {LocalStorage}\n           * @api private\n           */\n\n\n          function localstorage() {\n            try {\n              // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n              // The Browser also has localStorage in the global context.\n              return localStorage;\n            } catch (error) {// Swallow\n              // XXX (@Qix-) should we be logging these?\n            }\n          }\n\n          module.exports = __webpack_require__(\n          /*! ./common */\n          \"./node_modules/debug/src/common.js\")(exports);\n          var formatters = module.exports.formatters;\n          /**\n           * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n           */\n\n          formatters.j = function (v) {\n            try {\n              return JSON.stringify(v);\n            } catch (error) {\n              return '[UnexpectedJSONParseError]: ' + error.message;\n            }\n          };\n          /* WEBPACK VAR INJECTION */\n\n        }).call(this, __webpack_require__(\n        /*! ./../../process/browser.js */\n        \"./node_modules/process/browser.js\"));\n        /***/\n      },\n\n      /***/\n      \"./node_modules/debug/src/common.js\":\n      /*!******************************************!*\\\n        !*** ./node_modules/debug/src/common.js ***!\n        \\******************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesDebugSrcCommonJs(module, exports, __webpack_require__) {\n        function _toConsumableArray(arr) {\n          return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n        }\n\n        function _nonIterableSpread() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n        }\n\n        function _unsupportedIterableToArray(o, minLen) {\n          if (!o) return;\n          if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n          var n = Object.prototype.toString.call(o).slice(8, -1);\n          if (n === \"Object\" && o.constructor) n = o.constructor.name;\n          if (n === \"Map\" || n === \"Set\") return Array.from(o);\n          if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n        }\n\n        function _iterableToArray(iter) {\n          if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n        }\n\n        function _arrayWithoutHoles(arr) {\n          if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n        }\n\n        function _arrayLikeToArray(arr, len) {\n          if (len == null || len > arr.length) len = arr.length;\n\n          for (var i = 0, arr2 = new Array(len); i < len; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        }\n        /**\n         * This is the common logic for both the Node.js and web browser\n         * implementations of `debug()`.\n         */\n\n\n        function setup(env) {\n          createDebug.debug = createDebug;\n          createDebug[\"default\"] = createDebug;\n          createDebug.coerce = coerce;\n          createDebug.disable = disable;\n          createDebug.enable = enable;\n          createDebug.enabled = enabled;\n          createDebug.humanize = __webpack_require__(\n          /*! ms */\n          \"./node_modules/ms/index.js\");\n          Object.keys(env).forEach(function (key) {\n            createDebug[key] = env[key];\n          });\n          /**\n          * Active `debug` instances.\n          */\n\n          createDebug.instances = [];\n          /**\n          * The currently active debug mode names, and names to skip.\n          */\n\n          createDebug.names = [];\n          createDebug.skips = [];\n          /**\n          * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n          *\n          * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n          */\n\n          createDebug.formatters = {};\n          /**\n          * Selects a color for a debug namespace\n          * @param {String} namespace The namespace string for the for the debug instance to be colored\n          * @return {Number|String} An ANSI color code for the given namespace\n          * @api private\n          */\n\n          function selectColor(namespace) {\n            var hash = 0;\n\n            for (var i = 0; i < namespace.length; i++) {\n              hash = (hash << 5) - hash + namespace.charCodeAt(i);\n              hash |= 0; // Convert to 32bit integer\n            }\n\n            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n          }\n\n          createDebug.selectColor = selectColor;\n          /**\n          * Create a debugger with the given `namespace`.\n          *\n          * @param {String} namespace\n          * @return {Function}\n          * @api public\n          */\n\n          function createDebug(namespace) {\n            var prevTime;\n\n            function debug() {\n              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                args[_key] = arguments[_key];\n              } // Disabled?\n\n\n              if (!debug.enabled) {\n                return;\n              }\n\n              var self = debug; // Set `diff` timestamp\n\n              var curr = Number(new Date());\n              var ms = curr - (prevTime || curr);\n              self.diff = ms;\n              self.prev = prevTime;\n              self.curr = curr;\n              prevTime = curr;\n              args[0] = createDebug.coerce(args[0]);\n\n              if (typeof args[0] !== 'string') {\n                // Anything else let's inspect with %O\n                args.unshift('%O');\n              } // Apply any `formatters` transformations\n\n\n              var index = 0;\n              args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {\n                // If we encounter an escaped % then don't increase the array index\n                if (match === '%%') {\n                  return match;\n                }\n\n                index++;\n                var formatter = createDebug.formatters[format];\n\n                if (typeof formatter === 'function') {\n                  var val = args[index];\n                  match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n                  args.splice(index, 1);\n                  index--;\n                }\n\n                return match;\n              }); // Apply env-specific formatting (colors, etc.)\n\n              createDebug.formatArgs.call(self, args);\n              var logFn = self.log || createDebug.log;\n              logFn.apply(self, args);\n            }\n\n            debug.namespace = namespace;\n            debug.enabled = createDebug.enabled(namespace);\n            debug.useColors = createDebug.useColors();\n            debug.color = selectColor(namespace);\n            debug.destroy = destroy;\n            debug.extend = extend; // Debug.formatArgs = formatArgs;\n            // debug.rawLog = rawLog;\n            // env-specific initialization logic for debug instances\n\n            if (typeof createDebug.init === 'function') {\n              createDebug.init(debug);\n            }\n\n            createDebug.instances.push(debug);\n            return debug;\n          }\n\n          function destroy() {\n            var index = createDebug.instances.indexOf(this);\n\n            if (index !== -1) {\n              createDebug.instances.splice(index, 1);\n              return true;\n            }\n\n            return false;\n          }\n\n          function extend(namespace, delimiter) {\n            var newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n            newDebug.log = this.log;\n            return newDebug;\n          }\n          /**\n          * Enables a debug mode by namespaces. This can include modes\n          * separated by a colon and wildcards.\n          *\n          * @param {String} namespaces\n          * @api public\n          */\n\n\n          function enable(namespaces) {\n            createDebug.save(namespaces);\n            createDebug.names = [];\n            createDebug.skips = [];\n            var i;\n            var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n            var len = split.length;\n\n            for (i = 0; i < len; i++) {\n              if (!split[i]) {\n                // ignore empty strings\n                continue;\n              }\n\n              namespaces = split[i].replace(/\\*/g, '.*?');\n\n              if (namespaces[0] === '-') {\n                createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n              } else {\n                createDebug.names.push(new RegExp('^' + namespaces + '$'));\n              }\n            }\n\n            for (i = 0; i < createDebug.instances.length; i++) {\n              var instance = createDebug.instances[i];\n              instance.enabled = createDebug.enabled(instance.namespace);\n            }\n          }\n          /**\n          * Disable debug output.\n          *\n          * @return {String} namespaces\n          * @api public\n          */\n\n\n          function disable() {\n            var namespaces = [].concat(_toConsumableArray(createDebug.names.map(toNamespace)), _toConsumableArray(createDebug.skips.map(toNamespace).map(function (namespace) {\n              return '-' + namespace;\n            }))).join(',');\n            createDebug.enable('');\n            return namespaces;\n          }\n          /**\n          * Returns true if the given mode name is enabled, false otherwise.\n          *\n          * @param {String} name\n          * @return {Boolean}\n          * @api public\n          */\n\n\n          function enabled(name) {\n            if (name[name.length - 1] === '*') {\n              return true;\n            }\n\n            var i;\n            var len;\n\n            for (i = 0, len = createDebug.skips.length; i < len; i++) {\n              if (createDebug.skips[i].test(name)) {\n                return false;\n              }\n            }\n\n            for (i = 0, len = createDebug.names.length; i < len; i++) {\n              if (createDebug.names[i].test(name)) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n          /**\n          * Convert regexp to namespace\n          *\n          * @param {RegExp} regxep\n          * @return {String} namespace\n          * @api private\n          */\n\n\n          function toNamespace(regexp) {\n            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, '*');\n          }\n          /**\n          * Coerce `val`.\n          *\n          * @param {Mixed} val\n          * @return {Mixed}\n          * @api private\n          */\n\n\n          function coerce(val) {\n            if (val instanceof Error) {\n              return val.stack || val.message;\n            }\n\n            return val;\n          }\n\n          createDebug.enable(createDebug.load());\n          return createDebug;\n        }\n\n        module.exports = setup;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/globalThis.browser.js\":\n      /*!*****************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/globalThis.browser.js ***!\n        \\*****************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibGlobalThisBrowserJs(module, exports) {\n        module.exports = function () {\n          if (typeof self !== \"undefined\") {\n            return self;\n          } else if (typeof window !== \"undefined\") {\n            return window;\n          } else {\n            return Function(\"return this\")();\n          }\n        }();\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/index.js\":\n      /*!****************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/index.js ***!\n        \\****************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibIndexJs(module, exports, __webpack_require__) {\n        var Socket = __webpack_require__(\n        /*! ./socket */\n        \"./node_modules/engine.io-client/lib/socket.js\");\n\n        module.exports = function (uri, opts) {\n          return new Socket(uri, opts);\n        };\n        /**\n         * Expose deps for legacy compatibility\n         * and standalone browser access.\n         */\n\n\n        module.exports.Socket = Socket;\n        module.exports.protocol = Socket.protocol; // this is an int\n\n        module.exports.Transport = __webpack_require__(\n        /*! ./transport */\n        \"./node_modules/engine.io-client/lib/transport.js\");\n        module.exports.transports = __webpack_require__(\n        /*! ./transports/index */\n        \"./node_modules/engine.io-client/lib/transports/index.js\");\n        module.exports.parser = __webpack_require__(\n        /*! engine.io-parser */\n        \"./node_modules/engine.io-parser/lib/index.js\");\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/socket.js\":\n      /*!*****************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/socket.js ***!\n        \\*****************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibSocketJs(module, exports, __webpack_require__) {\n        function _extends() {\n          _extends = Object.assign || function (target) {\n            for (var i = 1; i < arguments.length; i++) {\n              var source = arguments[i];\n\n              for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                  target[key] = source[key];\n                }\n              }\n            }\n\n            return target;\n          };\n\n          return _extends.apply(this, arguments);\n        }\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        var transports = __webpack_require__(\n        /*! ./transports/index */\n        \"./node_modules/engine.io-client/lib/transports/index.js\");\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"engine.io-client:socket\");\n\n        var parser = __webpack_require__(\n        /*! engine.io-parser */\n        \"./node_modules/engine.io-parser/lib/index.js\");\n\n        var parseuri = __webpack_require__(\n        /*! parseuri */\n        \"./node_modules/parseuri/index.js\");\n\n        var parseqs = __webpack_require__(\n        /*! parseqs */\n        \"./node_modules/parseqs/index.js\");\n\n        var Socket = /*#__PURE__*/function (_Emitter) {\n          _inherits(Socket, _Emitter);\n\n          var _super = _createSuper(Socket);\n          /**\n           * Socket constructor.\n           *\n           * @param {String|Object} uri or options\n           * @param {Object} options\n           * @api public\n           */\n\n\n          function Socket(uri) {\n            var _this;\n\n            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n            _classCallCheck(this, Socket);\n\n            _this = _super.call(this);\n\n            if (uri && \"object\" === _typeof(uri)) {\n              opts = uri;\n              uri = null;\n            }\n\n            if (uri) {\n              uri = parseuri(uri);\n              opts.hostname = uri.host;\n              opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n              opts.port = uri.port;\n              if (uri.query) opts.query = uri.query;\n            } else if (opts.host) {\n              opts.hostname = parseuri(opts.host).host;\n            }\n\n            _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n            if (opts.hostname && !opts.port) {\n              // if no port is specified manually, use the protocol default\n              opts.port = _this.secure ? \"443\" : \"80\";\n            }\n\n            _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n            _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n            _this.transports = opts.transports || [\"polling\", \"websocket\"];\n            _this.readyState = \"\";\n            _this.writeBuffer = [];\n            _this.prevBufferLen = 0;\n            _this.opts = _extends({\n              path: \"/engine.io\",\n              agent: false,\n              withCredentials: false,\n              upgrade: true,\n              jsonp: true,\n              timestampParam: \"t\",\n              policyPort: 843,\n              rememberUpgrade: false,\n              rejectUnauthorized: true,\n              perMessageDeflate: {\n                threshold: 1024\n              },\n              transportOptions: {}\n            }, opts);\n            _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n            if (typeof _this.opts.query === \"string\") {\n              _this.opts.query = parseqs.decode(_this.opts.query);\n            } // set on handshake\n\n\n            _this.id = null;\n            _this.upgrades = null;\n            _this.pingInterval = null;\n            _this.pingTimeout = null; // set on heartbeat\n\n            _this.pingTimeoutTimer = null;\n\n            _this.open();\n\n            return _this;\n          }\n          /**\n           * Creates transport of the given type.\n           *\n           * @param {String} transport name\n           * @return {Transport}\n           * @api private\n           */\n\n\n          _createClass(Socket, [{\n            key: \"createTransport\",\n            value: function createTransport(name) {\n              debug('creating transport \"%s\"', name);\n              var query = clone(this.opts.query); // append engine.io protocol identifier\n\n              query.EIO = parser.protocol; // transport name\n\n              query.transport = name; // session id if we already have one\n\n              if (this.id) query.sid = this.id;\n\n              var opts = _extends({}, this.opts.transportOptions[name], this.opts, {\n                query: query,\n                socket: this,\n                hostname: this.hostname,\n                secure: this.secure,\n                port: this.port\n              });\n\n              debug(\"options: %j\", opts);\n              return new transports[name](opts);\n            }\n            /**\n             * Initializes transport to use and starts probe.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"open\",\n            value: function open() {\n              var transport;\n\n              if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n                transport = \"websocket\";\n              } else if (0 === this.transports.length) {\n                // Emit error on next tick so it can be listened to\n                var self = this;\n                setTimeout(function () {\n                  self.emit(\"error\", \"No transports available\");\n                }, 0);\n                return;\n              } else {\n                transport = this.transports[0];\n              }\n\n              this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n              try {\n                transport = this.createTransport(transport);\n              } catch (e) {\n                debug(\"error while creating transport: %s\", e);\n                this.transports.shift();\n                this.open();\n                return;\n              }\n\n              transport.open();\n              this.setTransport(transport);\n            }\n            /**\n             * Sets the current transport. Disables the existing one (if any).\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"setTransport\",\n            value: function setTransport(transport) {\n              debug(\"setting transport %s\", transport.name);\n              var self = this;\n\n              if (this.transport) {\n                debug(\"clearing existing transport %s\", this.transport.name);\n                this.transport.removeAllListeners();\n              } // set up transport\n\n\n              this.transport = transport; // set up transport listeners\n\n              transport.on(\"drain\", function () {\n                self.onDrain();\n              }).on(\"packet\", function (packet) {\n                self.onPacket(packet);\n              }).on(\"error\", function (e) {\n                self.onError(e);\n              }).on(\"close\", function () {\n                self.onClose(\"transport close\");\n              });\n            }\n            /**\n             * Probes a transport.\n             *\n             * @param {String} transport name\n             * @api private\n             */\n\n          }, {\n            key: \"probe\",\n            value: function probe(name) {\n              debug('probing transport \"%s\"', name);\n              var transport = this.createTransport(name, {\n                probe: 1\n              });\n              var failed = false;\n              var self = this;\n              Socket.priorWebsocketSuccess = false;\n\n              function onTransportOpen() {\n                if (self.onlyBinaryUpgrades) {\n                  var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n                  failed = failed || upgradeLosesBinary;\n                }\n\n                if (failed) return;\n                debug('probe transport \"%s\" opened', name);\n                transport.send([{\n                  type: \"ping\",\n                  data: \"probe\"\n                }]);\n                transport.once(\"packet\", function (msg) {\n                  if (failed) return;\n\n                  if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    debug('probe transport \"%s\" pong', name);\n                    self.upgrading = true;\n                    self.emit(\"upgrading\", transport);\n                    if (!transport) return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    debug('pausing current transport \"%s\"', self.transport.name);\n                    self.transport.pause(function () {\n                      if (failed) return;\n                      if (\"closed\" === self.readyState) return;\n                      debug(\"changing transport and sending upgrade packet\");\n                      cleanup();\n                      self.setTransport(transport);\n                      transport.send([{\n                        type: \"upgrade\"\n                      }]);\n                      self.emit(\"upgrade\", transport);\n                      transport = null;\n                      self.upgrading = false;\n                      self.flush();\n                    });\n                  } else {\n                    debug('probe transport \"%s\" failed', name);\n                    var err = new Error(\"probe error\");\n                    err.transport = transport.name;\n                    self.emit(\"upgradeError\", err);\n                  }\n                });\n              }\n\n              function freezeTransport() {\n                if (failed) return; // Any callback called by transport should be ignored since now\n\n                failed = true;\n                cleanup();\n                transport.close();\n                transport = null;\n              } // Handle any error that happens while probing\n\n\n              function onerror(err) {\n                var error = new Error(\"probe error: \" + err);\n                error.transport = transport.name;\n                freezeTransport();\n                debug('probe transport \"%s\" failed because of error: %s', name, err);\n                self.emit(\"upgradeError\", error);\n              }\n\n              function onTransportClose() {\n                onerror(\"transport closed\");\n              } // When the socket is closed while we're probing\n\n\n              function onclose() {\n                onerror(\"socket closed\");\n              } // When the socket is upgraded while we're probing\n\n\n              function onupgrade(to) {\n                if (transport && to.name !== transport.name) {\n                  debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n                  freezeTransport();\n                }\n              } // Remove all listeners on the transport and on self\n\n\n              function cleanup() {\n                transport.removeListener(\"open\", onTransportOpen);\n                transport.removeListener(\"error\", onerror);\n                transport.removeListener(\"close\", onTransportClose);\n                self.removeListener(\"close\", onclose);\n                self.removeListener(\"upgrading\", onupgrade);\n              }\n\n              transport.once(\"open\", onTransportOpen);\n              transport.once(\"error\", onerror);\n              transport.once(\"close\", onTransportClose);\n              this.once(\"close\", onclose);\n              this.once(\"upgrading\", onupgrade);\n              transport.open();\n            }\n            /**\n             * Called when connection is deemed open.\n             *\n             * @api public\n             */\n\n          }, {\n            key: \"onOpen\",\n            value: function onOpen() {\n              debug(\"socket open\");\n              this.readyState = \"open\";\n              Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n              this.emit(\"open\");\n              this.flush(); // we check for `readyState` in case an `open`\n              // listener already closed the socket\n\n              if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n                debug(\"starting upgrade probes\");\n                var i = 0;\n                var l = this.upgrades.length;\n\n                for (; i < l; i++) {\n                  this.probe(this.upgrades[i]);\n                }\n              }\n            }\n            /**\n             * Handles a packet.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onPacket\",\n            value: function onPacket(packet) {\n              if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n                debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n                this.emit(\"packet\", packet); // Socket is live - any packet counts\n\n                this.emit(\"heartbeat\");\n\n                switch (packet.type) {\n                  case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n\n                  case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emit(\"pong\");\n                    break;\n\n                  case \"error\":\n                    var err = new Error(\"server error\");\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n\n                  case \"message\":\n                    this.emit(\"data\", packet.data);\n                    this.emit(\"message\", packet.data);\n                    break;\n                }\n              } else {\n                debug('packet received with socket readyState \"%s\"', this.readyState);\n              }\n            }\n            /**\n             * Called upon handshake completion.\n             *\n             * @param {Object} handshake obj\n             * @api private\n             */\n\n          }, {\n            key: \"onHandshake\",\n            value: function onHandshake(data) {\n              this.emit(\"handshake\", data);\n              this.id = data.sid;\n              this.transport.query.sid = data.sid;\n              this.upgrades = this.filterUpgrades(data.upgrades);\n              this.pingInterval = data.pingInterval;\n              this.pingTimeout = data.pingTimeout;\n              this.onOpen(); // In case open handler closes socket\n\n              if (\"closed\" === this.readyState) return;\n              this.resetPingTimeout();\n            }\n            /**\n             * Sets and resets ping timeout timer based on server pings.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"resetPingTimeout\",\n            value: function resetPingTimeout() {\n              var _this2 = this;\n\n              clearTimeout(this.pingTimeoutTimer);\n              this.pingTimeoutTimer = setTimeout(function () {\n                _this2.onClose(\"ping timeout\");\n              }, this.pingInterval + this.pingTimeout);\n            }\n            /**\n             * Called on `drain` event\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onDrain\",\n            value: function onDrain() {\n              this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n              // for example, when upgrading, upgrade packet is sent over,\n              // and a nonzero prevBufferLen could cause problems on `drain`\n\n              this.prevBufferLen = 0;\n\n              if (0 === this.writeBuffer.length) {\n                this.emit(\"drain\");\n              } else {\n                this.flush();\n              }\n            }\n            /**\n             * Flush write buffers.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"flush\",\n            value: function flush() {\n              if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n                debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n                this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n                // splice writeBuffer and callbackBuffer on `drain`\n\n                this.prevBufferLen = this.writeBuffer.length;\n                this.emit(\"flush\");\n              }\n            }\n            /**\n             * Sends a message.\n             *\n             * @param {String} message.\n             * @param {Function} callback function.\n             * @param {Object} options.\n             * @return {Socket} for chaining.\n             * @api public\n             */\n\n          }, {\n            key: \"write\",\n            value: function write(msg, options, fn) {\n              this.sendPacket(\"message\", msg, options, fn);\n              return this;\n            }\n          }, {\n            key: \"send\",\n            value: function send(msg, options, fn) {\n              this.sendPacket(\"message\", msg, options, fn);\n              return this;\n            }\n            /**\n             * Sends a packet.\n             *\n             * @param {String} packet type.\n             * @param {String} data.\n             * @param {Object} options.\n             * @param {Function} callback function.\n             * @api private\n             */\n\n          }, {\n            key: \"sendPacket\",\n            value: function sendPacket(type, data, options, fn) {\n              if (\"function\" === typeof data) {\n                fn = data;\n                data = undefined;\n              }\n\n              if (\"function\" === typeof options) {\n                fn = options;\n                options = null;\n              }\n\n              if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n                return;\n              }\n\n              options = options || {};\n              options.compress = false !== options.compress;\n              var packet = {\n                type: type,\n                data: data,\n                options: options\n              };\n              this.emit(\"packetCreate\", packet);\n              this.writeBuffer.push(packet);\n              if (fn) this.once(\"flush\", fn);\n              this.flush();\n            }\n            /**\n             * Closes the connection.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"close\",\n            value: function close() {\n              var self = this;\n\n              if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n                this.readyState = \"closing\";\n\n                if (this.writeBuffer.length) {\n                  this.once(\"drain\", function () {\n                    if (this.upgrading) {\n                      waitForUpgrade();\n                    } else {\n                      close();\n                    }\n                  });\n                } else if (this.upgrading) {\n                  waitForUpgrade();\n                } else {\n                  close();\n                }\n              }\n\n              function close() {\n                self.onClose(\"forced close\");\n                debug(\"socket closing - telling transport to close\");\n                self.transport.close();\n              }\n\n              function cleanupAndClose() {\n                self.removeListener(\"upgrade\", cleanupAndClose);\n                self.removeListener(\"upgradeError\", cleanupAndClose);\n                close();\n              }\n\n              function waitForUpgrade() {\n                // wait for upgrade to finish since we can't send packets while pausing a transport\n                self.once(\"upgrade\", cleanupAndClose);\n                self.once(\"upgradeError\", cleanupAndClose);\n              }\n\n              return this;\n            }\n            /**\n             * Called upon transport error\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onError\",\n            value: function onError(err) {\n              debug(\"socket error %j\", err);\n              Socket.priorWebsocketSuccess = false;\n              this.emit(\"error\", err);\n              this.onClose(\"transport error\", err);\n            }\n            /**\n             * Called upon transport close.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onClose\",\n            value: function onClose(reason, desc) {\n              if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n                debug('socket close with reason: \"%s\"', reason);\n                var self = this; // clear timers\n\n                clearTimeout(this.pingIntervalTimer);\n                clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n                this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n                this.transport.close(); // ignore further transport communication\n\n                this.transport.removeAllListeners(); // set ready state\n\n                this.readyState = \"closed\"; // clear session id\n\n                this.id = null; // emit close event\n\n                this.emit(\"close\", reason, desc); // clean buffers after, so users can still\n                // grab the buffers on `close` event\n\n                self.writeBuffer = [];\n                self.prevBufferLen = 0;\n              }\n            }\n            /**\n             * Filters upgrades, returning only those matching client transports.\n             *\n             * @param {Array} server upgrades\n             * @api private\n             *\n             */\n\n          }, {\n            key: \"filterUpgrades\",\n            value: function filterUpgrades(upgrades) {\n              var filteredUpgrades = [];\n              var i = 0;\n              var j = upgrades.length;\n\n              for (; i < j; i++) {\n                if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n              }\n\n              return filteredUpgrades;\n            }\n          }]);\n\n          return Socket;\n        }(Emitter);\n\n        Socket.priorWebsocketSuccess = false;\n        /**\n         * Protocol version.\n         *\n         * @api public\n         */\n\n        Socket.protocol = parser.protocol; // this is an int\n\n        function clone(obj) {\n          var o = {};\n\n          for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {\n              o[i] = obj[i];\n            }\n          }\n\n          return o;\n        }\n\n        module.exports = Socket;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transport.js\":\n      /*!********************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transport.js ***!\n        \\********************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportJs(module, exports, __webpack_require__) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        var parser = __webpack_require__(\n        /*! engine.io-parser */\n        \"./node_modules/engine.io-parser/lib/index.js\");\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var Transport = /*#__PURE__*/function (_Emitter) {\n          _inherits(Transport, _Emitter);\n\n          var _super = _createSuper(Transport);\n          /**\n           * Transport abstract constructor.\n           *\n           * @param {Object} options.\n           * @api private\n           */\n\n\n          function Transport(opts) {\n            var _this;\n\n            _classCallCheck(this, Transport);\n\n            _this = _super.call(this);\n            _this.opts = opts;\n            _this.query = opts.query;\n            _this.readyState = \"\";\n            _this.socket = opts.socket;\n            return _this;\n          }\n          /**\n           * Emits an error.\n           *\n           * @param {String} str\n           * @return {Transport} for chaining\n           * @api public\n           */\n\n\n          _createClass(Transport, [{\n            key: \"onError\",\n            value: function onError(msg, desc) {\n              var err = new Error(msg);\n              err.type = \"TransportError\";\n              err.description = desc;\n              this.emit(\"error\", err);\n              return this;\n            }\n            /**\n             * Opens the transport.\n             *\n             * @api public\n             */\n\n          }, {\n            key: \"open\",\n            value: function open() {\n              if (\"closed\" === this.readyState || \"\" === this.readyState) {\n                this.readyState = \"opening\";\n                this.doOpen();\n              }\n\n              return this;\n            }\n            /**\n             * Closes the transport.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"close\",\n            value: function close() {\n              if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n                this.doClose();\n                this.onClose();\n              }\n\n              return this;\n            }\n            /**\n             * Sends multiple packets.\n             *\n             * @param {Array} packets\n             * @api private\n             */\n\n          }, {\n            key: \"send\",\n            value: function send(packets) {\n              if (\"open\" === this.readyState) {\n                this.write(packets);\n              } else {\n                throw new Error(\"Transport not open\");\n              }\n            }\n            /**\n             * Called upon open\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onOpen\",\n            value: function onOpen() {\n              this.readyState = \"open\";\n              this.writable = true;\n              this.emit(\"open\");\n            }\n            /**\n             * Called with data.\n             *\n             * @param {String} data\n             * @api private\n             */\n\n          }, {\n            key: \"onData\",\n            value: function onData(data) {\n              var packet = parser.decodePacket(data, this.socket.binaryType);\n              this.onPacket(packet);\n            }\n            /**\n             * Called with a decoded packet.\n             */\n\n          }, {\n            key: \"onPacket\",\n            value: function onPacket(packet) {\n              this.emit(\"packet\", packet);\n            }\n            /**\n             * Called upon close.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onClose\",\n            value: function onClose() {\n              this.readyState = \"closed\";\n              this.emit(\"close\");\n            }\n          }]);\n\n          return Transport;\n        }(Emitter);\n\n        module.exports = Transport;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/index.js\":\n      /*!***************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/index.js ***!\n        \\***************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsIndexJs(module, exports, __webpack_require__) {\n        var XMLHttpRequest = __webpack_require__(\n        /*! xmlhttprequest-ssl */\n        \"./node_modules/engine.io-client/lib/xmlhttprequest.js\");\n\n        var XHR = __webpack_require__(\n        /*! ./polling-xhr */\n        \"./node_modules/engine.io-client/lib/transports/polling-xhr.js\");\n\n        var JSONP = __webpack_require__(\n        /*! ./polling-jsonp */\n        \"./node_modules/engine.io-client/lib/transports/polling-jsonp.js\");\n\n        var websocket = __webpack_require__(\n        /*! ./websocket */\n        \"./node_modules/engine.io-client/lib/transports/websocket.js\");\n\n        exports.polling = polling;\n        exports.websocket = websocket;\n        /**\n         * Polling transport polymorphic constructor.\n         * Decides on xhr vs jsonp based on feature detection.\n         *\n         * @api private\n         */\n\n        function polling(opts) {\n          var xhr;\n          var xd = false;\n          var xs = false;\n          var jsonp = false !== opts.jsonp;\n\n          if (typeof location !== \"undefined\") {\n            var isSSL = \"https:\" === location.protocol;\n            var port = location.port; // some user agents have empty `location.port`\n\n            if (!port) {\n              port = isSSL ? 443 : 80;\n            }\n\n            xd = opts.hostname !== location.hostname || port !== opts.port;\n            xs = opts.secure !== isSSL;\n          }\n\n          opts.xdomain = xd;\n          opts.xscheme = xs;\n          xhr = new XMLHttpRequest(opts);\n\n          if (\"open\" in xhr && !opts.forceJSONP) {\n            return new XHR(opts);\n          } else {\n            if (!jsonp) throw new Error(\"JSONP disabled\");\n            return new JSONP(opts);\n          }\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/polling-jsonp.js\":\n      /*!***********************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/polling-jsonp.js ***!\n        \\***********************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsPollingJsonpJs(module, exports, __webpack_require__) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        var Polling = __webpack_require__(\n        /*! ./polling */\n        \"./node_modules/engine.io-client/lib/transports/polling.js\");\n\n        var globalThis = __webpack_require__(\n        /*! ../globalThis */\n        \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n        var rNewline = /\\n/g;\n        var rEscapedNewline = /\\\\n/g;\n        /**\n         * Global JSONP callbacks.\n         */\n\n        var callbacks;\n        /**\n         * Noop.\n         */\n\n        function empty() {}\n\n        var JSONPPolling = /*#__PURE__*/function (_Polling) {\n          _inherits(JSONPPolling, _Polling);\n\n          var _super = _createSuper(JSONPPolling);\n          /**\n           * JSONP Polling constructor.\n           *\n           * @param {Object} opts.\n           * @api public\n           */\n\n\n          function JSONPPolling(opts) {\n            var _this;\n\n            _classCallCheck(this, JSONPPolling);\n\n            _this = _super.call(this, opts);\n            _this.query = _this.query || {}; // define global callbacks array if not present\n            // we do this here (lazily) to avoid unneeded global pollution\n\n            if (!callbacks) {\n              // we need to consider multiple engines in the same page\n              callbacks = globalThis.___eio = globalThis.___eio || [];\n            } // callback identifier\n\n\n            _this.index = callbacks.length; // add callback to jsonp global\n\n            var self = _assertThisInitialized(_this);\n\n            callbacks.push(function (msg) {\n              self.onData(msg);\n            }); // append to query string\n\n            _this.query.j = _this.index; // prevent spurious errors from being emitted when the window is unloaded\n\n            if (typeof addEventListener === \"function\") {\n              addEventListener(\"beforeunload\", function () {\n                if (self.script) self.script.onerror = empty;\n              }, false);\n            }\n\n            return _this;\n          }\n          /**\n           * JSONP only supports binary as base64 encoded strings\n           */\n\n\n          _createClass(JSONPPolling, [{\n            key: \"doClose\",\n\n            /**\n             * Closes the socket.\n             *\n             * @api private\n             */\n            value: function doClose() {\n              if (this.script) {\n                this.script.parentNode.removeChild(this.script);\n                this.script = null;\n              }\n\n              if (this.form) {\n                this.form.parentNode.removeChild(this.form);\n                this.form = null;\n                this.iframe = null;\n              }\n\n              _get(_getPrototypeOf(JSONPPolling.prototype), \"doClose\", this).call(this);\n            }\n            /**\n             * Starts a poll cycle.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"doPoll\",\n            value: function doPoll() {\n              var self = this;\n              var script = document.createElement(\"script\");\n\n              if (this.script) {\n                this.script.parentNode.removeChild(this.script);\n                this.script = null;\n              }\n\n              script.async = true;\n              script.src = this.uri();\n\n              script.onerror = function (e) {\n                self.onError(\"jsonp poll error\", e);\n              };\n\n              var insertAt = document.getElementsByTagName(\"script\")[0];\n\n              if (insertAt) {\n                insertAt.parentNode.insertBefore(script, insertAt);\n              } else {\n                (document.head || document.body).appendChild(script);\n              }\n\n              this.script = script;\n              var isUAgecko = \"undefined\" !== typeof navigator && /gecko/i.test(navigator.userAgent);\n\n              if (isUAgecko) {\n                setTimeout(function () {\n                  var iframe = document.createElement(\"iframe\");\n                  document.body.appendChild(iframe);\n                  document.body.removeChild(iframe);\n                }, 100);\n              }\n            }\n            /**\n             * Writes with a hidden iframe.\n             *\n             * @param {String} data to send\n             * @param {Function} called upon flush.\n             * @api private\n             */\n\n          }, {\n            key: \"doWrite\",\n            value: function doWrite(data, fn) {\n              var self = this;\n              var iframe;\n\n              if (!this.form) {\n                var form = document.createElement(\"form\");\n                var area = document.createElement(\"textarea\");\n                var id = this.iframeId = \"eio_iframe_\" + this.index;\n                form.className = \"socketio\";\n                form.style.position = \"absolute\";\n                form.style.top = \"-1000px\";\n                form.style.left = \"-1000px\";\n                form.target = id;\n                form.method = \"POST\";\n                form.setAttribute(\"accept-charset\", \"utf-8\");\n                area.name = \"d\";\n                form.appendChild(area);\n                document.body.appendChild(form);\n                this.form = form;\n                this.area = area;\n              }\n\n              this.form.action = this.uri();\n\n              function complete() {\n                initIframe();\n                fn();\n              }\n\n              function initIframe() {\n                if (self.iframe) {\n                  try {\n                    self.form.removeChild(self.iframe);\n                  } catch (e) {\n                    self.onError(\"jsonp polling iframe removal error\", e);\n                  }\n                }\n\n                try {\n                  // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n                  var html = '<iframe src=\"javascript:0\" name=\"' + self.iframeId + '\">';\n                  iframe = document.createElement(html);\n                } catch (e) {\n                  iframe = document.createElement(\"iframe\");\n                  iframe.name = self.iframeId;\n                  iframe.src = \"javascript:0\";\n                }\n\n                iframe.id = self.iframeId;\n                self.form.appendChild(iframe);\n                self.iframe = iframe;\n              }\n\n              initIframe(); // escape \\n to prevent it from being converted into \\r\\n by some UAs\n              // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\n\n              data = data.replace(rEscapedNewline, \"\\\\\\n\");\n              this.area.value = data.replace(rNewline, \"\\\\n\");\n\n              try {\n                this.form.submit();\n              } catch (e) {}\n\n              if (this.iframe.attachEvent) {\n                this.iframe.onreadystatechange = function () {\n                  if (self.iframe.readyState === \"complete\") {\n                    complete();\n                  }\n                };\n              } else {\n                this.iframe.onload = complete;\n              }\n            }\n          }, {\n            key: \"supportsBinary\",\n            get: function get() {\n              return false;\n            }\n          }]);\n\n          return JSONPPolling;\n        }(Polling);\n\n        module.exports = JSONPPolling;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/polling-xhr.js\":\n      /*!*********************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/polling-xhr.js ***!\n        \\*********************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsPollingXhrJs(module, exports, __webpack_require__) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _extends() {\n          _extends = Object.assign || function (target) {\n            for (var i = 1; i < arguments.length; i++) {\n              var source = arguments[i];\n\n              for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                  target[key] = source[key];\n                }\n              }\n            }\n\n            return target;\n          };\n\n          return _extends.apply(this, arguments);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n        /* global attachEvent */\n\n\n        var XMLHttpRequest = __webpack_require__(\n        /*! xmlhttprequest-ssl */\n        \"./node_modules/engine.io-client/lib/xmlhttprequest.js\");\n\n        var Polling = __webpack_require__(\n        /*! ./polling */\n        \"./node_modules/engine.io-client/lib/transports/polling.js\");\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var _require = __webpack_require__(\n        /*! ../util */\n        \"./node_modules/engine.io-client/lib/util.js\"),\n            pick = _require.pick;\n\n        var globalThis = __webpack_require__(\n        /*! ../globalThis */\n        \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"engine.io-client:polling-xhr\");\n        /**\n         * Empty function\n         */\n\n\n        function empty() {}\n\n        var hasXHR2 = function () {\n          var XMLHttpRequest = __webpack_require__(\n          /*! xmlhttprequest-ssl */\n          \"./node_modules/engine.io-client/lib/xmlhttprequest.js\");\n\n          var xhr = new XMLHttpRequest({\n            xdomain: false\n          });\n          return null != xhr.responseType;\n        }();\n\n        var XHR = /*#__PURE__*/function (_Polling) {\n          _inherits(XHR, _Polling);\n\n          var _super = _createSuper(XHR);\n          /**\n           * XHR Polling constructor.\n           *\n           * @param {Object} opts\n           * @api public\n           */\n\n\n          function XHR(opts) {\n            var _this;\n\n            _classCallCheck(this, XHR);\n\n            _this = _super.call(this, opts);\n\n            if (typeof location !== \"undefined\") {\n              var isSSL = \"https:\" === location.protocol;\n              var port = location.port; // some user agents have empty `location.port`\n\n              if (!port) {\n                port = isSSL ? 443 : 80;\n              }\n\n              _this.xd = typeof location !== \"undefined\" && opts.hostname !== location.hostname || port !== opts.port;\n              _this.xs = opts.secure !== isSSL;\n            }\n            /**\n             * XHR supports binary\n             */\n\n\n            var forceBase64 = opts && opts.forceBase64;\n            _this.supportsBinary = hasXHR2 && !forceBase64;\n            return _this;\n          }\n          /**\n           * Creates a request.\n           *\n           * @param {String} method\n           * @api private\n           */\n\n\n          _createClass(XHR, [{\n            key: \"request\",\n            value: function request() {\n              var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n              _extends(opts, {\n                xd: this.xd,\n                xs: this.xs\n              }, this.opts);\n\n              return new Request(this.uri(), opts);\n            }\n            /**\n             * Sends data.\n             *\n             * @param {String} data to send.\n             * @param {Function} called upon flush.\n             * @api private\n             */\n\n          }, {\n            key: \"doWrite\",\n            value: function doWrite(data, fn) {\n              var req = this.request({\n                method: \"POST\",\n                data: data\n              });\n              var self = this;\n              req.on(\"success\", fn);\n              req.on(\"error\", function (err) {\n                self.onError(\"xhr post error\", err);\n              });\n            }\n            /**\n             * Starts a poll cycle.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"doPoll\",\n            value: function doPoll() {\n              debug(\"xhr poll\");\n              var req = this.request();\n              var self = this;\n              req.on(\"data\", function (data) {\n                self.onData(data);\n              });\n              req.on(\"error\", function (err) {\n                self.onError(\"xhr poll error\", err);\n              });\n              this.pollXhr = req;\n            }\n          }]);\n\n          return XHR;\n        }(Polling);\n\n        var Request = /*#__PURE__*/function (_Emitter) {\n          _inherits(Request, _Emitter);\n\n          var _super2 = _createSuper(Request);\n          /**\n           * Request constructor\n           *\n           * @param {Object} options\n           * @api public\n           */\n\n\n          function Request(uri, opts) {\n            var _this2;\n\n            _classCallCheck(this, Request);\n\n            _this2 = _super2.call(this);\n            _this2.opts = opts;\n            _this2.method = opts.method || \"GET\";\n            _this2.uri = uri;\n            _this2.async = false !== opts.async;\n            _this2.data = undefined !== opts.data ? opts.data : null;\n\n            _this2.create();\n\n            return _this2;\n          }\n          /**\n           * Creates the XHR object and sends the request.\n           *\n           * @api private\n           */\n\n\n          _createClass(Request, [{\n            key: \"create\",\n            value: function create() {\n              var opts = pick(this.opts, \"agent\", \"enablesXDR\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\");\n              opts.xdomain = !!this.opts.xd;\n              opts.xscheme = !!this.opts.xs;\n              var xhr = this.xhr = new XMLHttpRequest(opts);\n              var self = this;\n\n              try {\n                debug(\"xhr open %s: %s\", this.method, this.uri);\n                xhr.open(this.method, this.uri, this.async);\n\n                try {\n                  if (this.opts.extraHeaders) {\n                    xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);\n\n                    for (var i in this.opts.extraHeaders) {\n                      if (this.opts.extraHeaders.hasOwnProperty(i)) {\n                        xhr.setRequestHeader(i, this.opts.extraHeaders[i]);\n                      }\n                    }\n                  }\n                } catch (e) {}\n\n                if (\"POST\" === this.method) {\n                  try {\n                    xhr.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n                  } catch (e) {}\n                }\n\n                try {\n                  xhr.setRequestHeader(\"Accept\", \"*/*\");\n                } catch (e) {} // ie6 check\n\n\n                if (\"withCredentials\" in xhr) {\n                  xhr.withCredentials = this.opts.withCredentials;\n                }\n\n                if (this.opts.requestTimeout) {\n                  xhr.timeout = this.opts.requestTimeout;\n                }\n\n                if (this.hasXDR()) {\n                  xhr.onload = function () {\n                    self.onLoad();\n                  };\n\n                  xhr.onerror = function () {\n                    self.onError(xhr.responseText);\n                  };\n                } else {\n                  xhr.onreadystatechange = function () {\n                    if (4 !== xhr.readyState) return;\n\n                    if (200 === xhr.status || 1223 === xhr.status) {\n                      self.onLoad();\n                    } else {\n                      // make sure the `error` event handler that's user-set\n                      // does not throw in the same tick and gets caught here\n                      setTimeout(function () {\n                        self.onError(typeof xhr.status === \"number\" ? xhr.status : 0);\n                      }, 0);\n                    }\n                  };\n                }\n\n                debug(\"xhr data %s\", this.data);\n                xhr.send(this.data);\n              } catch (e) {\n                // Need to defer since .create() is called directly from the constructor\n                // and thus the 'error' event can only be only bound *after* this exception\n                // occurs.  Therefore, also, we cannot throw here at all.\n                setTimeout(function () {\n                  self.onError(e);\n                }, 0);\n                return;\n              }\n\n              if (typeof document !== \"undefined\") {\n                this.index = Request.requestsCount++;\n                Request.requests[this.index] = this;\n              }\n            }\n            /**\n             * Called upon successful response.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onSuccess\",\n            value: function onSuccess() {\n              this.emit(\"success\");\n              this.cleanup();\n            }\n            /**\n             * Called if we have data.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onData\",\n            value: function onData(data) {\n              this.emit(\"data\", data);\n              this.onSuccess();\n            }\n            /**\n             * Called upon error.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onError\",\n            value: function onError(err) {\n              this.emit(\"error\", err);\n              this.cleanup(true);\n            }\n            /**\n             * Cleans up house.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"cleanup\",\n            value: function cleanup(fromError) {\n              if (\"undefined\" === typeof this.xhr || null === this.xhr) {\n                return;\n              } // xmlhttprequest\n\n\n              if (this.hasXDR()) {\n                this.xhr.onload = this.xhr.onerror = empty;\n              } else {\n                this.xhr.onreadystatechange = empty;\n              }\n\n              if (fromError) {\n                try {\n                  this.xhr.abort();\n                } catch (e) {}\n              }\n\n              if (typeof document !== \"undefined\") {\n                delete Request.requests[this.index];\n              }\n\n              this.xhr = null;\n            }\n            /**\n             * Called upon load.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onLoad\",\n            value: function onLoad() {\n              var data = this.xhr.responseText;\n\n              if (data !== null) {\n                this.onData(data);\n              }\n            }\n            /**\n             * Check if it has XDomainRequest.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"hasXDR\",\n            value: function hasXDR() {\n              return typeof XDomainRequest !== \"undefined\" && !this.xs && this.enablesXDR;\n            }\n            /**\n             * Aborts the request.\n             *\n             * @api public\n             */\n\n          }, {\n            key: \"abort\",\n            value: function abort() {\n              this.cleanup();\n            }\n          }]);\n\n          return Request;\n        }(Emitter);\n        /**\n         * Aborts pending requests when unloading the window. This is needed to prevent\n         * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n         * emitted.\n         */\n\n\n        Request.requestsCount = 0;\n        Request.requests = {};\n\n        if (typeof document !== \"undefined\") {\n          if (typeof attachEvent === \"function\") {\n            attachEvent(\"onunload\", unloadHandler);\n          } else if (typeof addEventListener === \"function\") {\n            var terminationEvent = \"onpagehide\" in globalThis ? \"pagehide\" : \"unload\";\n            addEventListener(terminationEvent, unloadHandler, false);\n          }\n        }\n\n        function unloadHandler() {\n          for (var i in Request.requests) {\n            if (Request.requests.hasOwnProperty(i)) {\n              Request.requests[i].abort();\n            }\n          }\n        }\n\n        module.exports = XHR;\n        module.exports.Request = Request;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/polling.js\":\n      /*!*****************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/polling.js ***!\n        \\*****************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsPollingJs(module, exports, __webpack_require__) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        var Transport = __webpack_require__(\n        /*! ../transport */\n        \"./node_modules/engine.io-client/lib/transport.js\");\n\n        var parseqs = __webpack_require__(\n        /*! parseqs */\n        \"./node_modules/parseqs/index.js\");\n\n        var parser = __webpack_require__(\n        /*! engine.io-parser */\n        \"./node_modules/engine.io-parser/lib/index.js\");\n\n        var yeast = __webpack_require__(\n        /*! yeast */\n        \"./node_modules/yeast/index.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"engine.io-client:polling\");\n\n        var Polling = /*#__PURE__*/function (_Transport) {\n          _inherits(Polling, _Transport);\n\n          var _super = _createSuper(Polling);\n\n          function Polling() {\n            _classCallCheck(this, Polling);\n\n            return _super.apply(this, arguments);\n          }\n\n          _createClass(Polling, [{\n            key: \"doOpen\",\n\n            /**\n             * Opens the socket (triggers polling). We write a PING message to determine\n             * when the transport is open.\n             *\n             * @api private\n             */\n            value: function doOpen() {\n              this.poll();\n            }\n            /**\n             * Pauses polling.\n             *\n             * @param {Function} callback upon buffers are flushed and transport is paused\n             * @api private\n             */\n\n          }, {\n            key: \"pause\",\n            value: function pause(onPause) {\n              var self = this;\n              this.readyState = \"pausing\";\n\n              function pause() {\n                debug(\"paused\");\n                self.readyState = \"paused\";\n                onPause();\n              }\n\n              if (this.polling || !this.writable) {\n                var total = 0;\n\n                if (this.polling) {\n                  debug(\"we are currently polling - waiting to pause\");\n                  total++;\n                  this.once(\"pollComplete\", function () {\n                    debug(\"pre-pause polling complete\");\n                    --total || pause();\n                  });\n                }\n\n                if (!this.writable) {\n                  debug(\"we are currently writing - waiting to pause\");\n                  total++;\n                  this.once(\"drain\", function () {\n                    debug(\"pre-pause writing complete\");\n                    --total || pause();\n                  });\n                }\n              } else {\n                pause();\n              }\n            }\n            /**\n             * Starts polling cycle.\n             *\n             * @api public\n             */\n\n          }, {\n            key: \"poll\",\n            value: function poll() {\n              debug(\"polling\");\n              this.polling = true;\n              this.doPoll();\n              this.emit(\"poll\");\n            }\n            /**\n             * Overloads onData to detect payloads.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onData\",\n            value: function onData(data) {\n              var self = this;\n              debug(\"polling got data %s\", data);\n\n              var callback = function callback(packet, index, total) {\n                // if its the first message we consider the transport open\n                if (\"opening\" === self.readyState && packet.type === \"open\") {\n                  self.onOpen();\n                } // if its a close packet, we close the ongoing requests\n\n\n                if (\"close\" === packet.type) {\n                  self.onClose();\n                  return false;\n                } // otherwise bypass onData and handle the message\n\n\n                self.onPacket(packet);\n              }; // decode payload\n\n\n              parser.decodePayload(data, this.socket.binaryType).forEach(callback); // if an event did not trigger closing\n\n              if (\"closed\" !== this.readyState) {\n                // if we got data we're not polling\n                this.polling = false;\n                this.emit(\"pollComplete\");\n\n                if (\"open\" === this.readyState) {\n                  this.poll();\n                } else {\n                  debug('ignoring poll - transport state \"%s\"', this.readyState);\n                }\n              }\n            }\n            /**\n             * For polling, send a close packet.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"doClose\",\n            value: function doClose() {\n              var self = this;\n\n              function close() {\n                debug(\"writing close packet\");\n                self.write([{\n                  type: \"close\"\n                }]);\n              }\n\n              if (\"open\" === this.readyState) {\n                debug(\"transport open - closing\");\n                close();\n              } else {\n                // in case we're trying to close while\n                // handshaking is in progress (GH-164)\n                debug(\"transport not open - deferring close\");\n                this.once(\"open\", close);\n              }\n            }\n            /**\n             * Writes a packets payload.\n             *\n             * @param {Array} data packets\n             * @param {Function} drain callback\n             * @api private\n             */\n\n          }, {\n            key: \"write\",\n            value: function write(packets) {\n              var _this = this;\n\n              this.writable = false;\n              parser.encodePayload(packets, function (data) {\n                _this.doWrite(data, function () {\n                  _this.writable = true;\n\n                  _this.emit(\"drain\");\n                });\n              });\n            }\n            /**\n             * Generates uri for connection.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"uri\",\n            value: function uri() {\n              var query = this.query || {};\n              var schema = this.opts.secure ? \"https\" : \"http\";\n              var port = \"\"; // cache busting is forced\n\n              if (false !== this.opts.timestampRequests) {\n                query[this.opts.timestampParam] = yeast();\n              }\n\n              if (!this.supportsBinary && !query.sid) {\n                query.b64 = 1;\n              }\n\n              query = parseqs.encode(query); // avoid port if default for schema\n\n              if (this.opts.port && (\"https\" === schema && Number(this.opts.port) !== 443 || \"http\" === schema && Number(this.opts.port) !== 80)) {\n                port = \":\" + this.opts.port;\n              } // prepend ? to query\n\n\n              if (query.length) {\n                query = \"?\" + query;\n              }\n\n              var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n              return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n            }\n          }, {\n            key: \"name\",\n\n            /**\n             * Transport name.\n             */\n            get: function get() {\n              return \"polling\";\n            }\n          }]);\n\n          return Polling;\n        }(Transport);\n\n        module.exports = Polling;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js\":\n      /*!***************************************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js ***!\n        \\***************************************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsWebsocketConstructorBrowserJs(module, exports, __webpack_require__) {\n        var globalThis = __webpack_require__(\n        /*! ../globalThis */\n        \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n        module.exports = {\n          WebSocket: globalThis.WebSocket || globalThis.MozWebSocket,\n          usingBrowserWebSocket: true,\n          defaultBinaryType: \"arraybuffer\"\n        };\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/transports/websocket.js\":\n      /*!*******************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/transports/websocket.js ***!\n        \\*******************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibTransportsWebsocketJs(module, exports, __webpack_require__) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        var Transport = __webpack_require__(\n        /*! ../transport */\n        \"./node_modules/engine.io-client/lib/transport.js\");\n\n        var parser = __webpack_require__(\n        /*! engine.io-parser */\n        \"./node_modules/engine.io-parser/lib/index.js\");\n\n        var parseqs = __webpack_require__(\n        /*! parseqs */\n        \"./node_modules/parseqs/index.js\");\n\n        var yeast = __webpack_require__(\n        /*! yeast */\n        \"./node_modules/yeast/index.js\");\n\n        var _require = __webpack_require__(\n        /*! ../util */\n        \"./node_modules/engine.io-client/lib/util.js\"),\n            pick = _require.pick;\n\n        var _require2 = __webpack_require__(\n        /*! ./websocket-constructor */\n        \"./node_modules/engine.io-client/lib/transports/websocket-constructor.browser.js\"),\n            WebSocket = _require2.WebSocket,\n            usingBrowserWebSocket = _require2.usingBrowserWebSocket,\n            defaultBinaryType = _require2.defaultBinaryType;\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"engine.io-client:websocket\"); // detect ReactNative environment\n\n\n        var isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n\n        var WS = /*#__PURE__*/function (_Transport) {\n          _inherits(WS, _Transport);\n\n          var _super = _createSuper(WS);\n          /**\n           * WebSocket transport constructor.\n           *\n           * @api {Object} connection options\n           * @api public\n           */\n\n\n          function WS(opts) {\n            var _this;\n\n            _classCallCheck(this, WS);\n\n            _this = _super.call(this, opts);\n            _this.supportsBinary = !opts.forceBase64;\n            return _this;\n          }\n          /**\n           * Transport name.\n           *\n           * @api public\n           */\n\n\n          _createClass(WS, [{\n            key: \"doOpen\",\n\n            /**\n             * Opens socket.\n             *\n             * @api private\n             */\n            value: function doOpen() {\n              if (!this.check()) {\n                // let probe timeout\n                return;\n              }\n\n              var uri = this.uri();\n              var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n              var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\");\n\n              if (this.opts.extraHeaders) {\n                opts.headers = this.opts.extraHeaders;\n              }\n\n              try {\n                this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n              } catch (err) {\n                return this.emit(\"error\", err);\n              }\n\n              this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n              this.addEventListeners();\n            }\n            /**\n             * Adds event listeners to the socket\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"addEventListeners\",\n            value: function addEventListeners() {\n              var self = this;\n\n              this.ws.onopen = function () {\n                self.onOpen();\n              };\n\n              this.ws.onclose = function () {\n                self.onClose();\n              };\n\n              this.ws.onmessage = function (ev) {\n                self.onData(ev.data);\n              };\n\n              this.ws.onerror = function (e) {\n                self.onError(\"websocket error\", e);\n              };\n            }\n            /**\n             * Writes data to socket.\n             *\n             * @param {Array} array of packets.\n             * @api private\n             */\n\n          }, {\n            key: \"write\",\n            value: function write(packets) {\n              var self = this;\n              this.writable = false; // encodePacket efficient as it uses WS framing\n              // no need for encodePayload\n\n              var total = packets.length;\n              var i = 0;\n              var l = total;\n\n              for (; i < l; i++) {\n                (function (packet) {\n                  parser.encodePacket(packet, self.supportsBinary, function (data) {\n                    // always create a new object (GH-437)\n                    var opts = {};\n\n                    if (!usingBrowserWebSocket) {\n                      if (packet.options) {\n                        opts.compress = packet.options.compress;\n                      }\n\n                      if (self.opts.perMessageDeflate) {\n                        var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n                        if (len < self.opts.perMessageDeflate.threshold) {\n                          opts.compress = false;\n                        }\n                      }\n                    } // Sometimes the websocket has already been closed but the browser didn't\n                    // have a chance of informing us about it yet, in that case send will\n                    // throw an error\n\n\n                    try {\n                      if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        self.ws.send(data);\n                      } else {\n                        self.ws.send(data, opts);\n                      }\n                    } catch (e) {\n                      debug(\"websocket closed before onclose event\");\n                    }\n\n                    --total || done();\n                  });\n                })(packets[i]);\n              }\n\n              function done() {\n                self.emit(\"flush\"); // fake drain\n                // defer to next tick to allow Socket to clear writeBuffer\n\n                setTimeout(function () {\n                  self.writable = true;\n                  self.emit(\"drain\");\n                }, 0);\n              }\n            }\n            /**\n             * Called upon close\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"onClose\",\n            value: function onClose() {\n              Transport.prototype.onClose.call(this);\n            }\n            /**\n             * Closes socket.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"doClose\",\n            value: function doClose() {\n              if (typeof this.ws !== \"undefined\") {\n                this.ws.close();\n              }\n            }\n            /**\n             * Generates uri for connection.\n             *\n             * @api private\n             */\n\n          }, {\n            key: \"uri\",\n            value: function uri() {\n              var query = this.query || {};\n              var schema = this.opts.secure ? \"wss\" : \"ws\";\n              var port = \"\"; // avoid port if default for schema\n\n              if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n                port = \":\" + this.opts.port;\n              } // append timestamp to URI\n\n\n              if (this.opts.timestampRequests) {\n                query[this.opts.timestampParam] = yeast();\n              } // communicate binary support capabilities\n\n\n              if (!this.supportsBinary) {\n                query.b64 = 1;\n              }\n\n              query = parseqs.encode(query); // prepend ? to query\n\n              if (query.length) {\n                query = \"?\" + query;\n              }\n\n              var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n              return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n            }\n            /**\n             * Feature detection for WebSocket.\n             *\n             * @return {Boolean} whether this transport is available.\n             * @api public\n             */\n\n          }, {\n            key: \"check\",\n            value: function check() {\n              return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n            }\n          }, {\n            key: \"name\",\n            get: function get() {\n              return \"websocket\";\n            }\n          }]);\n\n          return WS;\n        }(Transport);\n\n        module.exports = WS;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/util.js\":\n      /*!***************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/util.js ***!\n        \\***************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibUtilJs(module, exports) {\n        module.exports.pick = function (obj) {\n          for (var _len = arguments.length, attr = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            attr[_key - 1] = arguments[_key];\n          }\n\n          return attr.reduce(function (acc, k) {\n            acc[k] = obj[k];\n            return acc;\n          }, {});\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/engine.io-client/lib/xmlhttprequest.js\":\n      /*!*************************************************************!*\\\n        !*** ./node_modules/engine.io-client/lib/xmlhttprequest.js ***!\n        \\*************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoClientLibXmlhttprequestJs(module, exports, __webpack_require__) {\n        // browser shim for xmlhttprequest module\n        var hasCORS = __webpack_require__(\n        /*! has-cors */\n        \"./node_modules/has-cors/index.js\");\n\n        var globalThis = __webpack_require__(\n        /*! ./globalThis */\n        \"./node_modules/engine.io-client/lib/globalThis.browser.js\");\n\n        module.exports = function (opts) {\n          var xdomain = opts.xdomain; // scheme must be same when usign XDomainRequest\n          // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n\n          var xscheme = opts.xscheme; // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n          // https://github.com/Automattic/engine.io-client/pull/217\n\n          var enablesXDR = opts.enablesXDR; // XMLHttpRequest can be disabled on IE\n\n          try {\n            if (\"undefined\" !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {\n              return new XMLHttpRequest();\n            }\n          } catch (e) {} // Use XDomainRequest for IE8 if enablesXDR is true\n          // because loading bar keeps flashing when using jsonp-polling\n          // https://github.com/yujiosaka/socke.io-ie8-loading-example\n\n\n          try {\n            if (\"undefined\" !== typeof XDomainRequest && !xscheme && enablesXDR) {\n              return new XDomainRequest();\n            }\n          } catch (e) {}\n\n          if (!xdomain) {\n            try {\n              return new globalThis[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n            } catch (e) {}\n          }\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/engine.io-parser/lib/commons.js\":\n      /*!******************************************************!*\\\n        !*** ./node_modules/engine.io-parser/lib/commons.js ***!\n        \\******************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoParserLibCommonsJs(module, exports) {\n        var PACKET_TYPES = Object.create(null); // no Map = no polyfill\n\n        PACKET_TYPES[\"open\"] = \"0\";\n        PACKET_TYPES[\"close\"] = \"1\";\n        PACKET_TYPES[\"ping\"] = \"2\";\n        PACKET_TYPES[\"pong\"] = \"3\";\n        PACKET_TYPES[\"message\"] = \"4\";\n        PACKET_TYPES[\"upgrade\"] = \"5\";\n        PACKET_TYPES[\"noop\"] = \"6\";\n        var PACKET_TYPES_REVERSE = Object.create(null);\n        Object.keys(PACKET_TYPES).forEach(function (key) {\n          PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n        });\n        var ERROR_PACKET = {\n          type: \"error\",\n          data: \"parser error\"\n        };\n        module.exports = {\n          PACKET_TYPES: PACKET_TYPES,\n          PACKET_TYPES_REVERSE: PACKET_TYPES_REVERSE,\n          ERROR_PACKET: ERROR_PACKET\n        };\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-parser/lib/decodePacket.browser.js\":\n      /*!*******************************************************************!*\\\n        !*** ./node_modules/engine.io-parser/lib/decodePacket.browser.js ***!\n        \\*******************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoParserLibDecodePacketBrowserJs(module, exports, __webpack_require__) {\n        var _require = __webpack_require__(\n        /*! ./commons */\n        \"./node_modules/engine.io-parser/lib/commons.js\"),\n            PACKET_TYPES_REVERSE = _require.PACKET_TYPES_REVERSE,\n            ERROR_PACKET = _require.ERROR_PACKET;\n\n        var withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n        var base64decoder;\n\n        if (withNativeArrayBuffer) {\n          base64decoder = __webpack_require__(\n          /*! base64-arraybuffer */\n          \"./node_modules/base64-arraybuffer/lib/base64-arraybuffer.js\");\n        }\n\n        var decodePacket = function decodePacket(encodedPacket, binaryType) {\n          if (typeof encodedPacket !== \"string\") {\n            return {\n              type: \"message\",\n              data: mapBinary(encodedPacket, binaryType)\n            };\n          }\n\n          var type = encodedPacket.charAt(0);\n\n          if (type === \"b\") {\n            return {\n              type: \"message\",\n              data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n            };\n          }\n\n          var packetType = PACKET_TYPES_REVERSE[type];\n\n          if (!packetType) {\n            return ERROR_PACKET;\n          }\n\n          return encodedPacket.length > 1 ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n          } : {\n            type: PACKET_TYPES_REVERSE[type]\n          };\n        };\n\n        var decodeBase64Packet = function decodeBase64Packet(data, binaryType) {\n          if (base64decoder) {\n            var decoded = base64decoder.decode(data);\n            return mapBinary(decoded, binaryType);\n          } else {\n            return {\n              base64: true,\n              data: data\n            }; // fallback for old browsers\n          }\n        };\n\n        var mapBinary = function mapBinary(data, binaryType) {\n          switch (binaryType) {\n            case \"blob\":\n              return data instanceof ArrayBuffer ? new Blob([data]) : data;\n\n            case \"arraybuffer\":\n            default:\n              return data;\n            // assuming the data is already an ArrayBuffer\n          }\n        };\n\n        module.exports = decodePacket;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-parser/lib/encodePacket.browser.js\":\n      /*!*******************************************************************!*\\\n        !*** ./node_modules/engine.io-parser/lib/encodePacket.browser.js ***!\n        \\*******************************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoParserLibEncodePacketBrowserJs(module, exports, __webpack_require__) {\n        var _require = __webpack_require__(\n        /*! ./commons */\n        \"./node_modules/engine.io-parser/lib/commons.js\"),\n            PACKET_TYPES = _require.PACKET_TYPES;\n\n        var withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\";\n        var withNativeArrayBuffer = typeof ArrayBuffer === \"function\"; // ArrayBuffer.isView method is not defined in IE10\n\n        var isView = function isView(obj) {\n          return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;\n        };\n\n        var encodePacket = function encodePacket(_ref, supportsBinary, callback) {\n          var type = _ref.type,\n              data = _ref.data;\n\n          if (withNativeBlob && data instanceof Blob) {\n            if (supportsBinary) {\n              return callback(data);\n            } else {\n              return encodeBlobAsBase64(data, callback);\n            }\n          } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {\n            if (supportsBinary) {\n              return callback(data instanceof ArrayBuffer ? data : data.buffer);\n            } else {\n              return encodeBlobAsBase64(new Blob([data]), callback);\n            }\n          } // plain string\n\n\n          return callback(PACKET_TYPES[type] + (data || \"\"));\n        };\n\n        var encodeBlobAsBase64 = function encodeBlobAsBase64(data, callback) {\n          var fileReader = new FileReader();\n\n          fileReader.onload = function () {\n            var content = fileReader.result.split(\",\")[1];\n            callback(\"b\" + content);\n          };\n\n          return fileReader.readAsDataURL(data);\n        };\n\n        module.exports = encodePacket;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/engine.io-parser/lib/index.js\":\n      /*!****************************************************!*\\\n        !*** ./node_modules/engine.io-parser/lib/index.js ***!\n        \\****************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesEngineIoParserLibIndexJs(module, exports, __webpack_require__) {\n        var encodePacket = __webpack_require__(\n        /*! ./encodePacket */\n        \"./node_modules/engine.io-parser/lib/encodePacket.browser.js\");\n\n        var decodePacket = __webpack_require__(\n        /*! ./decodePacket */\n        \"./node_modules/engine.io-parser/lib/decodePacket.browser.js\");\n\n        var SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\n\n        var encodePayload = function encodePayload(packets, callback) {\n          // some packets may be added to the array while encoding, so the initial length must be saved\n          var length = packets.length;\n          var encodedPackets = new Array(length);\n          var count = 0;\n          packets.forEach(function (packet, i) {\n            // force base64 encoding for binary packets\n            encodePacket(packet, false, function (encodedPacket) {\n              encodedPackets[i] = encodedPacket;\n\n              if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n              }\n            });\n          });\n        };\n\n        var decodePayload = function decodePayload(encodedPayload, binaryType) {\n          var encodedPackets = encodedPayload.split(SEPARATOR);\n          var packets = [];\n\n          for (var i = 0; i < encodedPackets.length; i++) {\n            var decodedPacket = decodePacket(encodedPackets[i], binaryType);\n            packets.push(decodedPacket);\n\n            if (decodedPacket.type === \"error\") {\n              break;\n            }\n          }\n\n          return packets;\n        };\n\n        module.exports = {\n          protocol: 4,\n          encodePacket: encodePacket,\n          encodePayload: encodePayload,\n          decodePacket: decodePacket,\n          decodePayload: decodePayload\n        };\n        /***/\n      },\n\n      /***/\n      \"./node_modules/has-cors/index.js\":\n      /*!****************************************!*\\\n        !*** ./node_modules/has-cors/index.js ***!\n        \\****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesHasCorsIndexJs(module, exports) {\n        /**\n         * Module exports.\n         *\n         * Logic borrowed from Modernizr:\n         *\n         *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n         */\n        try {\n          module.exports = typeof XMLHttpRequest !== 'undefined' && 'withCredentials' in new XMLHttpRequest();\n        } catch (err) {\n          // if XMLHttp support is disabled in IE then it will throw\n          // when trying to create\n          module.exports = false;\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/ms/index.js\":\n      /*!**********************************!*\\\n        !*** ./node_modules/ms/index.js ***!\n        \\**********************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesMsIndexJs(module, exports) {\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n        /**\n         * Helpers.\n         */\n\n\n        var s = 1000;\n        var m = s * 60;\n        var h = m * 60;\n        var d = h * 24;\n        var w = d * 7;\n        var y = d * 365.25;\n        /**\n         * Parse or format the given `val`.\n         *\n         * Options:\n         *\n         *  - `long` verbose formatting [false]\n         *\n         * @param {String|Number} val\n         * @param {Object} [options]\n         * @throws {Error} throw an error if val is not a non-empty string or a number\n         * @return {String|Number}\n         * @api public\n         */\n\n        module.exports = function (val, options) {\n          options = options || {};\n\n          var type = _typeof(val);\n\n          if (type === 'string' && val.length > 0) {\n            return parse(val);\n          } else if (type === 'number' && isFinite(val)) {\n            return options[\"long\"] ? fmtLong(val) : fmtShort(val);\n          }\n\n          throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));\n        };\n        /**\n         * Parse the given `str` and return milliseconds.\n         *\n         * @param {String} str\n         * @return {Number}\n         * @api private\n         */\n\n\n        function parse(str) {\n          str = String(str);\n\n          if (str.length > 100) {\n            return;\n          }\n\n          var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);\n\n          if (!match) {\n            return;\n          }\n\n          var n = parseFloat(match[1]);\n          var type = (match[2] || 'ms').toLowerCase();\n\n          switch (type) {\n            case 'years':\n            case 'year':\n            case 'yrs':\n            case 'yr':\n            case 'y':\n              return n * y;\n\n            case 'weeks':\n            case 'week':\n            case 'w':\n              return n * w;\n\n            case 'days':\n            case 'day':\n            case 'd':\n              return n * d;\n\n            case 'hours':\n            case 'hour':\n            case 'hrs':\n            case 'hr':\n            case 'h':\n              return n * h;\n\n            case 'minutes':\n            case 'minute':\n            case 'mins':\n            case 'min':\n            case 'm':\n              return n * m;\n\n            case 'seconds':\n            case 'second':\n            case 'secs':\n            case 'sec':\n            case 's':\n              return n * s;\n\n            case 'milliseconds':\n            case 'millisecond':\n            case 'msecs':\n            case 'msec':\n            case 'ms':\n              return n;\n\n            default:\n              return undefined;\n          }\n        }\n        /**\n         * Short format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n\n        function fmtShort(ms) {\n          var msAbs = Math.abs(ms);\n\n          if (msAbs >= d) {\n            return Math.round(ms / d) + 'd';\n          }\n\n          if (msAbs >= h) {\n            return Math.round(ms / h) + 'h';\n          }\n\n          if (msAbs >= m) {\n            return Math.round(ms / m) + 'm';\n          }\n\n          if (msAbs >= s) {\n            return Math.round(ms / s) + 's';\n          }\n\n          return ms + 'ms';\n        }\n        /**\n         * Long format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */\n\n\n        function fmtLong(ms) {\n          var msAbs = Math.abs(ms);\n\n          if (msAbs >= d) {\n            return plural(ms, msAbs, d, 'day');\n          }\n\n          if (msAbs >= h) {\n            return plural(ms, msAbs, h, 'hour');\n          }\n\n          if (msAbs >= m) {\n            return plural(ms, msAbs, m, 'minute');\n          }\n\n          if (msAbs >= s) {\n            return plural(ms, msAbs, s, 'second');\n          }\n\n          return ms + ' ms';\n        }\n        /**\n         * Pluralization helper.\n         */\n\n\n        function plural(ms, msAbs, n, name) {\n          var isPlural = msAbs >= n * 1.5;\n          return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/parseqs/index.js\":\n      /*!***************************************!*\\\n        !*** ./node_modules/parseqs/index.js ***!\n        \\***************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesParseqsIndexJs(module, exports) {\n        /**\n         * Compiles a querystring\n         * Returns string representation of the object\n         *\n         * @param {Object}\n         * @api private\n         */\n        exports.encode = function (obj) {\n          var str = '';\n\n          for (var i in obj) {\n            if (obj.hasOwnProperty(i)) {\n              if (str.length) str += '&';\n              str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n            }\n          }\n\n          return str;\n        };\n        /**\n         * Parses a simple querystring into an object\n         *\n         * @param {String} qs\n         * @api private\n         */\n\n\n        exports.decode = function (qs) {\n          var qry = {};\n          var pairs = qs.split('&');\n\n          for (var i = 0, l = pairs.length; i < l; i++) {\n            var pair = pairs[i].split('=');\n            qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n          }\n\n          return qry;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/parseuri/index.js\":\n      /*!****************************************!*\\\n        !*** ./node_modules/parseuri/index.js ***!\n        \\****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesParseuriIndexJs(module, exports) {\n        /**\n         * Parses an URI\n         *\n         * @author Steven Levithan <stevenlevithan.com> (MIT license)\n         * @api private\n         */\n        var re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n        var parts = ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'];\n\n        module.exports = function parseuri(str) {\n          var src = str,\n              b = str.indexOf('['),\n              e = str.indexOf(']');\n\n          if (b != -1 && e != -1) {\n            str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n          }\n\n          var m = re.exec(str || ''),\n              uri = {},\n              i = 14;\n\n          while (i--) {\n            uri[parts[i]] = m[i] || '';\n          }\n\n          if (b != -1 && e != -1) {\n            uri.source = src;\n            uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n            uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n            uri.ipv6uri = true;\n          }\n\n          uri.pathNames = pathNames(uri, uri['path']);\n          uri.queryKey = queryKey(uri, uri['query']);\n          return uri;\n        };\n\n        function pathNames(obj, path) {\n          var regx = /\\/{2,9}/g,\n              names = path.replace(regx, \"/\").split(\"/\");\n\n          if (path.substr(0, 1) == '/' || path.length === 0) {\n            names.splice(0, 1);\n          }\n\n          if (path.substr(path.length - 1, 1) == '/') {\n            names.splice(names.length - 1, 1);\n          }\n\n          return names;\n        }\n\n        function queryKey(uri, query) {\n          var data = {};\n          query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n            if ($1) {\n              data[$1] = $2;\n            }\n          });\n          return data;\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/process/browser.js\":\n      /*!*****************************************!*\\\n        !*** ./node_modules/process/browser.js ***!\n        \\*****************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesProcessBrowserJs(module, exports) {\n        // shim for using process in browser\n        var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n        // don't break things.  But we need to wrap it in a try catch in case it is\n        // wrapped in strict mode code which doesn't define any globals.  It's inside a\n        // function because try/catches deoptimize in certain engines.\n\n        var cachedSetTimeout;\n        var cachedClearTimeout;\n\n        function defaultSetTimout() {\n          throw new Error('setTimeout has not been defined');\n        }\n\n        function defaultClearTimeout() {\n          throw new Error('clearTimeout has not been defined');\n        }\n\n        (function () {\n          try {\n            if (typeof setTimeout === 'function') {\n              cachedSetTimeout = setTimeout;\n            } else {\n              cachedSetTimeout = defaultSetTimout;\n            }\n          } catch (e) {\n            cachedSetTimeout = defaultSetTimout;\n          }\n\n          try {\n            if (typeof clearTimeout === 'function') {\n              cachedClearTimeout = clearTimeout;\n            } else {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          } catch (e) {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        })();\n\n        function runTimeout(fun) {\n          if (cachedSetTimeout === setTimeout) {\n            //normal enviroments in sane situations\n            return setTimeout(fun, 0);\n          } // if setTimeout wasn't available but was latter defined\n\n\n          if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n            cachedSetTimeout = setTimeout;\n            return setTimeout(fun, 0);\n          }\n\n          try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedSetTimeout(fun, 0);\n          } catch (e) {\n            try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n              return cachedSetTimeout.call(null, fun, 0);\n            } catch (e) {\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n              return cachedSetTimeout.call(this, fun, 0);\n            }\n          }\n        }\n\n        function runClearTimeout(marker) {\n          if (cachedClearTimeout === clearTimeout) {\n            //normal enviroments in sane situations\n            return clearTimeout(marker);\n          } // if clearTimeout wasn't available but was latter defined\n\n\n          if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n            cachedClearTimeout = clearTimeout;\n            return clearTimeout(marker);\n          }\n\n          try {\n            // when when somebody has screwed with setTimeout but no I.E. maddness\n            return cachedClearTimeout(marker);\n          } catch (e) {\n            try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n              return cachedClearTimeout.call(null, marker);\n            } catch (e) {\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n              // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n              return cachedClearTimeout.call(this, marker);\n            }\n          }\n        }\n\n        var queue = [];\n        var draining = false;\n        var currentQueue;\n        var queueIndex = -1;\n\n        function cleanUpNextTick() {\n          if (!draining || !currentQueue) {\n            return;\n          }\n\n          draining = false;\n\n          if (currentQueue.length) {\n            queue = currentQueue.concat(queue);\n          } else {\n            queueIndex = -1;\n          }\n\n          if (queue.length) {\n            drainQueue();\n          }\n        }\n\n        function drainQueue() {\n          if (draining) {\n            return;\n          }\n\n          var timeout = runTimeout(cleanUpNextTick);\n          draining = true;\n          var len = queue.length;\n\n          while (len) {\n            currentQueue = queue;\n            queue = [];\n\n            while (++queueIndex < len) {\n              if (currentQueue) {\n                currentQueue[queueIndex].run();\n              }\n            }\n\n            queueIndex = -1;\n            len = queue.length;\n          }\n\n          currentQueue = null;\n          draining = false;\n          runClearTimeout(timeout);\n        }\n\n        process.nextTick = function (fun) {\n          var args = new Array(arguments.length - 1);\n\n          if (arguments.length > 1) {\n            for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n            }\n          }\n\n          queue.push(new Item(fun, args));\n\n          if (queue.length === 1 && !draining) {\n            runTimeout(drainQueue);\n          }\n        }; // v8 likes predictible objects\n\n\n        function Item(fun, array) {\n          this.fun = fun;\n          this.array = array;\n        }\n\n        Item.prototype.run = function () {\n          this.fun.apply(null, this.array);\n        };\n\n        process.title = 'browser';\n        process.browser = true;\n        process.env = {};\n        process.argv = [];\n        process.version = ''; // empty string to avoid regexp issues\n\n        process.versions = {};\n\n        function noop() {}\n\n        process.on = noop;\n        process.addListener = noop;\n        process.once = noop;\n        process.off = noop;\n        process.removeListener = noop;\n        process.removeAllListeners = noop;\n        process.emit = noop;\n        process.prependListener = noop;\n        process.prependOnceListener = noop;\n\n        process.listeners = function (name) {\n          return [];\n        };\n\n        process.binding = function (name) {\n          throw new Error('process.binding is not supported');\n        };\n\n        process.cwd = function () {\n          return '/';\n        };\n\n        process.chdir = function (dir) {\n          throw new Error('process.chdir is not supported');\n        };\n\n        process.umask = function () {\n          return 0;\n        };\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/socket.io-parser/dist/binary.js\":\n      /*!******************************************************!*\\\n        !*** ./node_modules/socket.io-parser/dist/binary.js ***!\n        \\******************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesSocketIoParserDistBinaryJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.reconstructPacket = exports.deconstructPacket = void 0;\n\n        var is_binary_1 = __webpack_require__(\n        /*! ./is-binary */\n        \"./node_modules/socket.io-parser/dist/is-binary.js\");\n        /**\n         * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n         *\n         * @param {Object} packet - socket.io event packet\n         * @return {Object} with deconstructed packet and list of buffers\n         * @public\n         */\n\n\n        function deconstructPacket(packet) {\n          var buffers = [];\n          var packetData = packet.data;\n          var pack = packet;\n          pack.data = _deconstructPacket(packetData, buffers);\n          pack.attachments = buffers.length; // number of binary 'attachments'\n\n          return {\n            packet: pack,\n            buffers: buffers\n          };\n        }\n\n        exports.deconstructPacket = deconstructPacket;\n\n        function _deconstructPacket(data, buffers) {\n          if (!data) return data;\n\n          if (is_binary_1.isBinary(data)) {\n            var placeholder = {\n              _placeholder: true,\n              num: buffers.length\n            };\n            buffers.push(data);\n            return placeholder;\n          } else if (Array.isArray(data)) {\n            var newData = new Array(data.length);\n\n            for (var i = 0; i < data.length; i++) {\n              newData[i] = _deconstructPacket(data[i], buffers);\n            }\n\n            return newData;\n          } else if (_typeof(data) === \"object\" && !(data instanceof Date)) {\n            var _newData = {};\n\n            for (var key in data) {\n              if (data.hasOwnProperty(key)) {\n                _newData[key] = _deconstructPacket(data[key], buffers);\n              }\n            }\n\n            return _newData;\n          }\n\n          return data;\n        }\n        /**\n         * Reconstructs a binary packet from its placeholder packet and buffers\n         *\n         * @param {Object} packet - event packet with placeholders\n         * @param {Array} buffers - binary buffers to put in placeholder positions\n         * @return {Object} reconstructed packet\n         * @public\n         */\n\n\n        function reconstructPacket(packet, buffers) {\n          packet.data = _reconstructPacket(packet.data, buffers);\n          packet.attachments = undefined; // no longer useful\n\n          return packet;\n        }\n\n        exports.reconstructPacket = reconstructPacket;\n\n        function _reconstructPacket(data, buffers) {\n          if (!data) return data;\n\n          if (data && data._placeholder) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n          } else if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n              data[i] = _reconstructPacket(data[i], buffers);\n            }\n          } else if (_typeof(data) === \"object\") {\n            for (var key in data) {\n              if (data.hasOwnProperty(key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n              }\n            }\n          }\n\n          return data;\n        }\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/socket.io-parser/dist/index.js\":\n      /*!*****************************************************!*\\\n        !*** ./node_modules/socket.io-parser/dist/index.js ***!\n        \\*****************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesSocketIoParserDistIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _get(target, property, receiver) {\n          if (typeof Reflect !== \"undefined\" && Reflect.get) {\n            _get = Reflect.get;\n          } else {\n            _get = function _get(target, property, receiver) {\n              var base = _superPropBase(target, property);\n\n              if (!base) return;\n              var desc = Object.getOwnPropertyDescriptor(base, property);\n\n              if (desc.get) {\n                return desc.get.call(receiver);\n              }\n\n              return desc.value;\n            };\n          }\n\n          return _get(target, property, receiver || target);\n        }\n\n        function _superPropBase(object, property) {\n          while (!Object.prototype.hasOwnProperty.call(object, property)) {\n            object = _getPrototypeOf(object);\n            if (object === null) break;\n          }\n\n          return object;\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== \"function\" && superClass !== null) {\n            throw new TypeError(\"Super expression must either be null or a function\");\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) _setPrototypeOf(subClass, superClass);\n        }\n\n        function _setPrototypeOf(o, p) {\n          _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n            o.__proto__ = p;\n            return o;\n          };\n\n          return _setPrototypeOf(o, p);\n        }\n\n        function _createSuper(Derived) {\n          var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n          return function _createSuperInternal() {\n            var Super = _getPrototypeOf(Derived),\n                result;\n\n            if (hasNativeReflectConstruct) {\n              var NewTarget = _getPrototypeOf(this).constructor;\n\n              result = Reflect.construct(Super, arguments, NewTarget);\n            } else {\n              result = Super.apply(this, arguments);\n            }\n\n            return _possibleConstructorReturn(this, result);\n          };\n        }\n\n        function _possibleConstructorReturn(self, call) {\n          if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n            return call;\n          }\n\n          return _assertThisInitialized(self);\n        }\n\n        function _assertThisInitialized(self) {\n          if (self === void 0) {\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n\n          return self;\n        }\n\n        function _isNativeReflectConstruct() {\n          if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n          if (Reflect.construct.sham) return false;\n          if (typeof Proxy === \"function\") return true;\n\n          try {\n            Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n            return true;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function _getPrototypeOf(o) {\n          _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n            return o.__proto__ || Object.getPrototypeOf(o);\n          };\n          return _getPrototypeOf(o);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;\n\n        var Emitter = __webpack_require__(\n        /*! component-emitter */\n        \"./node_modules/component-emitter/index.js\");\n\n        var binary_1 = __webpack_require__(\n        /*! ./binary */\n        \"./node_modules/socket.io-parser/dist/binary.js\");\n\n        var is_binary_1 = __webpack_require__(\n        /*! ./is-binary */\n        \"./node_modules/socket.io-parser/dist/is-binary.js\");\n\n        var debug = __webpack_require__(\n        /*! debug */\n        \"./node_modules/debug/src/browser.js\")(\"socket.io-parser\");\n        /**\n         * Protocol version.\n         *\n         * @public\n         */\n\n\n        exports.protocol = 5;\n        var PacketType;\n\n        (function (PacketType) {\n          PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n          PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n          PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n          PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n          PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n          PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n          PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n        })(PacketType = exports.PacketType || (exports.PacketType = {}));\n        /**\n         * A socket.io Encoder instance\n         */\n\n\n        var Encoder = /*#__PURE__*/function () {\n          function Encoder() {\n            _classCallCheck(this, Encoder);\n          }\n\n          _createClass(Encoder, [{\n            key: \"encode\",\n\n            /**\n             * Encode a packet as a single string if non-binary, or as a\n             * buffer sequence, depending on packet type.\n             *\n             * @param {Object} obj - packet object\n             */\n            value: function encode(obj) {\n              debug(\"encoding packet %j\", obj);\n\n              if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n                if (is_binary_1.hasBinary(obj)) {\n                  obj.type = obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK;\n                  return this.encodeAsBinary(obj);\n                }\n              }\n\n              return [this.encodeAsString(obj)];\n            }\n            /**\n             * Encode packet as string.\n             */\n\n          }, {\n            key: \"encodeAsString\",\n            value: function encodeAsString(obj) {\n              // first is type\n              var str = \"\" + obj.type; // attachments if we have them\n\n              if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {\n                str += obj.attachments + \"-\";\n              } // if we have a namespace other than `/`\n              // we append it followed by a comma `,`\n\n\n              if (obj.nsp && \"/\" !== obj.nsp) {\n                str += obj.nsp + \",\";\n              } // immediately followed by the id\n\n\n              if (null != obj.id) {\n                str += obj.id;\n              } // json data\n\n\n              if (null != obj.data) {\n                str += JSON.stringify(obj.data);\n              }\n\n              debug(\"encoded %j as %s\", obj, str);\n              return str;\n            }\n            /**\n             * Encode packet as 'buffer sequence' by removing blobs, and\n             * deconstructing packet into object with placeholders and\n             * a list of buffers.\n             */\n\n          }, {\n            key: \"encodeAsBinary\",\n            value: function encodeAsBinary(obj) {\n              var deconstruction = binary_1.deconstructPacket(obj);\n              var pack = this.encodeAsString(deconstruction.packet);\n              var buffers = deconstruction.buffers;\n              buffers.unshift(pack); // add packet info to beginning of data list\n\n              return buffers; // write all the buffers\n            }\n          }]);\n\n          return Encoder;\n        }();\n\n        exports.Encoder = Encoder;\n        /**\n         * A socket.io Decoder instance\n         *\n         * @return {Object} decoder\n         */\n\n        var Decoder = /*#__PURE__*/function (_Emitter) {\n          _inherits(Decoder, _Emitter);\n\n          var _super = _createSuper(Decoder);\n\n          function Decoder() {\n            _classCallCheck(this, Decoder);\n\n            return _super.call(this);\n          }\n          /**\n           * Decodes an encoded packet string into packet JSON.\n           *\n           * @param {String} obj - encoded packet\n           */\n\n\n          _createClass(Decoder, [{\n            key: \"add\",\n            value: function add(obj) {\n              var packet;\n\n              if (typeof obj === \"string\") {\n                packet = this.decodeString(obj);\n\n                if (packet.type === PacketType.BINARY_EVENT || packet.type === PacketType.BINARY_ACK) {\n                  // binary packet's json\n                  this.reconstructor = new BinaryReconstructor(packet); // no attachments, labeled binary but no binary data to follow\n\n                  if (packet.attachments === 0) {\n                    _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n                  }\n                } else {\n                  // non-binary full packet\n                  _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n                }\n              } else if (is_binary_1.isBinary(obj) || obj.base64) {\n                // raw binary data\n                if (!this.reconstructor) {\n                  throw new Error(\"got binary data when not reconstructing a packet\");\n                } else {\n                  packet = this.reconstructor.takeBinaryData(obj);\n\n                  if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n\n                    _get(_getPrototypeOf(Decoder.prototype), \"emit\", this).call(this, \"decoded\", packet);\n                  }\n                }\n              } else {\n                throw new Error(\"Unknown type: \" + obj);\n              }\n            }\n            /**\n             * Decode a packet String (JSON data)\n             *\n             * @param {String} str\n             * @return {Object} packet\n             */\n\n          }, {\n            key: \"decodeString\",\n            value: function decodeString(str) {\n              var i = 0; // look up type\n\n              var p = {\n                type: Number(str.charAt(0))\n              };\n\n              if (PacketType[p.type] === undefined) {\n                throw new Error(\"unknown packet type \" + p.type);\n              } // look up attachments if type binary\n\n\n              if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {\n                var start = i + 1;\n\n                while (str.charAt(++i) !== \"-\" && i != str.length) {}\n\n                var buf = str.substring(start, i);\n\n                if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                  throw new Error(\"Illegal attachments\");\n                }\n\n                p.attachments = Number(buf);\n              } // look up namespace (if any)\n\n\n              if (\"/\" === str.charAt(i + 1)) {\n                var _start = i + 1;\n\n                while (++i) {\n                  var c = str.charAt(i);\n                  if (\",\" === c) break;\n                  if (i === str.length) break;\n                }\n\n                p.nsp = str.substring(_start, i);\n              } else {\n                p.nsp = \"/\";\n              } // look up id\n\n\n              var next = str.charAt(i + 1);\n\n              if (\"\" !== next && Number(next) == next) {\n                var _start2 = i + 1;\n\n                while (++i) {\n                  var _c = str.charAt(i);\n\n                  if (null == _c || Number(_c) != _c) {\n                    --i;\n                    break;\n                  }\n\n                  if (i === str.length) break;\n                }\n\n                p.id = Number(str.substring(_start2, i + 1));\n              } // look up json data\n\n\n              if (str.charAt(++i)) {\n                var payload = tryParse(str.substr(i));\n\n                if (Decoder.isPayloadValid(p.type, payload)) {\n                  p.data = payload;\n                } else {\n                  throw new Error(\"invalid payload\");\n                }\n              }\n\n              debug(\"decoded %s as %j\", str, p);\n              return p;\n            }\n          }, {\n            key: \"destroy\",\n\n            /**\n             * Deallocates a parser's resources\n             */\n            value: function destroy() {\n              if (this.reconstructor) {\n                this.reconstructor.finishedReconstruction();\n              }\n            }\n          }], [{\n            key: \"isPayloadValid\",\n            value: function isPayloadValid(type, payload) {\n              switch (type) {\n                case PacketType.CONNECT:\n                  return _typeof(payload) === \"object\";\n\n                case PacketType.DISCONNECT:\n                  return payload === undefined;\n\n                case PacketType.CONNECT_ERROR:\n                  return typeof payload === \"string\" || _typeof(payload) === \"object\";\n\n                case PacketType.EVENT:\n                case PacketType.BINARY_EVENT:\n                  return Array.isArray(payload) && typeof payload[0] === \"string\";\n\n                case PacketType.ACK:\n                case PacketType.BINARY_ACK:\n                  return Array.isArray(payload);\n              }\n            }\n          }]);\n\n          return Decoder;\n        }(Emitter);\n\n        exports.Decoder = Decoder;\n\n        function tryParse(str) {\n          try {\n            return JSON.parse(str);\n          } catch (e) {\n            return false;\n          }\n        }\n        /**\n         * A manager of a binary event's 'buffer sequence'. Should\n         * be constructed whenever a packet of type BINARY_EVENT is\n         * decoded.\n         *\n         * @param {Object} packet\n         * @return {BinaryReconstructor} initialized reconstructor\n         */\n\n\n        var BinaryReconstructor = /*#__PURE__*/function () {\n          function BinaryReconstructor(packet) {\n            _classCallCheck(this, BinaryReconstructor);\n\n            this.packet = packet;\n            this.buffers = [];\n            this.reconPack = packet;\n          }\n          /**\n           * Method to be called when binary data received from connection\n           * after a BINARY_EVENT packet.\n           *\n           * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n           * @return {null | Object} returns null if more binary data is expected or\n           *   a reconstructed packet object if all buffers have been received.\n           */\n\n\n          _createClass(BinaryReconstructor, [{\n            key: \"takeBinaryData\",\n            value: function takeBinaryData(binData) {\n              this.buffers.push(binData);\n\n              if (this.buffers.length === this.reconPack.attachments) {\n                // done with buffer list\n                var packet = binary_1.reconstructPacket(this.reconPack, this.buffers);\n                this.finishedReconstruction();\n                return packet;\n              }\n\n              return null;\n            }\n            /**\n             * Cleans up binary packet reconstruction variables.\n             */\n\n          }, {\n            key: \"finishedReconstruction\",\n            value: function finishedReconstruction() {\n              this.reconPack = null;\n              this.buffers = [];\n            }\n          }]);\n\n          return BinaryReconstructor;\n        }();\n        /***/\n\n      },\n\n      /***/\n      \"./node_modules/socket.io-parser/dist/is-binary.js\":\n      /*!*********************************************************!*\\\n        !*** ./node_modules/socket.io-parser/dist/is-binary.js ***!\n        \\*********************************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesSocketIoParserDistIsBinaryJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports.hasBinary = exports.isBinary = void 0;\n        var withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n\n        var isView = function isView(obj) {\n          return typeof ArrayBuffer.isView === \"function\" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;\n        };\n\n        var toString = Object.prototype.toString;\n        var withNativeBlob = typeof Blob === \"function\" || typeof Blob !== \"undefined\" && toString.call(Blob) === \"[object BlobConstructor]\";\n        var withNativeFile = typeof File === \"function\" || typeof File !== \"undefined\" && toString.call(File) === \"[object FileConstructor]\";\n        /**\n         * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n         *\n         * @private\n         */\n\n        function isBinary(obj) {\n          return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;\n        }\n\n        exports.isBinary = isBinary;\n\n        function hasBinary(obj, toJSON) {\n          if (!obj || _typeof(obj) !== \"object\") {\n            return false;\n          }\n\n          if (Array.isArray(obj)) {\n            for (var i = 0, l = obj.length; i < l; i++) {\n              if (hasBinary(obj[i])) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n          if (isBinary(obj)) {\n            return true;\n          }\n\n          if (obj.toJSON && typeof obj.toJSON === \"function\" && arguments.length === 1) {\n            return hasBinary(obj.toJSON(), true);\n          }\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        exports.hasBinary = hasBinary;\n        /***/\n      },\n\n      /***/\n      \"./node_modules/yeast/index.js\":\n      /*!*************************************!*\\\n        !*** ./node_modules/yeast/index.js ***!\n        \\*************************************/\n\n      /*! no static exports found */\n\n      /***/\n      function node_modulesYeastIndexJs(module, exports, __webpack_require__) {\n        \"use strict\";\n\n        var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''),\n            length = 64,\n            map = {},\n            seed = 0,\n            i = 0,\n            prev;\n        /**\n         * Return a string representing the specified number.\n         *\n         * @param {Number} num The number to convert.\n         * @returns {String} The string representation of the number.\n         * @api public\n         */\n\n        function encode(num) {\n          var encoded = '';\n\n          do {\n            encoded = alphabet[num % length] + encoded;\n            num = Math.floor(num / length);\n          } while (num > 0);\n\n          return encoded;\n        }\n        /**\n         * Return the integer value specified by the given string.\n         *\n         * @param {String} str The string to convert.\n         * @returns {Number} The integer value represented by the string.\n         * @api public\n         */\n\n\n        function decode(str) {\n          var decoded = 0;\n\n          for (i = 0; i < str.length; i++) {\n            decoded = decoded * length + map[str.charAt(i)];\n          }\n\n          return decoded;\n        }\n        /**\n         * Yeast: A tiny growing id generator.\n         *\n         * @returns {String} A unique id.\n         * @api public\n         */\n\n\n        function yeast() {\n          var now = encode(+new Date());\n          if (now !== prev) return seed = 0, prev = now;\n          return now + '.' + encode(seed++);\n        } //\n        // Map each character to its index.\n        //\n\n\n        for (; i < length; i++) {\n          map[alphabet[i]] = i;\n        } //\n        // Expose the `yeast`, `encode` and `decode` functions.\n        //\n\n\n        yeast.encode = encode;\n        yeast.decode = decode;\n        module.exports = yeast;\n        /***/\n      }\n      /******/\n\n    })\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/socket.io-client.js\n");

/***/ }),

/***/ 3:
/*!************************************************!*\
  !*** multi ./resources/js/socket.io-client.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /opt/lampp/htdocs/LantuuWeb/resources/js/socket.io-client.js */"./resources/js/socket.io-client.js");


/***/ })

/******/ });