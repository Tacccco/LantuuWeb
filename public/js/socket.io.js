/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzPzFmYjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtDQUFrQyxTQUFTO0FBQzNDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQ0FBMEMsVUFBVTtBQUNwRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/base64-js/index.js\n");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar isArray = __webpack_require__(/*! isarray */ \"./node_modules/isarray/index.js\")\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/buffer/index.js\n");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcz85MTUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsV0FBVzs7QUFFbkI7QUFDQTtBQUNBO0FBQ0EsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxXQUFXOztBQUVuQjtBQUNBO0FBQ0EsUUFBUSxVQUFVOztBQUVsQjtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/ieee754/index.js\n");

/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcz9lM2RiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/isarray/index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/global.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2NlZDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ }),

/***/ "./resources/js/socket.io.js":
/*!***********************************!*\
  !*** ./resources/js/socket.io.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(Buffer, module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * Socket.IO v2.3.0\n * (c) 2014-2019 Guillermo Rauch\n * Released under the MIT License.\n */\n!function (t, e) {\n  \"object\" == ( false ? undefined : _typeof(exports)) && \"object\" == ( false ? undefined : _typeof(module)) ? module.exports = e() :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (e),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;\n}(this, function () {\n  return function (t) {\n    function e(r) {\n      if (n[r]) return n[r].exports;\n      var o = n[r] = {\n        exports: {},\n        id: r,\n        loaded: !1\n      };\n      return t[r].call(o.exports, o, o.exports, e), o.loaded = !0, o.exports;\n    }\n\n    var n = {};\n    return e.m = t, e.c = n, e.p = \"\", e(0);\n  }([function (t, e, n) {\n    function r(t, e) {\n      \"object\" == _typeof(t) && (e = t, t = void 0), e = e || {};\n      var n,\n          r = o(t),\n          i = r.source,\n          u = r.id,\n          p = r.path,\n          h = c[u] && p in c[u].nsps,\n          f = e.forceNew || e[\"force new connection\"] || !1 === e.multiplex || h;\n      return f ? (a(\"ignoring socket cache for %s\", i), n = s(i, e)) : (c[u] || (a(\"new io instance for %s\", i), c[u] = s(i, e)), n = c[u]), r.query && !e.query && (e.query = r.query), n.socket(r.path, e);\n    }\n\n    var o = n(1),\n        i = n(7),\n        s = n(15),\n        a = n(3)(\"socket.io-client\");\n    t.exports = e = r;\n    var c = e.managers = {};\n    e.protocol = i.protocol, e.connect = r, e.Manager = n(15), e.Socket = n(39);\n  }, function (t, e, n) {\n    function r(t, e) {\n      var n = t;\n      e = e || \"undefined\" != typeof location && location, null == t && (t = e.protocol + \"//\" + e.host), \"string\" == typeof t && (\"/\" === t.charAt(0) && (t = \"/\" === t.charAt(1) ? e.protocol + t : e.host + t), /^(https?|wss?):\\/\\//.test(t) || (i(\"protocol-less url %s\", t), t = \"undefined\" != typeof e ? e.protocol + \"//\" + t : \"https://\" + t), i(\"parse %s\", t), n = o(t)), n.port || (/^(http|ws)$/.test(n.protocol) ? n.port = \"80\" : /^(http|ws)s$/.test(n.protocol) && (n.port = \"443\")), n.path = n.path || \"/\";\n      var r = n.host.indexOf(\":\") !== -1,\n          s = r ? \"[\" + n.host + \"]\" : n.host;\n      return n.id = n.protocol + \"://\" + s + \":\" + n.port, n.href = n.protocol + \"://\" + s + (e && e.port === n.port ? \"\" : \":\" + n.port), n;\n    }\n\n    var o = n(2),\n        i = n(3)(\"socket.io-client:url\");\n    t.exports = r;\n  }, function (t, e) {\n    var n = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/,\n        r = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\", \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\n\n    t.exports = function (t) {\n      var e = t,\n          o = t.indexOf(\"[\"),\n          i = t.indexOf(\"]\");\n      o != -1 && i != -1 && (t = t.substring(0, o) + t.substring(o, i).replace(/:/g, \";\") + t.substring(i, t.length));\n\n      for (var s = n.exec(t || \"\"), a = {}, c = 14; c--;) {\n        a[r[c]] = s[c] || \"\";\n      }\n\n      return o != -1 && i != -1 && (a.source = e, a.host = a.host.substring(1, a.host.length - 1).replace(/;/g, \":\"), a.authority = a.authority.replace(\"[\", \"\").replace(\"]\", \"\").replace(/;/g, \":\"), a.ipv6uri = !0), a;\n    };\n  }, function (t, e, n) {\n    (function (r) {\n      \"use strict\";\n\n      function o() {\n        return !(\"undefined\" == typeof window || !window.process || \"renderer\" !== window.process.type && !window.process.__nwjs) || (\"undefined\" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) && (\"undefined\" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || \"undefined\" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || \"undefined\" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || \"undefined\" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n      }\n\n      function i(e) {\n        if (e[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + e[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + t.exports.humanize(this.diff), this.useColors) {\n          var n = \"color: \" + this.color;\n          e.splice(1, 0, n, \"color: inherit\");\n          var r = 0,\n              o = 0;\n          e[0].replace(/%[a-zA-Z%]/g, function (t) {\n            \"%%\" !== t && (r++, \"%c\" === t && (o = r));\n          }), e.splice(o, 0, n);\n        }\n      }\n\n      function s() {\n        var t;\n        return \"object\" === (\"undefined\" == typeof console ? \"undefined\" : p(console)) && console.log && (t = console).log.apply(t, arguments);\n      }\n\n      function a(t) {\n        try {\n          t ? e.storage.setItem(\"debug\", t) : e.storage.removeItem(\"debug\");\n        } catch (n) {}\n      }\n\n      function c() {\n        var t = void 0;\n\n        try {\n          t = e.storage.getItem(\"debug\");\n        } catch (n) {}\n\n        return !t && \"undefined\" != typeof r && \"env\" in r && (t = r.env.DEBUG), t;\n      }\n\n      function u() {\n        try {\n          return localStorage;\n        } catch (t) {}\n      }\n\n      var p = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      };\n      e.log = s, e.formatArgs = i, e.save = a, e.load = c, e.useColors = o, e.storage = u(), e.colors = [\"#0000CC\", \"#0000FF\", \"#0033CC\", \"#0033FF\", \"#0066CC\", \"#0066FF\", \"#0099CC\", \"#0099FF\", \"#00CC00\", \"#00CC33\", \"#00CC66\", \"#00CC99\", \"#00CCCC\", \"#00CCFF\", \"#3300CC\", \"#3300FF\", \"#3333CC\", \"#3333FF\", \"#3366CC\", \"#3366FF\", \"#3399CC\", \"#3399FF\", \"#33CC00\", \"#33CC33\", \"#33CC66\", \"#33CC99\", \"#33CCCC\", \"#33CCFF\", \"#6600CC\", \"#6600FF\", \"#6633CC\", \"#6633FF\", \"#66CC00\", \"#66CC33\", \"#9900CC\", \"#9900FF\", \"#9933CC\", \"#9933FF\", \"#99CC00\", \"#99CC33\", \"#CC0000\", \"#CC0033\", \"#CC0066\", \"#CC0099\", \"#CC00CC\", \"#CC00FF\", \"#CC3300\", \"#CC3333\", \"#CC3366\", \"#CC3399\", \"#CC33CC\", \"#CC33FF\", \"#CC6600\", \"#CC6633\", \"#CC9900\", \"#CC9933\", \"#CCCC00\", \"#CCCC33\", \"#FF0000\", \"#FF0033\", \"#FF0066\", \"#FF0099\", \"#FF00CC\", \"#FF00FF\", \"#FF3300\", \"#FF3333\", \"#FF3366\", \"#FF3399\", \"#FF33CC\", \"#FF33FF\", \"#FF6600\", \"#FF6633\", \"#FF9900\", \"#FF9933\", \"#FFCC00\", \"#FFCC33\"], t.exports = n(5)(e);\n      var h = t.exports.formatters;\n\n      h.j = function (t) {\n        try {\n          return JSON.stringify(t);\n        } catch (e) {\n          return \"[UnexpectedJSONParseError]: \" + e.message;\n        }\n      };\n    }).call(e, n(4));\n  }, function (t, e) {\n    function n() {\n      throw new Error(\"setTimeout has not been defined\");\n    }\n\n    function r() {\n      throw new Error(\"clearTimeout has not been defined\");\n    }\n\n    function o(t) {\n      if (p === setTimeout) return setTimeout(t, 0);\n      if ((p === n || !p) && setTimeout) return p = setTimeout, setTimeout(t, 0);\n\n      try {\n        return p(t, 0);\n      } catch (e) {\n        try {\n          return p.call(null, t, 0);\n        } catch (e) {\n          return p.call(this, t, 0);\n        }\n      }\n    }\n\n    function i(t) {\n      if (h === clearTimeout) return clearTimeout(t);\n      if ((h === r || !h) && clearTimeout) return h = clearTimeout, clearTimeout(t);\n\n      try {\n        return h(t);\n      } catch (e) {\n        try {\n          return h.call(null, t);\n        } catch (e) {\n          return h.call(this, t);\n        }\n      }\n    }\n\n    function s() {\n      y && l && (y = !1, l.length ? d = l.concat(d) : m = -1, d.length && a());\n    }\n\n    function a() {\n      if (!y) {\n        var t = o(s);\n        y = !0;\n\n        for (var e = d.length; e;) {\n          for (l = d, d = []; ++m < e;) {\n            l && l[m].run();\n          }\n\n          m = -1, e = d.length;\n        }\n\n        l = null, y = !1, i(t);\n      }\n    }\n\n    function c(t, e) {\n      this.fun = t, this.array = e;\n    }\n\n    function u() {}\n\n    var p,\n        h,\n        f = t.exports = {};\n    !function () {\n      try {\n        p = \"function\" == typeof setTimeout ? setTimeout : n;\n      } catch (t) {\n        p = n;\n      }\n\n      try {\n        h = \"function\" == typeof clearTimeout ? clearTimeout : r;\n      } catch (t) {\n        h = r;\n      }\n    }();\n    var l,\n        d = [],\n        y = !1,\n        m = -1;\n    f.nextTick = function (t) {\n      var e = new Array(arguments.length - 1);\n      if (arguments.length > 1) for (var n = 1; n < arguments.length; n++) {\n        e[n - 1] = arguments[n];\n      }\n      d.push(new c(t, e)), 1 !== d.length || y || o(a);\n    }, c.prototype.run = function () {\n      this.fun.apply(null, this.array);\n    }, f.title = \"browser\", f.browser = !0, f.env = {}, f.argv = [], f.version = \"\", f.versions = {}, f.on = u, f.addListener = u, f.once = u, f.off = u, f.removeListener = u, f.removeAllListeners = u, f.emit = u, f.prependListener = u, f.prependOnceListener = u, f.listeners = function (t) {\n      return [];\n    }, f.binding = function (t) {\n      throw new Error(\"process.binding is not supported\");\n    }, f.cwd = function () {\n      return \"/\";\n    }, f.chdir = function (t) {\n      throw new Error(\"process.chdir is not supported\");\n    }, f.umask = function () {\n      return 0;\n    };\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      if (Array.isArray(t)) {\n        for (var e = 0, n = Array(t.length); e < t.length; e++) {\n          n[e] = t[e];\n        }\n\n        return n;\n      }\n\n      return Array.from(t);\n    }\n\n    function o(t) {\n      function e(t) {\n        for (var e = 0, n = 0; n < t.length; n++) {\n          e = (e << 5) - e + t.charCodeAt(n), e |= 0;\n        }\n\n        return o.colors[Math.abs(e) % o.colors.length];\n      }\n\n      function o(t) {\n        function n() {\n          for (var t = arguments.length, e = Array(t), i = 0; i < t; i++) {\n            e[i] = arguments[i];\n          }\n\n          if (n.enabled) {\n            var s = n,\n                a = Number(new Date()),\n                c = a - (r || a);\n            s.diff = c, s.prev = r, s.curr = a, r = a, e[0] = o.coerce(e[0]), \"string\" != typeof e[0] && e.unshift(\"%O\");\n            var u = 0;\n            e[0] = e[0].replace(/%([a-zA-Z%])/g, function (t, n) {\n              if (\"%%\" === t) return t;\n              u++;\n              var r = o.formatters[n];\n\n              if (\"function\" == typeof r) {\n                var i = e[u];\n                t = r.call(s, i), e.splice(u, 1), u--;\n              }\n\n              return t;\n            }), o.formatArgs.call(s, e);\n            var p = s.log || o.log;\n            p.apply(s, e);\n          }\n        }\n\n        var r = void 0;\n        return n.namespace = t, n.enabled = o.enabled(t), n.useColors = o.useColors(), n.color = e(t), n.destroy = i, n.extend = s, \"function\" == typeof o.init && o.init(n), o.instances.push(n), n;\n      }\n\n      function i() {\n        var t = o.instances.indexOf(this);\n        return t !== -1 && (o.instances.splice(t, 1), !0);\n      }\n\n      function s(t, e) {\n        var n = o(this.namespace + (\"undefined\" == typeof e ? \":\" : e) + t);\n        return n.log = this.log, n;\n      }\n\n      function a(t) {\n        o.save(t), o.names = [], o.skips = [];\n        var e = void 0,\n            n = (\"string\" == typeof t ? t : \"\").split(/[\\s,]+/),\n            r = n.length;\n\n        for (e = 0; e < r; e++) {\n          n[e] && (t = n[e].replace(/\\*/g, \".*?\"), \"-\" === t[0] ? o.skips.push(new RegExp(\"^\" + t.substr(1) + \"$\")) : o.names.push(new RegExp(\"^\" + t + \"$\")));\n        }\n\n        for (e = 0; e < o.instances.length; e++) {\n          var i = o.instances[e];\n          i.enabled = o.enabled(i.namespace);\n        }\n      }\n\n      function c() {\n        var t = [].concat(r(o.names.map(p)), r(o.skips.map(p).map(function (t) {\n          return \"-\" + t;\n        }))).join(\",\");\n        return o.enable(\"\"), t;\n      }\n\n      function u(t) {\n        if (\"*\" === t[t.length - 1]) return !0;\n        var e = void 0,\n            n = void 0;\n\n        for (e = 0, n = o.skips.length; e < n; e++) {\n          if (o.skips[e].test(t)) return !1;\n        }\n\n        for (e = 0, n = o.names.length; e < n; e++) {\n          if (o.names[e].test(t)) return !0;\n        }\n\n        return !1;\n      }\n\n      function p(t) {\n        return t.toString().substring(2, t.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n      }\n\n      function h(t) {\n        return t instanceof Error ? t.stack || t.message : t;\n      }\n\n      return o.debug = o, o[\"default\"] = o, o.coerce = h, o.disable = c, o.enable = a, o.enabled = u, o.humanize = n(6), Object.keys(t).forEach(function (e) {\n        o[e] = t[e];\n      }), o.instances = [], o.names = [], o.skips = [], o.formatters = {}, o.selectColor = e, o.enable(o.load()), o;\n    }\n\n    t.exports = o;\n  }, function (t, e) {\n    function n(t) {\n      if (t = String(t), !(t.length > 100)) {\n        var e = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);\n\n        if (e) {\n          var n = parseFloat(e[1]),\n              r = (e[2] || \"ms\").toLowerCase();\n\n          switch (r) {\n            case \"years\":\n            case \"year\":\n            case \"yrs\":\n            case \"yr\":\n            case \"y\":\n              return n * h;\n\n            case \"weeks\":\n            case \"week\":\n            case \"w\":\n              return n * p;\n\n            case \"days\":\n            case \"day\":\n            case \"d\":\n              return n * u;\n\n            case \"hours\":\n            case \"hour\":\n            case \"hrs\":\n            case \"hr\":\n            case \"h\":\n              return n * c;\n\n            case \"minutes\":\n            case \"minute\":\n            case \"mins\":\n            case \"min\":\n            case \"m\":\n              return n * a;\n\n            case \"seconds\":\n            case \"second\":\n            case \"secs\":\n            case \"sec\":\n            case \"s\":\n              return n * s;\n\n            case \"milliseconds\":\n            case \"millisecond\":\n            case \"msecs\":\n            case \"msec\":\n            case \"ms\":\n              return n;\n\n            default:\n              return;\n          }\n        }\n      }\n    }\n\n    function r(t) {\n      var e = Math.abs(t);\n      return e >= u ? Math.round(t / u) + \"d\" : e >= c ? Math.round(t / c) + \"h\" : e >= a ? Math.round(t / a) + \"m\" : e >= s ? Math.round(t / s) + \"s\" : t + \"ms\";\n    }\n\n    function o(t) {\n      var e = Math.abs(t);\n      return e >= u ? i(t, e, u, \"day\") : e >= c ? i(t, e, c, \"hour\") : e >= a ? i(t, e, a, \"minute\") : e >= s ? i(t, e, s, \"second\") : t + \" ms\";\n    }\n\n    function i(t, e, n, r) {\n      var o = e >= 1.5 * n;\n      return Math.round(t / n) + \" \" + r + (o ? \"s\" : \"\");\n    }\n\n    var s = 1e3,\n        a = 60 * s,\n        c = 60 * a,\n        u = 24 * c,\n        p = 7 * u,\n        h = 365.25 * u;\n\n    t.exports = function (t, e) {\n      e = e || {};\n\n      var i = _typeof(t);\n\n      if (\"string\" === i && t.length > 0) return n(t);\n      if (\"number\" === i && isFinite(t)) return e[\"long\"] ? o(t) : r(t);\n      throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(t));\n    };\n  }, function (t, e, n) {\n    function r() {}\n\n    function o(t) {\n      var n = \"\" + t.type;\n\n      if (e.BINARY_EVENT !== t.type && e.BINARY_ACK !== t.type || (n += t.attachments + \"-\"), t.nsp && \"/\" !== t.nsp && (n += t.nsp + \",\"), null != t.id && (n += t.id), null != t.data) {\n        var r = i(t.data);\n        if (r === !1) return g;\n        n += r;\n      }\n\n      return f(\"encoded %j as %s\", t, n), n;\n    }\n\n    function i(t) {\n      try {\n        return JSON.stringify(t);\n      } catch (e) {\n        return !1;\n      }\n    }\n\n    function s(t, e) {\n      function n(t) {\n        var n = d.deconstructPacket(t),\n            r = o(n.packet),\n            i = n.buffers;\n        i.unshift(r), e(i);\n      }\n\n      d.removeBlobs(t, n);\n    }\n\n    function a() {\n      this.reconstructor = null;\n    }\n\n    function c(t) {\n      var n = 0,\n          r = {\n        type: Number(t.charAt(0))\n      };\n      if (null == e.types[r.type]) return h(\"unknown packet type \" + r.type);\n\n      if (e.BINARY_EVENT === r.type || e.BINARY_ACK === r.type) {\n        for (var o = \"\"; \"-\" !== t.charAt(++n) && (o += t.charAt(n), n != t.length);) {\n          ;\n        }\n\n        if (o != Number(o) || \"-\" !== t.charAt(n)) throw new Error(\"Illegal attachments\");\n        r.attachments = Number(o);\n      }\n\n      if (\"/\" === t.charAt(n + 1)) for (r.nsp = \"\"; ++n;) {\n        var i = t.charAt(n);\n        if (\",\" === i) break;\n        if (r.nsp += i, n === t.length) break;\n      } else r.nsp = \"/\";\n      var s = t.charAt(n + 1);\n\n      if (\"\" !== s && Number(s) == s) {\n        for (r.id = \"\"; ++n;) {\n          var i = t.charAt(n);\n\n          if (null == i || Number(i) != i) {\n            --n;\n            break;\n          }\n\n          if (r.id += t.charAt(n), n === t.length) break;\n        }\n\n        r.id = Number(r.id);\n      }\n\n      if (t.charAt(++n)) {\n        var a = u(t.substr(n)),\n            c = a !== !1 && (r.type === e.ERROR || y(a));\n        if (!c) return h(\"invalid payload\");\n        r.data = a;\n      }\n\n      return f(\"decoded %s as %j\", t, r), r;\n    }\n\n    function u(t) {\n      try {\n        return JSON.parse(t);\n      } catch (e) {\n        return !1;\n      }\n    }\n\n    function p(t) {\n      this.reconPack = t, this.buffers = [];\n    }\n\n    function h(t) {\n      return {\n        type: e.ERROR,\n        data: \"parser error: \" + t\n      };\n    }\n\n    var f = n(8)(\"socket.io-parser\"),\n        l = n(11),\n        d = n(12),\n        y = n(13),\n        m = n(14);\n    e.protocol = 4, e.types = [\"CONNECT\", \"DISCONNECT\", \"EVENT\", \"ACK\", \"ERROR\", \"BINARY_EVENT\", \"BINARY_ACK\"], e.CONNECT = 0, e.DISCONNECT = 1, e.EVENT = 2, e.ACK = 3, e.ERROR = 4, e.BINARY_EVENT = 5, e.BINARY_ACK = 6, e.Encoder = r, e.Decoder = a;\n    var g = e.ERROR + '\"encode error\"';\n    r.prototype.encode = function (t, n) {\n      if (f(\"encoding packet %j\", t), e.BINARY_EVENT === t.type || e.BINARY_ACK === t.type) s(t, n);else {\n        var r = o(t);\n        n([r]);\n      }\n    }, l(a.prototype), a.prototype.add = function (t) {\n      var n;\n      if (\"string\" == typeof t) n = c(t), e.BINARY_EVENT === n.type || e.BINARY_ACK === n.type ? (this.reconstructor = new p(n), 0 === this.reconstructor.reconPack.attachments && this.emit(\"decoded\", n)) : this.emit(\"decoded\", n);else {\n        if (!m(t) && !t.base64) throw new Error(\"Unknown type: \" + t);\n        if (!this.reconstructor) throw new Error(\"got binary data when not reconstructing a packet\");\n        n = this.reconstructor.takeBinaryData(t), n && (this.reconstructor = null, this.emit(\"decoded\", n));\n      }\n    }, a.prototype.destroy = function () {\n      this.reconstructor && this.reconstructor.finishedReconstruction();\n    }, p.prototype.takeBinaryData = function (t) {\n      if (this.buffers.push(t), this.buffers.length === this.reconPack.attachments) {\n        var e = d.reconstructPacket(this.reconPack, this.buffers);\n        return this.finishedReconstruction(), e;\n      }\n\n      return null;\n    }, p.prototype.finishedReconstruction = function () {\n      this.reconPack = null, this.buffers = [];\n    };\n  }, function (t, e, n) {\n    (function (r) {\n      \"use strict\";\n\n      function o() {\n        return !(\"undefined\" == typeof window || !window.process || \"renderer\" !== window.process.type) || (\"undefined\" == typeof navigator || !navigator.userAgent || !navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) && (\"undefined\" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || \"undefined\" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || \"undefined\" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || \"undefined\" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n      }\n\n      function i(t) {\n        var n = this.useColors;\n\n        if (t[0] = (n ? \"%c\" : \"\") + this.namespace + (n ? \" %c\" : \" \") + t[0] + (n ? \"%c \" : \" \") + \"+\" + e.humanize(this.diff), n) {\n          var r = \"color: \" + this.color;\n          t.splice(1, 0, r, \"color: inherit\");\n          var o = 0,\n              i = 0;\n          t[0].replace(/%[a-zA-Z%]/g, function (t) {\n            \"%%\" !== t && (o++, \"%c\" === t && (i = o));\n          }), t.splice(i, 0, r);\n        }\n      }\n\n      function s() {\n        return \"object\" === (\"undefined\" == typeof console ? \"undefined\" : p(console)) && console.log && Function.prototype.apply.call(console.log, console, arguments);\n      }\n\n      function a(t) {\n        try {\n          null == t ? e.storage.removeItem(\"debug\") : e.storage.debug = t;\n        } catch (n) {}\n      }\n\n      function c() {\n        var t;\n\n        try {\n          t = e.storage.debug;\n        } catch (n) {}\n\n        return !t && \"undefined\" != typeof r && \"env\" in r && (t = r.env.DEBUG), t;\n      }\n\n      function u() {\n        try {\n          return window.localStorage;\n        } catch (t) {}\n      }\n\n      var p = \"function\" == typeof Symbol && \"symbol\" == _typeof(Symbol.iterator) ? function (t) {\n        return _typeof(t);\n      } : function (t) {\n        return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : _typeof(t);\n      };\n      e = t.exports = n(9), e.log = s, e.formatArgs = i, e.save = a, e.load = c, e.useColors = o, e.storage = \"undefined\" != typeof chrome && \"undefined\" != typeof chrome.storage ? chrome.storage.local : u(), e.colors = [\"#0000CC\", \"#0000FF\", \"#0033CC\", \"#0033FF\", \"#0066CC\", \"#0066FF\", \"#0099CC\", \"#0099FF\", \"#00CC00\", \"#00CC33\", \"#00CC66\", \"#00CC99\", \"#00CCCC\", \"#00CCFF\", \"#3300CC\", \"#3300FF\", \"#3333CC\", \"#3333FF\", \"#3366CC\", \"#3366FF\", \"#3399CC\", \"#3399FF\", \"#33CC00\", \"#33CC33\", \"#33CC66\", \"#33CC99\", \"#33CCCC\", \"#33CCFF\", \"#6600CC\", \"#6600FF\", \"#6633CC\", \"#6633FF\", \"#66CC00\", \"#66CC33\", \"#9900CC\", \"#9900FF\", \"#9933CC\", \"#9933FF\", \"#99CC00\", \"#99CC33\", \"#CC0000\", \"#CC0033\", \"#CC0066\", \"#CC0099\", \"#CC00CC\", \"#CC00FF\", \"#CC3300\", \"#CC3333\", \"#CC3366\", \"#CC3399\", \"#CC33CC\", \"#CC33FF\", \"#CC6600\", \"#CC6633\", \"#CC9900\", \"#CC9933\", \"#CCCC00\", \"#CCCC33\", \"#FF0000\", \"#FF0033\", \"#FF0066\", \"#FF0099\", \"#FF00CC\", \"#FF00FF\", \"#FF3300\", \"#FF3333\", \"#FF3366\", \"#FF3399\", \"#FF33CC\", \"#FF33FF\", \"#FF6600\", \"#FF6633\", \"#FF9900\", \"#FF9933\", \"#FFCC00\", \"#FFCC33\"], e.formatters.j = function (t) {\n        try {\n          return JSON.stringify(t);\n        } catch (e) {\n          return \"[UnexpectedJSONParseError]: \" + e.message;\n        }\n      }, e.enable(c());\n    }).call(e, n(4));\n  }, function (t, e, n) {\n    \"use strict\";\n\n    function r(t) {\n      var n,\n          r = 0;\n\n      for (n in t) {\n        r = (r << 5) - r + t.charCodeAt(n), r |= 0;\n      }\n\n      return e.colors[Math.abs(r) % e.colors.length];\n    }\n\n    function o(t) {\n      function n() {\n        if (n.enabled) {\n          var t = n,\n              r = +new Date(),\n              i = r - (o || r);\n          t.diff = i, t.prev = o, t.curr = r, o = r;\n\n          for (var s = new Array(arguments.length), a = 0; a < s.length; a++) {\n            s[a] = arguments[a];\n          }\n\n          s[0] = e.coerce(s[0]), \"string\" != typeof s[0] && s.unshift(\"%O\");\n          var c = 0;\n          s[0] = s[0].replace(/%([a-zA-Z%])/g, function (n, r) {\n            if (\"%%\" === n) return n;\n            c++;\n            var o = e.formatters[r];\n\n            if (\"function\" == typeof o) {\n              var i = s[c];\n              n = o.call(t, i), s.splice(c, 1), c--;\n            }\n\n            return n;\n          }), e.formatArgs.call(t, s);\n          var u = n.log || e.log || console.log.bind(console);\n          u.apply(t, s);\n        }\n      }\n\n      var o;\n      return n.namespace = t, n.enabled = e.enabled(t), n.useColors = e.useColors(), n.color = r(t), n.destroy = i, \"function\" == typeof e.init && e.init(n), e.instances.push(n), n;\n    }\n\n    function i() {\n      var t = e.instances.indexOf(this);\n      return t !== -1 && (e.instances.splice(t, 1), !0);\n    }\n\n    function s(t) {\n      e.save(t), e.names = [], e.skips = [];\n      var n,\n          r = (\"string\" == typeof t ? t : \"\").split(/[\\s,]+/),\n          o = r.length;\n\n      for (n = 0; n < o; n++) {\n        r[n] && (t = r[n].replace(/\\*/g, \".*?\"), \"-\" === t[0] ? e.skips.push(new RegExp(\"^\" + t.substr(1) + \"$\")) : e.names.push(new RegExp(\"^\" + t + \"$\")));\n      }\n\n      for (n = 0; n < e.instances.length; n++) {\n        var i = e.instances[n];\n        i.enabled = e.enabled(i.namespace);\n      }\n    }\n\n    function a() {\n      e.enable(\"\");\n    }\n\n    function c(t) {\n      if (\"*\" === t[t.length - 1]) return !0;\n      var n, r;\n\n      for (n = 0, r = e.skips.length; n < r; n++) {\n        if (e.skips[n].test(t)) return !1;\n      }\n\n      for (n = 0, r = e.names.length; n < r; n++) {\n        if (e.names[n].test(t)) return !0;\n      }\n\n      return !1;\n    }\n\n    function u(t) {\n      return t instanceof Error ? t.stack || t.message : t;\n    }\n\n    e = t.exports = o.debug = o[\"default\"] = o, e.coerce = u, e.disable = a, e.enable = s, e.enabled = c, e.humanize = n(10), e.instances = [], e.names = [], e.skips = [], e.formatters = {};\n  }, function (t, e) {\n    function n(t) {\n      if (t = String(t), !(t.length > 100)) {\n        var e = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);\n\n        if (e) {\n          var n = parseFloat(e[1]),\n              r = (e[2] || \"ms\").toLowerCase();\n\n          switch (r) {\n            case \"years\":\n            case \"year\":\n            case \"yrs\":\n            case \"yr\":\n            case \"y\":\n              return n * p;\n\n            case \"days\":\n            case \"day\":\n            case \"d\":\n              return n * u;\n\n            case \"hours\":\n            case \"hour\":\n            case \"hrs\":\n            case \"hr\":\n            case \"h\":\n              return n * c;\n\n            case \"minutes\":\n            case \"minute\":\n            case \"mins\":\n            case \"min\":\n            case \"m\":\n              return n * a;\n\n            case \"seconds\":\n            case \"second\":\n            case \"secs\":\n            case \"sec\":\n            case \"s\":\n              return n * s;\n\n            case \"milliseconds\":\n            case \"millisecond\":\n            case \"msecs\":\n            case \"msec\":\n            case \"ms\":\n              return n;\n\n            default:\n              return;\n          }\n        }\n      }\n    }\n\n    function r(t) {\n      return t >= u ? Math.round(t / u) + \"d\" : t >= c ? Math.round(t / c) + \"h\" : t >= a ? Math.round(t / a) + \"m\" : t >= s ? Math.round(t / s) + \"s\" : t + \"ms\";\n    }\n\n    function o(t) {\n      return i(t, u, \"day\") || i(t, c, \"hour\") || i(t, a, \"minute\") || i(t, s, \"second\") || t + \" ms\";\n    }\n\n    function i(t, e, n) {\n      if (!(t < e)) return t < 1.5 * e ? Math.floor(t / e) + \" \" + n : Math.ceil(t / e) + \" \" + n + \"s\";\n    }\n\n    var s = 1e3,\n        a = 60 * s,\n        c = 60 * a,\n        u = 24 * c,\n        p = 365.25 * u;\n\n    t.exports = function (t, e) {\n      e = e || {};\n\n      var i = _typeof(t);\n\n      if (\"string\" === i && t.length > 0) return n(t);\n      if (\"number\" === i && isNaN(t) === !1) return e[\"long\"] ? o(t) : r(t);\n      throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(t));\n    };\n  }, function (t, e, n) {\n    function r(t) {\n      if (t) return o(t);\n    }\n\n    function o(t) {\n      for (var e in r.prototype) {\n        t[e] = r.prototype[e];\n      }\n\n      return t;\n    }\n\n    t.exports = r, r.prototype.on = r.prototype.addEventListener = function (t, e) {\n      return this._callbacks = this._callbacks || {}, (this._callbacks[\"$\" + t] = this._callbacks[\"$\" + t] || []).push(e), this;\n    }, r.prototype.once = function (t, e) {\n      function n() {\n        this.off(t, n), e.apply(this, arguments);\n      }\n\n      return n.fn = e, this.on(t, n), this;\n    }, r.prototype.off = r.prototype.removeListener = r.prototype.removeAllListeners = r.prototype.removeEventListener = function (t, e) {\n      if (this._callbacks = this._callbacks || {}, 0 == arguments.length) return this._callbacks = {}, this;\n      var n = this._callbacks[\"$\" + t];\n      if (!n) return this;\n      if (1 == arguments.length) return delete this._callbacks[\"$\" + t], this;\n\n      for (var r, o = 0; o < n.length; o++) {\n        if (r = n[o], r === e || r.fn === e) {\n          n.splice(o, 1);\n          break;\n        }\n      }\n\n      return this;\n    }, r.prototype.emit = function (t) {\n      this._callbacks = this._callbacks || {};\n      var e = [].slice.call(arguments, 1),\n          n = this._callbacks[\"$\" + t];\n\n      if (n) {\n        n = n.slice(0);\n\n        for (var r = 0, o = n.length; r < o; ++r) {\n          n[r].apply(this, e);\n        }\n      }\n\n      return this;\n    }, r.prototype.listeners = function (t) {\n      return this._callbacks = this._callbacks || {}, this._callbacks[\"$\" + t] || [];\n    }, r.prototype.hasListeners = function (t) {\n      return !!this.listeners(t).length;\n    };\n  }, function (t, e, n) {\n    function r(t, e) {\n      if (!t) return t;\n\n      if (s(t)) {\n        var n = {\n          _placeholder: !0,\n          num: e.length\n        };\n        return e.push(t), n;\n      }\n\n      if (i(t)) {\n        for (var o = new Array(t.length), a = 0; a < t.length; a++) {\n          o[a] = r(t[a], e);\n        }\n\n        return o;\n      }\n\n      if (\"object\" == _typeof(t) && !(t instanceof Date)) {\n        var o = {};\n\n        for (var c in t) {\n          o[c] = r(t[c], e);\n        }\n\n        return o;\n      }\n\n      return t;\n    }\n\n    function o(t, e) {\n      if (!t) return t;\n      if (t && t._placeholder) return e[t.num];\n      if (i(t)) for (var n = 0; n < t.length; n++) {\n        t[n] = o(t[n], e);\n      } else if (\"object\" == _typeof(t)) for (var r in t) {\n        t[r] = o(t[r], e);\n      }\n      return t;\n    }\n\n    var i = n(13),\n        s = n(14),\n        a = Object.prototype.toString,\n        c = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === a.call(Blob),\n        u = \"function\" == typeof File || \"undefined\" != typeof File && \"[object FileConstructor]\" === a.call(File);\n    e.deconstructPacket = function (t) {\n      var e = [],\n          n = t.data,\n          o = t;\n      return o.data = r(n, e), o.attachments = e.length, {\n        packet: o,\n        buffers: e\n      };\n    }, e.reconstructPacket = function (t, e) {\n      return t.data = o(t.data, e), t.attachments = void 0, t;\n    }, e.removeBlobs = function (t, e) {\n      function n(t, a, p) {\n        if (!t) return t;\n\n        if (c && t instanceof Blob || u && t instanceof File) {\n          r++;\n          var h = new FileReader();\n          h.onload = function () {\n            p ? p[a] = this.result : o = this.result, --r || e(o);\n          }, h.readAsArrayBuffer(t);\n        } else if (i(t)) for (var f = 0; f < t.length; f++) {\n          n(t[f], f, t);\n        } else if (\"object\" == _typeof(t) && !s(t)) for (var l in t) {\n          n(t[l], l, t);\n        }\n      }\n\n      var r = 0,\n          o = t;\n      n(o), r || e(o);\n    };\n  }, function (t, e) {\n    var n = {}.toString;\n\n    t.exports = Array.isArray || function (t) {\n      return \"[object Array]\" == n.call(t);\n    };\n  }, function (t, e) {\n    function n(t) {\n      return r && Buffer.isBuffer(t) || o && (t instanceof ArrayBuffer || i(t));\n    }\n\n    t.exports = n;\n\n    var r = \"function\" == typeof Buffer && \"function\" == typeof Buffer.isBuffer,\n        o = \"function\" == typeof ArrayBuffer,\n        i = function i(t) {\n      return \"function\" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : t.buffer instanceof ArrayBuffer;\n    };\n  }, function (t, e, n) {\n    function r(t, e) {\n      if (!(this instanceof r)) return new r(t, e);\n      t && \"object\" == _typeof(t) && (e = t, t = void 0), e = e || {}, e.path = e.path || \"/socket.io\", this.nsps = {}, this.subs = [], this.opts = e, this.reconnection(e.reconnection !== !1), this.reconnectionAttempts(e.reconnectionAttempts || 1 / 0), this.reconnectionDelay(e.reconnectionDelay || 1e3), this.reconnectionDelayMax(e.reconnectionDelayMax || 5e3), this.randomizationFactor(e.randomizationFactor || .5), this.backoff = new f({\n        min: this.reconnectionDelay(),\n        max: this.reconnectionDelayMax(),\n        jitter: this.randomizationFactor()\n      }), this.timeout(null == e.timeout ? 2e4 : e.timeout), this.readyState = \"closed\", this.uri = t, this.connecting = [], this.lastPing = null, this.encoding = !1, this.packetBuffer = [];\n      var n = e.parser || a;\n      this.encoder = new n.Encoder(), this.decoder = new n.Decoder(), this.autoConnect = e.autoConnect !== !1, this.autoConnect && this.open();\n    }\n\n    var o = n(16),\n        i = n(39),\n        s = n(11),\n        a = n(7),\n        c = n(41),\n        u = n(42),\n        p = n(3)(\"socket.io-client:manager\"),\n        h = n(38),\n        f = n(43),\n        l = Object.prototype.hasOwnProperty;\n    t.exports = r, r.prototype.emitAll = function () {\n      this.emit.apply(this, arguments);\n\n      for (var t in this.nsps) {\n        l.call(this.nsps, t) && this.nsps[t].emit.apply(this.nsps[t], arguments);\n      }\n    }, r.prototype.updateSocketIds = function () {\n      for (var t in this.nsps) {\n        l.call(this.nsps, t) && (this.nsps[t].id = this.generateId(t));\n      }\n    }, r.prototype.generateId = function (t) {\n      return (\"/\" === t ? \"\" : t + \"#\") + this.engine.id;\n    }, s(r.prototype), r.prototype.reconnection = function (t) {\n      return arguments.length ? (this._reconnection = !!t, this) : this._reconnection;\n    }, r.prototype.reconnectionAttempts = function (t) {\n      return arguments.length ? (this._reconnectionAttempts = t, this) : this._reconnectionAttempts;\n    }, r.prototype.reconnectionDelay = function (t) {\n      return arguments.length ? (this._reconnectionDelay = t, this.backoff && this.backoff.setMin(t), this) : this._reconnectionDelay;\n    }, r.prototype.randomizationFactor = function (t) {\n      return arguments.length ? (this._randomizationFactor = t, this.backoff && this.backoff.setJitter(t), this) : this._randomizationFactor;\n    }, r.prototype.reconnectionDelayMax = function (t) {\n      return arguments.length ? (this._reconnectionDelayMax = t, this.backoff && this.backoff.setMax(t), this) : this._reconnectionDelayMax;\n    }, r.prototype.timeout = function (t) {\n      return arguments.length ? (this._timeout = t, this) : this._timeout;\n    }, r.prototype.maybeReconnectOnOpen = function () {\n      !this.reconnecting && this._reconnection && 0 === this.backoff.attempts && this.reconnect();\n    }, r.prototype.open = r.prototype.connect = function (t, e) {\n      if (p(\"readyState %s\", this.readyState), ~this.readyState.indexOf(\"open\")) return this;\n      p(\"opening %s\", this.uri), this.engine = o(this.uri, this.opts);\n      var n = this.engine,\n          r = this;\n      this.readyState = \"opening\", this.skipReconnect = !1;\n      var i = c(n, \"open\", function () {\n        r.onopen(), t && t();\n      }),\n          s = c(n, \"error\", function (e) {\n        if (p(\"connect_error\"), r.cleanup(), r.readyState = \"closed\", r.emitAll(\"connect_error\", e), t) {\n          var n = new Error(\"Connection error\");\n          n.data = e, t(n);\n        } else r.maybeReconnectOnOpen();\n      });\n\n      if (!1 !== this._timeout) {\n        var a = this._timeout;\n        p(\"connect attempt will timeout after %d\", a);\n        var u = setTimeout(function () {\n          p(\"connect attempt timed out after %d\", a), i.destroy(), n.close(), n.emit(\"error\", \"timeout\"), r.emitAll(\"connect_timeout\", a);\n        }, a);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(u);\n          }\n        });\n      }\n\n      return this.subs.push(i), this.subs.push(s), this;\n    }, r.prototype.onopen = function () {\n      p(\"open\"), this.cleanup(), this.readyState = \"open\", this.emit(\"open\");\n      var t = this.engine;\n      this.subs.push(c(t, \"data\", u(this, \"ondata\"))), this.subs.push(c(t, \"ping\", u(this, \"onping\"))), this.subs.push(c(t, \"pong\", u(this, \"onpong\"))), this.subs.push(c(t, \"error\", u(this, \"onerror\"))), this.subs.push(c(t, \"close\", u(this, \"onclose\"))), this.subs.push(c(this.decoder, \"decoded\", u(this, \"ondecoded\")));\n    }, r.prototype.onping = function () {\n      this.lastPing = new Date(), this.emitAll(\"ping\");\n    }, r.prototype.onpong = function () {\n      this.emitAll(\"pong\", new Date() - this.lastPing);\n    }, r.prototype.ondata = function (t) {\n      this.decoder.add(t);\n    }, r.prototype.ondecoded = function (t) {\n      this.emit(\"packet\", t);\n    }, r.prototype.onerror = function (t) {\n      p(\"error\", t), this.emitAll(\"error\", t);\n    }, r.prototype.socket = function (t, e) {\n      function n() {\n        ~h(o.connecting, r) || o.connecting.push(r);\n      }\n\n      var r = this.nsps[t];\n\n      if (!r) {\n        r = new i(this, t, e), this.nsps[t] = r;\n        var o = this;\n        r.on(\"connecting\", n), r.on(\"connect\", function () {\n          r.id = o.generateId(t);\n        }), this.autoConnect && n();\n      }\n\n      return r;\n    }, r.prototype.destroy = function (t) {\n      var e = h(this.connecting, t);\n      ~e && this.connecting.splice(e, 1), this.connecting.length || this.close();\n    }, r.prototype.packet = function (t) {\n      p(\"writing packet %j\", t);\n      var e = this;\n      t.query && 0 === t.type && (t.nsp += \"?\" + t.query), e.encoding ? e.packetBuffer.push(t) : (e.encoding = !0, this.encoder.encode(t, function (n) {\n        for (var r = 0; r < n.length; r++) {\n          e.engine.write(n[r], t.options);\n        }\n\n        e.encoding = !1, e.processPacketQueue();\n      }));\n    }, r.prototype.processPacketQueue = function () {\n      if (this.packetBuffer.length > 0 && !this.encoding) {\n        var t = this.packetBuffer.shift();\n        this.packet(t);\n      }\n    }, r.prototype.cleanup = function () {\n      p(\"cleanup\");\n\n      for (var t = this.subs.length, e = 0; e < t; e++) {\n        var n = this.subs.shift();\n        n.destroy();\n      }\n\n      this.packetBuffer = [], this.encoding = !1, this.lastPing = null, this.decoder.destroy();\n    }, r.prototype.close = r.prototype.disconnect = function () {\n      p(\"disconnect\"), this.skipReconnect = !0, this.reconnecting = !1, \"opening\" === this.readyState && this.cleanup(), this.backoff.reset(), this.readyState = \"closed\", this.engine && this.engine.close();\n    }, r.prototype.onclose = function (t) {\n      p(\"onclose\"), this.cleanup(), this.backoff.reset(), this.readyState = \"closed\", this.emit(\"close\", t), this._reconnection && !this.skipReconnect && this.reconnect();\n    }, r.prototype.reconnect = function () {\n      if (this.reconnecting || this.skipReconnect) return this;\n      var t = this;\n      if (this.backoff.attempts >= this._reconnectionAttempts) p(\"reconnect failed\"), this.backoff.reset(), this.emitAll(\"reconnect_failed\"), this.reconnecting = !1;else {\n        var e = this.backoff.duration();\n        p(\"will wait %dms before reconnect attempt\", e), this.reconnecting = !0;\n        var n = setTimeout(function () {\n          t.skipReconnect || (p(\"attempting reconnect\"), t.emitAll(\"reconnect_attempt\", t.backoff.attempts), t.emitAll(\"reconnecting\", t.backoff.attempts), t.skipReconnect || t.open(function (e) {\n            e ? (p(\"reconnect attempt error\"), t.reconnecting = !1, t.reconnect(), t.emitAll(\"reconnect_error\", e.data)) : (p(\"reconnect success\"), t.onreconnect());\n          }));\n        }, e);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(n);\n          }\n        });\n      }\n    }, r.prototype.onreconnect = function () {\n      var t = this.backoff.attempts;\n      this.reconnecting = !1, this.backoff.reset(), this.updateSocketIds(), this.emitAll(\"reconnect\", t);\n    };\n  }, function (t, e, n) {\n    t.exports = n(17), t.exports.parser = n(24);\n  }, function (t, e, n) {\n    function r(t, e) {\n      return this instanceof r ? (e = e || {}, t && \"object\" == _typeof(t) && (e = t, t = null), t ? (t = p(t), e.hostname = t.host, e.secure = \"https\" === t.protocol || \"wss\" === t.protocol, e.port = t.port, t.query && (e.query = t.query)) : e.host && (e.hostname = p(e.host).host), this.secure = null != e.secure ? e.secure : \"undefined\" != typeof location && \"https:\" === location.protocol, e.hostname && !e.port && (e.port = this.secure ? \"443\" : \"80\"), this.agent = e.agent || !1, this.hostname = e.hostname || (\"undefined\" != typeof location ? location.hostname : \"localhost\"), this.port = e.port || (\"undefined\" != typeof location && location.port ? location.port : this.secure ? 443 : 80), this.query = e.query || {}, \"string\" == typeof this.query && (this.query = h.decode(this.query)), this.upgrade = !1 !== e.upgrade, this.path = (e.path || \"/engine.io\").replace(/\\/$/, \"\") + \"/\", this.forceJSONP = !!e.forceJSONP, this.jsonp = !1 !== e.jsonp, this.forceBase64 = !!e.forceBase64, this.enablesXDR = !!e.enablesXDR, this.withCredentials = !1 !== e.withCredentials, this.timestampParam = e.timestampParam || \"t\", this.timestampRequests = e.timestampRequests, this.transports = e.transports || [\"polling\", \"websocket\"], this.transportOptions = e.transportOptions || {}, this.readyState = \"\", this.writeBuffer = [], this.prevBufferLen = 0, this.policyPort = e.policyPort || 843, this.rememberUpgrade = e.rememberUpgrade || !1, this.binaryType = null, this.onlyBinaryUpgrades = e.onlyBinaryUpgrades, this.perMessageDeflate = !1 !== e.perMessageDeflate && (e.perMessageDeflate || {}), !0 === this.perMessageDeflate && (this.perMessageDeflate = {}), this.perMessageDeflate && null == this.perMessageDeflate.threshold && (this.perMessageDeflate.threshold = 1024), this.pfx = e.pfx || null, this.key = e.key || null, this.passphrase = e.passphrase || null, this.cert = e.cert || null, this.ca = e.ca || null, this.ciphers = e.ciphers || null, this.rejectUnauthorized = void 0 === e.rejectUnauthorized || e.rejectUnauthorized, this.forceNode = !!e.forceNode, this.isReactNative = \"undefined\" != typeof navigator && \"string\" == typeof navigator.product && \"reactnative\" === navigator.product.toLowerCase(), (\"undefined\" == typeof self || this.isReactNative) && (e.extraHeaders && Object.keys(e.extraHeaders).length > 0 && (this.extraHeaders = e.extraHeaders), e.localAddress && (this.localAddress = e.localAddress)), this.id = null, this.upgrades = null, this.pingInterval = null, this.pingTimeout = null, this.pingIntervalTimer = null, this.pingTimeoutTimer = null, void this.open()) : new r(t, e);\n    }\n\n    function o(t) {\n      var e = {};\n\n      for (var n in t) {\n        t.hasOwnProperty(n) && (e[n] = t[n]);\n      }\n\n      return e;\n    }\n\n    var i = n(18),\n        s = n(11),\n        a = n(3)(\"engine.io-client:socket\"),\n        c = n(38),\n        u = n(24),\n        p = n(2),\n        h = n(32);\n    t.exports = r, r.priorWebsocketSuccess = !1, s(r.prototype), r.protocol = u.protocol, r.Socket = r, r.Transport = n(23), r.transports = n(18), r.parser = n(24), r.prototype.createTransport = function (t) {\n      a('creating transport \"%s\"', t);\n      var e = o(this.query);\n      e.EIO = u.protocol, e.transport = t;\n      var n = this.transportOptions[t] || {};\n      this.id && (e.sid = this.id);\n      var r = new i[t]({\n        query: e,\n        socket: this,\n        agent: n.agent || this.agent,\n        hostname: n.hostname || this.hostname,\n        port: n.port || this.port,\n        secure: n.secure || this.secure,\n        path: n.path || this.path,\n        forceJSONP: n.forceJSONP || this.forceJSONP,\n        jsonp: n.jsonp || this.jsonp,\n        forceBase64: n.forceBase64 || this.forceBase64,\n        enablesXDR: n.enablesXDR || this.enablesXDR,\n        withCredentials: n.withCredentials || this.withCredentials,\n        timestampRequests: n.timestampRequests || this.timestampRequests,\n        timestampParam: n.timestampParam || this.timestampParam,\n        policyPort: n.policyPort || this.policyPort,\n        pfx: n.pfx || this.pfx,\n        key: n.key || this.key,\n        passphrase: n.passphrase || this.passphrase,\n        cert: n.cert || this.cert,\n        ca: n.ca || this.ca,\n        ciphers: n.ciphers || this.ciphers,\n        rejectUnauthorized: n.rejectUnauthorized || this.rejectUnauthorized,\n        perMessageDeflate: n.perMessageDeflate || this.perMessageDeflate,\n        extraHeaders: n.extraHeaders || this.extraHeaders,\n        forceNode: n.forceNode || this.forceNode,\n        localAddress: n.localAddress || this.localAddress,\n        requestTimeout: n.requestTimeout || this.requestTimeout,\n        protocols: n.protocols || void 0,\n        isReactNative: this.isReactNative\n      });\n      return r;\n    }, r.prototype.open = function () {\n      var t;\n      if (this.rememberUpgrade && r.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) t = \"websocket\";else {\n        if (0 === this.transports.length) {\n          var e = this;\n          return void setTimeout(function () {\n            e.emit(\"error\", \"No transports available\");\n          }, 0);\n        }\n\n        t = this.transports[0];\n      }\n      this.readyState = \"opening\";\n\n      try {\n        t = this.createTransport(t);\n      } catch (n) {\n        return this.transports.shift(), void this.open();\n      }\n\n      t.open(), this.setTransport(t);\n    }, r.prototype.setTransport = function (t) {\n      a(\"setting transport %s\", t.name);\n      var e = this;\n      this.transport && (a(\"clearing existing transport %s\", this.transport.name), this.transport.removeAllListeners()), this.transport = t, t.on(\"drain\", function () {\n        e.onDrain();\n      }).on(\"packet\", function (t) {\n        e.onPacket(t);\n      }).on(\"error\", function (t) {\n        e.onError(t);\n      }).on(\"close\", function () {\n        e.onClose(\"transport close\");\n      });\n    }, r.prototype.probe = function (t) {\n      function e() {\n        if (f.onlyBinaryUpgrades) {\n          var e = !this.supportsBinary && f.transport.supportsBinary;\n          h = h || e;\n        }\n\n        h || (a('probe transport \"%s\" opened', t), p.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]), p.once(\"packet\", function (e) {\n          if (!h) if (\"pong\" === e.type && \"probe\" === e.data) {\n            if (a('probe transport \"%s\" pong', t), f.upgrading = !0, f.emit(\"upgrading\", p), !p) return;\n            r.priorWebsocketSuccess = \"websocket\" === p.name, a('pausing current transport \"%s\"', f.transport.name), f.transport.pause(function () {\n              h || \"closed\" !== f.readyState && (a(\"changing transport and sending upgrade packet\"), u(), f.setTransport(p), p.send([{\n                type: \"upgrade\"\n              }]), f.emit(\"upgrade\", p), p = null, f.upgrading = !1, f.flush());\n            });\n          } else {\n            a('probe transport \"%s\" failed', t);\n            var n = new Error(\"probe error\");\n            n.transport = p.name, f.emit(\"upgradeError\", n);\n          }\n        }));\n      }\n\n      function n() {\n        h || (h = !0, u(), p.close(), p = null);\n      }\n\n      function o(e) {\n        var r = new Error(\"probe error: \" + e);\n        r.transport = p.name, n(), a('probe transport \"%s\" failed because of error: %s', t, e), f.emit(\"upgradeError\", r);\n      }\n\n      function i() {\n        o(\"transport closed\");\n      }\n\n      function s() {\n        o(\"socket closed\");\n      }\n\n      function c(t) {\n        p && t.name !== p.name && (a('\"%s\" works - aborting \"%s\"', t.name, p.name), n());\n      }\n\n      function u() {\n        p.removeListener(\"open\", e), p.removeListener(\"error\", o), p.removeListener(\"close\", i), f.removeListener(\"close\", s), f.removeListener(\"upgrading\", c);\n      }\n\n      a('probing transport \"%s\"', t);\n      var p = this.createTransport(t, {\n        probe: 1\n      }),\n          h = !1,\n          f = this;\n      r.priorWebsocketSuccess = !1, p.once(\"open\", e), p.once(\"error\", o), p.once(\"close\", i), this.once(\"close\", s), this.once(\"upgrading\", c), p.open();\n    }, r.prototype.onOpen = function () {\n      if (a(\"socket open\"), this.readyState = \"open\", r.priorWebsocketSuccess = \"websocket\" === this.transport.name, this.emit(\"open\"), this.flush(), \"open\" === this.readyState && this.upgrade && this.transport.pause) {\n        a(\"starting upgrade probes\");\n\n        for (var t = 0, e = this.upgrades.length; t < e; t++) {\n          this.probe(this.upgrades[t]);\n        }\n      }\n    }, r.prototype.onPacket = function (t) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) switch (a('socket receive: type \"%s\", data \"%s\"', t.type, t.data), this.emit(\"packet\", t), this.emit(\"heartbeat\"), t.type) {\n        case \"open\":\n          this.onHandshake(JSON.parse(t.data));\n          break;\n\n        case \"pong\":\n          this.setPing(), this.emit(\"pong\");\n          break;\n\n        case \"error\":\n          var e = new Error(\"server error\");\n          e.code = t.data, this.onError(e);\n          break;\n\n        case \"message\":\n          this.emit(\"data\", t.data), this.emit(\"message\", t.data);\n      } else a('packet received with socket readyState \"%s\"', this.readyState);\n    }, r.prototype.onHandshake = function (t) {\n      this.emit(\"handshake\", t), this.id = t.sid, this.transport.query.sid = t.sid, this.upgrades = this.filterUpgrades(t.upgrades), this.pingInterval = t.pingInterval, this.pingTimeout = t.pingTimeout, this.onOpen(), \"closed\" !== this.readyState && (this.setPing(), this.removeListener(\"heartbeat\", this.onHeartbeat), this.on(\"heartbeat\", this.onHeartbeat));\n    }, r.prototype.onHeartbeat = function (t) {\n      clearTimeout(this.pingTimeoutTimer);\n      var e = this;\n      e.pingTimeoutTimer = setTimeout(function () {\n        \"closed\" !== e.readyState && e.onClose(\"ping timeout\");\n      }, t || e.pingInterval + e.pingTimeout);\n    }, r.prototype.setPing = function () {\n      var t = this;\n      clearTimeout(t.pingIntervalTimer), t.pingIntervalTimer = setTimeout(function () {\n        a(\"writing ping packet - expecting pong within %sms\", t.pingTimeout), t.ping(), t.onHeartbeat(t.pingTimeout);\n      }, t.pingInterval);\n    }, r.prototype.ping = function () {\n      var t = this;\n      this.sendPacket(\"ping\", function () {\n        t.emit(\"ping\");\n      });\n    }, r.prototype.onDrain = function () {\n      this.writeBuffer.splice(0, this.prevBufferLen), this.prevBufferLen = 0, 0 === this.writeBuffer.length ? this.emit(\"drain\") : this.flush();\n    }, r.prototype.flush = function () {\n      \"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length && (a(\"flushing %d packets in socket\", this.writeBuffer.length), this.transport.send(this.writeBuffer), this.prevBufferLen = this.writeBuffer.length, this.emit(\"flush\"));\n    }, r.prototype.write = r.prototype.send = function (t, e, n) {\n      return this.sendPacket(\"message\", t, e, n), this;\n    }, r.prototype.sendPacket = function (t, e, n, r) {\n      if (\"function\" == typeof e && (r = e, e = void 0), \"function\" == typeof n && (r = n, n = null), \"closing\" !== this.readyState && \"closed\" !== this.readyState) {\n        n = n || {}, n.compress = !1 !== n.compress;\n        var o = {\n          type: t,\n          data: e,\n          options: n\n        };\n        this.emit(\"packetCreate\", o), this.writeBuffer.push(o), r && this.once(\"flush\", r), this.flush();\n      }\n    }, r.prototype.close = function () {\n      function t() {\n        r.onClose(\"forced close\"), a(\"socket closing - telling transport to close\"), r.transport.close();\n      }\n\n      function e() {\n        r.removeListener(\"upgrade\", e), r.removeListener(\"upgradeError\", e), t();\n      }\n\n      function n() {\n        r.once(\"upgrade\", e), r.once(\"upgradeError\", e);\n      }\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n        var r = this;\n        this.writeBuffer.length ? this.once(\"drain\", function () {\n          this.upgrading ? n() : t();\n        }) : this.upgrading ? n() : t();\n      }\n\n      return this;\n    }, r.prototype.onError = function (t) {\n      a(\"socket error %j\", t), r.priorWebsocketSuccess = !1, this.emit(\"error\", t), this.onClose(\"transport error\", t);\n    }, r.prototype.onClose = function (t, e) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        a('socket close with reason: \"%s\"', t);\n        var n = this;\n        clearTimeout(this.pingIntervalTimer), clearTimeout(this.pingTimeoutTimer), this.transport.removeAllListeners(\"close\"), this.transport.close(), this.transport.removeAllListeners(), this.readyState = \"closed\", this.id = null, this.emit(\"close\", t, e), n.writeBuffer = [], n.prevBufferLen = 0;\n      }\n    }, r.prototype.filterUpgrades = function (t) {\n      for (var e = [], n = 0, r = t.length; n < r; n++) {\n        ~c(this.transports, t[n]) && e.push(t[n]);\n      }\n\n      return e;\n    };\n  }, function (t, e, n) {\n    function r(t) {\n      var e,\n          n = !1,\n          r = !1,\n          a = !1 !== t.jsonp;\n\n      if (\"undefined\" != typeof location) {\n        var c = \"https:\" === location.protocol,\n            u = location.port;\n        u || (u = c ? 443 : 80), n = t.hostname !== location.hostname || u !== t.port, r = t.secure !== c;\n      }\n\n      if (t.xdomain = n, t.xscheme = r, e = new o(t), \"open\" in e && !t.forceJSONP) return new i(t);\n      if (!a) throw new Error(\"JSONP disabled\");\n      return new s(t);\n    }\n\n    var o = n(19),\n        i = n(21),\n        s = n(35),\n        a = n(36);\n    e.polling = r, e.websocket = a;\n  }, function (t, e, n) {\n    var r = n(20);\n\n    t.exports = function (t) {\n      var e = t.xdomain,\n          n = t.xscheme,\n          o = t.enablesXDR;\n\n      try {\n        if (\"undefined\" != typeof XMLHttpRequest && (!e || r)) return new XMLHttpRequest();\n      } catch (i) {}\n\n      try {\n        if (\"undefined\" != typeof XDomainRequest && !n && o) return new XDomainRequest();\n      } catch (i) {}\n\n      if (!e) try {\n        return new self[[\"Active\"].concat(\"Object\").join(\"X\")](\"Microsoft.XMLHTTP\");\n      } catch (i) {}\n    };\n  }, function (t, e) {\n    try {\n      t.exports = \"undefined\" != typeof XMLHttpRequest && \"withCredentials\" in new XMLHttpRequest();\n    } catch (n) {\n      t.exports = !1;\n    }\n  }, function (t, e, n) {\n    function r() {}\n\n    function o(t) {\n      if (c.call(this, t), this.requestTimeout = t.requestTimeout, this.extraHeaders = t.extraHeaders, \"undefined\" != typeof location) {\n        var e = \"https:\" === location.protocol,\n            n = location.port;\n        n || (n = e ? 443 : 80), this.xd = \"undefined\" != typeof location && t.hostname !== location.hostname || n !== t.port, this.xs = t.secure !== e;\n      }\n    }\n\n    function i(t) {\n      this.method = t.method || \"GET\", this.uri = t.uri, this.xd = !!t.xd, this.xs = !!t.xs, this.async = !1 !== t.async, this.data = void 0 !== t.data ? t.data : null, this.agent = t.agent, this.isBinary = t.isBinary, this.supportsBinary = t.supportsBinary, this.enablesXDR = t.enablesXDR, this.withCredentials = t.withCredentials, this.requestTimeout = t.requestTimeout, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, this.extraHeaders = t.extraHeaders, this.create();\n    }\n\n    function s() {\n      for (var t in i.requests) {\n        i.requests.hasOwnProperty(t) && i.requests[t].abort();\n      }\n    }\n\n    var a = n(19),\n        c = n(22),\n        u = n(11),\n        p = n(33),\n        h = n(3)(\"engine.io-client:polling-xhr\");\n    if (t.exports = o, t.exports.Request = i, p(o, c), o.prototype.supportsBinary = !0, o.prototype.request = function (t) {\n      return t = t || {}, t.uri = this.uri(), t.xd = this.xd, t.xs = this.xs, t.agent = this.agent || !1, t.supportsBinary = this.supportsBinary, t.enablesXDR = this.enablesXDR, t.withCredentials = this.withCredentials, t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized, t.requestTimeout = this.requestTimeout, t.extraHeaders = this.extraHeaders, new i(t);\n    }, o.prototype.doWrite = function (t, e) {\n      var n = \"string\" != typeof t && void 0 !== t,\n          r = this.request({\n        method: \"POST\",\n        data: t,\n        isBinary: n\n      }),\n          o = this;\n      r.on(\"success\", e), r.on(\"error\", function (t) {\n        o.onError(\"xhr post error\", t);\n      }), this.sendXhr = r;\n    }, o.prototype.doPoll = function () {\n      h(\"xhr poll\");\n      var t = this.request(),\n          e = this;\n      t.on(\"data\", function (t) {\n        e.onData(t);\n      }), t.on(\"error\", function (t) {\n        e.onError(\"xhr poll error\", t);\n      }), this.pollXhr = t;\n    }, u(i.prototype), i.prototype.create = function () {\n      var t = {\n        agent: this.agent,\n        xdomain: this.xd,\n        xscheme: this.xs,\n        enablesXDR: this.enablesXDR\n      };\n      t.pfx = this.pfx, t.key = this.key, t.passphrase = this.passphrase, t.cert = this.cert, t.ca = this.ca, t.ciphers = this.ciphers, t.rejectUnauthorized = this.rejectUnauthorized;\n      var e = this.xhr = new a(t),\n          n = this;\n\n      try {\n        h(\"xhr open %s: %s\", this.method, this.uri), e.open(this.method, this.uri, this.async);\n\n        try {\n          if (this.extraHeaders) {\n            e.setDisableHeaderCheck && e.setDisableHeaderCheck(!0);\n\n            for (var r in this.extraHeaders) {\n              this.extraHeaders.hasOwnProperty(r) && e.setRequestHeader(r, this.extraHeaders[r]);\n            }\n          }\n        } catch (o) {}\n\n        if (\"POST\" === this.method) try {\n          this.isBinary ? e.setRequestHeader(\"Content-type\", \"application/octet-stream\") : e.setRequestHeader(\"Content-type\", \"text/plain;charset=UTF-8\");\n        } catch (o) {}\n\n        try {\n          e.setRequestHeader(\"Accept\", \"*/*\");\n        } catch (o) {}\n\n        \"withCredentials\" in e && (e.withCredentials = this.withCredentials), this.requestTimeout && (e.timeout = this.requestTimeout), this.hasXDR() ? (e.onload = function () {\n          n.onLoad();\n        }, e.onerror = function () {\n          n.onError(e.responseText);\n        }) : e.onreadystatechange = function () {\n          if (2 === e.readyState) try {\n            var t = e.getResponseHeader(\"Content-Type\");\n            (n.supportsBinary && \"application/octet-stream\" === t || \"application/octet-stream; charset=UTF-8\" === t) && (e.responseType = \"arraybuffer\");\n          } catch (r) {}\n          4 === e.readyState && (200 === e.status || 1223 === e.status ? n.onLoad() : setTimeout(function () {\n            n.onError(\"number\" == typeof e.status ? e.status : 0);\n          }, 0));\n        }, h(\"xhr data %s\", this.data), e.send(this.data);\n      } catch (o) {\n        return void setTimeout(function () {\n          n.onError(o);\n        }, 0);\n      }\n\n      \"undefined\" != typeof document && (this.index = i.requestsCount++, i.requests[this.index] = this);\n    }, i.prototype.onSuccess = function () {\n      this.emit(\"success\"), this.cleanup();\n    }, i.prototype.onData = function (t) {\n      this.emit(\"data\", t), this.onSuccess();\n    }, i.prototype.onError = function (t) {\n      this.emit(\"error\", t), this.cleanup(!0);\n    }, i.prototype.cleanup = function (t) {\n      if (\"undefined\" != typeof this.xhr && null !== this.xhr) {\n        if (this.hasXDR() ? this.xhr.onload = this.xhr.onerror = r : this.xhr.onreadystatechange = r, t) try {\n          this.xhr.abort();\n        } catch (e) {}\n        \"undefined\" != typeof document && delete i.requests[this.index], this.xhr = null;\n      }\n    }, i.prototype.onLoad = function () {\n      var t;\n\n      try {\n        var e;\n\n        try {\n          e = this.xhr.getResponseHeader(\"Content-Type\");\n        } catch (n) {}\n\n        t = \"application/octet-stream\" === e || \"application/octet-stream; charset=UTF-8\" === e ? this.xhr.response || this.xhr.responseText : this.xhr.responseText;\n      } catch (n) {\n        this.onError(n);\n      }\n\n      null != t && this.onData(t);\n    }, i.prototype.hasXDR = function () {\n      return \"undefined\" != typeof XDomainRequest && !this.xs && this.enablesXDR;\n    }, i.prototype.abort = function () {\n      this.cleanup();\n    }, i.requestsCount = 0, i.requests = {}, \"undefined\" != typeof document) if (\"function\" == typeof attachEvent) attachEvent(\"onunload\", s);else if (\"function\" == typeof addEventListener) {\n      var f = \"onpagehide\" in self ? \"pagehide\" : \"unload\";\n      addEventListener(f, s, !1);\n    }\n  }, function (t, e, n) {\n    function r(t) {\n      var e = t && t.forceBase64;\n      p && !e || (this.supportsBinary = !1), o.call(this, t);\n    }\n\n    var o = n(23),\n        i = n(32),\n        s = n(24),\n        a = n(33),\n        c = n(34),\n        u = n(3)(\"engine.io-client:polling\");\n    t.exports = r;\n\n    var p = function () {\n      var t = n(19),\n          e = new t({\n        xdomain: !1\n      });\n      return null != e.responseType;\n    }();\n\n    a(r, o), r.prototype.name = \"polling\", r.prototype.doOpen = function () {\n      this.poll();\n    }, r.prototype.pause = function (t) {\n      function e() {\n        u(\"paused\"), n.readyState = \"paused\", t();\n      }\n\n      var n = this;\n\n      if (this.readyState = \"pausing\", this.polling || !this.writable) {\n        var r = 0;\n        this.polling && (u(\"we are currently polling - waiting to pause\"), r++, this.once(\"pollComplete\", function () {\n          u(\"pre-pause polling complete\"), --r || e();\n        })), this.writable || (u(\"we are currently writing - waiting to pause\"), r++, this.once(\"drain\", function () {\n          u(\"pre-pause writing complete\"), --r || e();\n        }));\n      } else e();\n    }, r.prototype.poll = function () {\n      u(\"polling\"), this.polling = !0, this.doPoll(), this.emit(\"poll\");\n    }, r.prototype.onData = function (t) {\n      var e = this;\n      u(\"polling got data %s\", t);\n\n      var n = function n(t, _n, r) {\n        return \"opening\" === e.readyState && e.onOpen(), \"close\" === t.type ? (e.onClose(), !1) : void e.onPacket(t);\n      };\n\n      s.decodePayload(t, this.socket.binaryType, n), \"closed\" !== this.readyState && (this.polling = !1, this.emit(\"pollComplete\"), \"open\" === this.readyState ? this.poll() : u('ignoring poll - transport state \"%s\"', this.readyState));\n    }, r.prototype.doClose = function () {\n      function t() {\n        u(\"writing close packet\"), e.write([{\n          type: \"close\"\n        }]);\n      }\n\n      var e = this;\n      \"open\" === this.readyState ? (u(\"transport open - closing\"), t()) : (u(\"transport not open - deferring close\"), this.once(\"open\", t));\n    }, r.prototype.write = function (t) {\n      var e = this;\n      this.writable = !1;\n\n      var n = function n() {\n        e.writable = !0, e.emit(\"drain\");\n      };\n\n      s.encodePayload(t, this.supportsBinary, function (t) {\n        e.doWrite(t, n);\n      });\n    }, r.prototype.uri = function () {\n      var t = this.query || {},\n          e = this.secure ? \"https\" : \"http\",\n          n = \"\";\n      !1 !== this.timestampRequests && (t[this.timestampParam] = c()), this.supportsBinary || t.sid || (t.b64 = 1), t = i.encode(t), this.port && (\"https\" === e && 443 !== Number(this.port) || \"http\" === e && 80 !== Number(this.port)) && (n = \":\" + this.port), t.length && (t = \"?\" + t);\n      var r = this.hostname.indexOf(\":\") !== -1;\n      return e + \"://\" + (r ? \"[\" + this.hostname + \"]\" : this.hostname) + n + this.path + t;\n    };\n  }, function (t, e, n) {\n    function r(t) {\n      this.path = t.path, this.hostname = t.hostname, this.port = t.port, this.secure = t.secure, this.query = t.query, this.timestampParam = t.timestampParam, this.timestampRequests = t.timestampRequests, this.readyState = \"\", this.agent = t.agent || !1, this.socket = t.socket, this.enablesXDR = t.enablesXDR, this.withCredentials = t.withCredentials, this.pfx = t.pfx, this.key = t.key, this.passphrase = t.passphrase, this.cert = t.cert, this.ca = t.ca, this.ciphers = t.ciphers, this.rejectUnauthorized = t.rejectUnauthorized, this.forceNode = t.forceNode, this.isReactNative = t.isReactNative, this.extraHeaders = t.extraHeaders, this.localAddress = t.localAddress;\n    }\n\n    var o = n(24),\n        i = n(11);\n    t.exports = r, i(r.prototype), r.prototype.onError = function (t, e) {\n      var n = new Error(t);\n      return n.type = \"TransportError\", n.description = e, this.emit(\"error\", n), this;\n    }, r.prototype.open = function () {\n      return \"closed\" !== this.readyState && \"\" !== this.readyState || (this.readyState = \"opening\", this.doOpen()), this;\n    }, r.prototype.close = function () {\n      return \"opening\" !== this.readyState && \"open\" !== this.readyState || (this.doClose(), this.onClose()), this;\n    }, r.prototype.send = function (t) {\n      if (\"open\" !== this.readyState) throw new Error(\"Transport not open\");\n      this.write(t);\n    }, r.prototype.onOpen = function () {\n      this.readyState = \"open\", this.writable = !0, this.emit(\"open\");\n    }, r.prototype.onData = function (t) {\n      var e = o.decodePacket(t, this.socket.binaryType);\n      this.onPacket(e);\n    }, r.prototype.onPacket = function (t) {\n      this.emit(\"packet\", t);\n    }, r.prototype.onClose = function () {\n      this.readyState = \"closed\", this.emit(\"close\");\n    };\n  }, function (t, e, n) {\n    function r(t, n) {\n      var r = \"b\" + e.packets[t.type] + t.data.data;\n      return n(r);\n    }\n\n    function o(t, n, r) {\n      if (!n) return e.encodeBase64Packet(t, r);\n      var o = t.data,\n          i = new Uint8Array(o),\n          s = new Uint8Array(1 + o.byteLength);\n      s[0] = v[t.type];\n\n      for (var a = 0; a < i.length; a++) {\n        s[a + 1] = i[a];\n      }\n\n      return r(s.buffer);\n    }\n\n    function i(t, n, r) {\n      if (!n) return e.encodeBase64Packet(t, r);\n      var o = new FileReader();\n      return o.onload = function () {\n        e.encodePacket({\n          type: t.type,\n          data: o.result\n        }, n, !0, r);\n      }, o.readAsArrayBuffer(t.data);\n    }\n\n    function s(t, n, r) {\n      if (!n) return e.encodeBase64Packet(t, r);\n      if (g) return i(t, n, r);\n      var o = new Uint8Array(1);\n      o[0] = v[t.type];\n      var s = new w([o.buffer, t.data]);\n      return r(s);\n    }\n\n    function a(t) {\n      try {\n        t = d.decode(t, {\n          strict: !1\n        });\n      } catch (e) {\n        return !1;\n      }\n\n      return t;\n    }\n\n    function c(t, e, n) {\n      for (var r = new Array(t.length), o = l(t.length, n), i = function i(t, n, o) {\n        e(n, function (e, n) {\n          r[t] = n, o(e, r);\n        });\n      }, s = 0; s < t.length; s++) {\n        i(s, t[s], o);\n      }\n    }\n\n    var u,\n        p = n(25),\n        h = n(26),\n        f = n(27),\n        l = n(28),\n        d = n(29);\n    \"undefined\" != typeof ArrayBuffer && (u = n(30));\n    var y = \"undefined\" != typeof navigator && /Android/i.test(navigator.userAgent),\n        m = \"undefined\" != typeof navigator && /PhantomJS/i.test(navigator.userAgent),\n        g = y || m;\n    e.protocol = 3;\n    var v = e.packets = {\n      open: 0,\n      close: 1,\n      ping: 2,\n      pong: 3,\n      message: 4,\n      upgrade: 5,\n      noop: 6\n    },\n        b = p(v),\n        C = {\n      type: \"error\",\n      data: \"parser error\"\n    },\n        w = n(31);\n    e.encodePacket = function (t, e, n, i) {\n      \"function\" == typeof e && (i = e, e = !1), \"function\" == typeof n && (i = n, n = null);\n      var a = void 0 === t.data ? void 0 : t.data.buffer || t.data;\n      if (\"undefined\" != typeof ArrayBuffer && a instanceof ArrayBuffer) return o(t, e, i);\n      if (\"undefined\" != typeof w && a instanceof w) return s(t, e, i);\n      if (a && a.base64) return r(t, i);\n      var c = v[t.type];\n      return void 0 !== t.data && (c += n ? d.encode(String(t.data), {\n        strict: !1\n      }) : String(t.data)), i(\"\" + c);\n    }, e.encodeBase64Packet = function (t, n) {\n      var r = \"b\" + e.packets[t.type];\n\n      if (\"undefined\" != typeof w && t.data instanceof w) {\n        var o = new FileReader();\n        return o.onload = function () {\n          var t = o.result.split(\",\")[1];\n          n(r + t);\n        }, o.readAsDataURL(t.data);\n      }\n\n      var i;\n\n      try {\n        i = String.fromCharCode.apply(null, new Uint8Array(t.data));\n      } catch (s) {\n        for (var a = new Uint8Array(t.data), c = new Array(a.length), u = 0; u < a.length; u++) {\n          c[u] = a[u];\n        }\n\n        i = String.fromCharCode.apply(null, c);\n      }\n\n      return r += btoa(i), n(r);\n    }, e.decodePacket = function (t, n, r) {\n      if (void 0 === t) return C;\n\n      if (\"string\" == typeof t) {\n        if (\"b\" === t.charAt(0)) return e.decodeBase64Packet(t.substr(1), n);\n        if (r && (t = a(t), t === !1)) return C;\n        var o = t.charAt(0);\n        return Number(o) == o && b[o] ? t.length > 1 ? {\n          type: b[o],\n          data: t.substring(1)\n        } : {\n          type: b[o]\n        } : C;\n      }\n\n      var i = new Uint8Array(t),\n          o = i[0],\n          s = f(t, 1);\n      return w && \"blob\" === n && (s = new w([s])), {\n        type: b[o],\n        data: s\n      };\n    }, e.decodeBase64Packet = function (t, e) {\n      var n = b[t.charAt(0)];\n      if (!u) return {\n        type: n,\n        data: {\n          base64: !0,\n          data: t.substr(1)\n        }\n      };\n      var r = u.decode(t.substr(1));\n      return \"blob\" === e && w && (r = new w([r])), {\n        type: n,\n        data: r\n      };\n    }, e.encodePayload = function (t, n, r) {\n      function o(t) {\n        return t.length + \":\" + t;\n      }\n\n      function i(t, r) {\n        e.encodePacket(t, !!s && n, !1, function (t) {\n          r(null, o(t));\n        });\n      }\n\n      \"function\" == typeof n && (r = n, n = null);\n      var s = h(t);\n      return n && s ? w && !g ? e.encodePayloadAsBlob(t, r) : e.encodePayloadAsArrayBuffer(t, r) : t.length ? void c(t, i, function (t, e) {\n        return r(e.join(\"\"));\n      }) : r(\"0:\");\n    }, e.decodePayload = function (t, n, r) {\n      if (\"string\" != typeof t) return e.decodePayloadAsBinary(t, n, r);\n      \"function\" == typeof n && (r = n, n = null);\n      var o;\n      if (\"\" === t) return r(C, 0, 1);\n\n      for (var i, s, a = \"\", c = 0, u = t.length; c < u; c++) {\n        var p = t.charAt(c);\n\n        if (\":\" === p) {\n          if (\"\" === a || a != (i = Number(a))) return r(C, 0, 1);\n          if (s = t.substr(c + 1, i), a != s.length) return r(C, 0, 1);\n\n          if (s.length) {\n            if (o = e.decodePacket(s, n, !1), C.type === o.type && C.data === o.data) return r(C, 0, 1);\n            var h = r(o, c + i, u);\n            if (!1 === h) return;\n          }\n\n          c += i, a = \"\";\n        } else a += p;\n      }\n\n      return \"\" !== a ? r(C, 0, 1) : void 0;\n    }, e.encodePayloadAsArrayBuffer = function (t, n) {\n      function r(t, n) {\n        e.encodePacket(t, !0, !0, function (t) {\n          return n(null, t);\n        });\n      }\n\n      return t.length ? void c(t, r, function (t, e) {\n        var r = e.reduce(function (t, e) {\n          var n;\n          return n = \"string\" == typeof e ? e.length : e.byteLength, t + n.toString().length + n + 2;\n        }, 0),\n            o = new Uint8Array(r),\n            i = 0;\n        return e.forEach(function (t) {\n          var e = \"string\" == typeof t,\n              n = t;\n\n          if (e) {\n            for (var r = new Uint8Array(t.length), s = 0; s < t.length; s++) {\n              r[s] = t.charCodeAt(s);\n            }\n\n            n = r.buffer;\n          }\n\n          e ? o[i++] = 0 : o[i++] = 1;\n\n          for (var a = n.byteLength.toString(), s = 0; s < a.length; s++) {\n            o[i++] = parseInt(a[s]);\n          }\n\n          o[i++] = 255;\n\n          for (var r = new Uint8Array(n), s = 0; s < r.length; s++) {\n            o[i++] = r[s];\n          }\n        }), n(o.buffer);\n      }) : n(new ArrayBuffer(0));\n    }, e.encodePayloadAsBlob = function (t, n) {\n      function r(t, n) {\n        e.encodePacket(t, !0, !0, function (t) {\n          var e = new Uint8Array(1);\n\n          if (e[0] = 1, \"string\" == typeof t) {\n            for (var r = new Uint8Array(t.length), o = 0; o < t.length; o++) {\n              r[o] = t.charCodeAt(o);\n            }\n\n            t = r.buffer, e[0] = 0;\n          }\n\n          for (var i = t instanceof ArrayBuffer ? t.byteLength : t.size, s = i.toString(), a = new Uint8Array(s.length + 1), o = 0; o < s.length; o++) {\n            a[o] = parseInt(s[o]);\n          }\n\n          if (a[s.length] = 255, w) {\n            var c = new w([e.buffer, a.buffer, t]);\n            n(null, c);\n          }\n        });\n      }\n\n      c(t, r, function (t, e) {\n        return n(new w(e));\n      });\n    }, e.decodePayloadAsBinary = function (t, n, r) {\n      \"function\" == typeof n && (r = n, n = null);\n\n      for (var o = t, i = []; o.byteLength > 0;) {\n        for (var s = new Uint8Array(o), a = 0 === s[0], c = \"\", u = 1; 255 !== s[u]; u++) {\n          if (c.length > 310) return r(C, 0, 1);\n          c += s[u];\n        }\n\n        o = f(o, 2 + c.length), c = parseInt(c);\n        var p = f(o, 0, c);\n        if (a) try {\n          p = String.fromCharCode.apply(null, new Uint8Array(p));\n        } catch (h) {\n          var l = new Uint8Array(p);\n          p = \"\";\n\n          for (var u = 0; u < l.length; u++) {\n            p += String.fromCharCode(l[u]);\n          }\n        }\n        i.push(p), o = f(o, c);\n      }\n\n      var d = i.length;\n      i.forEach(function (t, o) {\n        r(e.decodePacket(t, n, !0), o, d);\n      });\n    };\n  }, function (t, e) {\n    t.exports = Object.keys || function (t) {\n      var e = [],\n          n = Object.prototype.hasOwnProperty;\n\n      for (var r in t) {\n        n.call(t, r) && e.push(r);\n      }\n\n      return e;\n    };\n  }, function (t, e, n) {\n    function r(t) {\n      if (!t || \"object\" != _typeof(t)) return !1;\n\n      if (o(t)) {\n        for (var e = 0, n = t.length; e < n; e++) {\n          if (r(t[e])) return !0;\n        }\n\n        return !1;\n      }\n\n      if (\"function\" == typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(t) || \"function\" == typeof ArrayBuffer && t instanceof ArrayBuffer || s && t instanceof Blob || a && t instanceof File) return !0;\n      if (t.toJSON && \"function\" == typeof t.toJSON && 1 === arguments.length) return r(t.toJSON(), !0);\n\n      for (var i in t) {\n        if (Object.prototype.hasOwnProperty.call(t, i) && r(t[i])) return !0;\n      }\n\n      return !1;\n    }\n\n    var o = n(13),\n        i = Object.prototype.toString,\n        s = \"function\" == typeof Blob || \"undefined\" != typeof Blob && \"[object BlobConstructor]\" === i.call(Blob),\n        a = \"function\" == typeof File || \"undefined\" != typeof File && \"[object FileConstructor]\" === i.call(File);\n    t.exports = r;\n  }, function (t, e) {\n    t.exports = function (t, e, n) {\n      var r = t.byteLength;\n      if (e = e || 0, n = n || r, t.slice) return t.slice(e, n);\n      if (e < 0 && (e += r), n < 0 && (n += r), n > r && (n = r), e >= r || e >= n || 0 === r) return new ArrayBuffer(0);\n\n      for (var o = new Uint8Array(t), i = new Uint8Array(n - e), s = e, a = 0; s < n; s++, a++) {\n        i[a] = o[s];\n      }\n\n      return i.buffer;\n    };\n  }, function (t, e) {\n    function n(t, e, n) {\n      function o(t, r) {\n        if (o.count <= 0) throw new Error(\"after called too many times\");\n        --o.count, t ? (i = !0, e(t), e = n) : 0 !== o.count || i || e(null, r);\n      }\n\n      var i = !1;\n      return n = n || r, o.count = t, 0 === t ? e() : o;\n    }\n\n    function r() {}\n\n    t.exports = n;\n  }, function (t, e) {\n    function n(t) {\n      for (var e, n, r = [], o = 0, i = t.length; o < i;) {\n        e = t.charCodeAt(o++), e >= 55296 && e <= 56319 && o < i ? (n = t.charCodeAt(o++), 56320 == (64512 & n) ? r.push(((1023 & e) << 10) + (1023 & n) + 65536) : (r.push(e), o--)) : r.push(e);\n      }\n\n      return r;\n    }\n\n    function r(t) {\n      for (var e, n = t.length, r = -1, o = \"\"; ++r < n;) {\n        e = t[r], e > 65535 && (e -= 65536, o += d(e >>> 10 & 1023 | 55296), e = 56320 | 1023 & e), o += d(e);\n      }\n\n      return o;\n    }\n\n    function o(t, e) {\n      if (t >= 55296 && t <= 57343) {\n        if (e) throw Error(\"Lone surrogate U+\" + t.toString(16).toUpperCase() + \" is not a scalar value\");\n        return !1;\n      }\n\n      return !0;\n    }\n\n    function i(t, e) {\n      return d(t >> e & 63 | 128);\n    }\n\n    function s(t, e) {\n      if (0 == (4294967168 & t)) return d(t);\n      var n = \"\";\n      return 0 == (4294965248 & t) ? n = d(t >> 6 & 31 | 192) : 0 == (4294901760 & t) ? (o(t, e) || (t = 65533), n = d(t >> 12 & 15 | 224), n += i(t, 6)) : 0 == (4292870144 & t) && (n = d(t >> 18 & 7 | 240), n += i(t, 12), n += i(t, 6)), n += d(63 & t | 128);\n    }\n\n    function a(t, e) {\n      e = e || {};\n\n      for (var r, o = !1 !== e.strict, i = n(t), a = i.length, c = -1, u = \"\"; ++c < a;) {\n        r = i[c], u += s(r, o);\n      }\n\n      return u;\n    }\n\n    function c() {\n      if (l >= f) throw Error(\"Invalid byte index\");\n      var t = 255 & h[l];\n      if (l++, 128 == (192 & t)) return 63 & t;\n      throw Error(\"Invalid continuation byte\");\n    }\n\n    function u(t) {\n      var e, n, r, i, s;\n      if (l > f) throw Error(\"Invalid byte index\");\n      if (l == f) return !1;\n      if (e = 255 & h[l], l++, 0 == (128 & e)) return e;\n\n      if (192 == (224 & e)) {\n        if (n = c(), s = (31 & e) << 6 | n, s >= 128) return s;\n        throw Error(\"Invalid continuation byte\");\n      }\n\n      if (224 == (240 & e)) {\n        if (n = c(), r = c(), s = (15 & e) << 12 | n << 6 | r, s >= 2048) return o(s, t) ? s : 65533;\n        throw Error(\"Invalid continuation byte\");\n      }\n\n      if (240 == (248 & e) && (n = c(), r = c(), i = c(), s = (7 & e) << 18 | n << 12 | r << 6 | i, s >= 65536 && s <= 1114111)) return s;\n      throw Error(\"Invalid UTF-8 detected\");\n    }\n\n    function p(t, e) {\n      e = e || {};\n      var o = !1 !== e.strict;\n      h = n(t), f = h.length, l = 0;\n\n      for (var i, s = []; (i = u(o)) !== !1;) {\n        s.push(i);\n      }\n\n      return r(s);\n    }\n    /*! https://mths.be/utf8js v2.1.2 by @mathias */\n\n\n    var h,\n        f,\n        l,\n        d = String.fromCharCode;\n    t.exports = {\n      version: \"2.1.2\",\n      encode: a,\n      decode: p\n    };\n  }, function (t, e) {\n    !function () {\n      \"use strict\";\n\n      for (var t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", n = new Uint8Array(256), r = 0; r < t.length; r++) {\n        n[t.charCodeAt(r)] = r;\n      }\n\n      e.encode = function (e) {\n        var n,\n            r = new Uint8Array(e),\n            o = r.length,\n            i = \"\";\n\n        for (n = 0; n < o; n += 3) {\n          i += t[r[n] >> 2], i += t[(3 & r[n]) << 4 | r[n + 1] >> 4], i += t[(15 & r[n + 1]) << 2 | r[n + 2] >> 6], i += t[63 & r[n + 2]];\n        }\n\n        return o % 3 === 2 ? i = i.substring(0, i.length - 1) + \"=\" : o % 3 === 1 && (i = i.substring(0, i.length - 2) + \"==\"), i;\n      }, e.decode = function (t) {\n        var e,\n            r,\n            o,\n            i,\n            s,\n            a = .75 * t.length,\n            c = t.length,\n            u = 0;\n        \"=\" === t[t.length - 1] && (a--, \"=\" === t[t.length - 2] && a--);\n        var p = new ArrayBuffer(a),\n            h = new Uint8Array(p);\n\n        for (e = 0; e < c; e += 4) {\n          r = n[t.charCodeAt(e)], o = n[t.charCodeAt(e + 1)], i = n[t.charCodeAt(e + 2)], s = n[t.charCodeAt(e + 3)], h[u++] = r << 2 | o >> 4, h[u++] = (15 & o) << 4 | i >> 2, h[u++] = (3 & i) << 6 | 63 & s;\n        }\n\n        return p;\n      };\n    }();\n  }, function (t, e) {\n    function n(t) {\n      return t.map(function (t) {\n        if (t.buffer instanceof ArrayBuffer) {\n          var e = t.buffer;\n\n          if (t.byteLength !== e.byteLength) {\n            var n = new Uint8Array(t.byteLength);\n            n.set(new Uint8Array(e, t.byteOffset, t.byteLength)), e = n.buffer;\n          }\n\n          return e;\n        }\n\n        return t;\n      });\n    }\n\n    function r(t, e) {\n      e = e || {};\n      var r = new i();\n      return n(t).forEach(function (t) {\n        r.append(t);\n      }), e.type ? r.getBlob(e.type) : r.getBlob();\n    }\n\n    function o(t, e) {\n      return new Blob(n(t), e || {});\n    }\n\n    var i = \"undefined\" != typeof i ? i : \"undefined\" != typeof WebKitBlobBuilder ? WebKitBlobBuilder : \"undefined\" != typeof MSBlobBuilder ? MSBlobBuilder : \"undefined\" != typeof MozBlobBuilder && MozBlobBuilder,\n        s = function () {\n      try {\n        var t = new Blob([\"hi\"]);\n        return 2 === t.size;\n      } catch (e) {\n        return !1;\n      }\n    }(),\n        a = s && function () {\n      try {\n        var t = new Blob([new Uint8Array([1, 2])]);\n        return 2 === t.size;\n      } catch (e) {\n        return !1;\n      }\n    }(),\n        c = i && i.prototype.append && i.prototype.getBlob;\n\n    \"undefined\" != typeof Blob && (r.prototype = Blob.prototype, o.prototype = Blob.prototype), t.exports = function () {\n      return s ? a ? Blob : o : c ? r : void 0;\n    }();\n  }, function (t, e) {\n    e.encode = function (t) {\n      var e = \"\";\n\n      for (var n in t) {\n        t.hasOwnProperty(n) && (e.length && (e += \"&\"), e += encodeURIComponent(n) + \"=\" + encodeURIComponent(t[n]));\n      }\n\n      return e;\n    }, e.decode = function (t) {\n      for (var e = {}, n = t.split(\"&\"), r = 0, o = n.length; r < o; r++) {\n        var i = n[r].split(\"=\");\n        e[decodeURIComponent(i[0])] = decodeURIComponent(i[1]);\n      }\n\n      return e;\n    };\n  }, function (t, e) {\n    t.exports = function (t, e) {\n      var n = function n() {};\n\n      n.prototype = e.prototype, t.prototype = new n(), t.prototype.constructor = t;\n    };\n  }, function (t, e) {\n    \"use strict\";\n\n    function n(t) {\n      var e = \"\";\n\n      do {\n        e = s[t % a] + e, t = Math.floor(t / a);\n      } while (t > 0);\n\n      return e;\n    }\n\n    function r(t) {\n      var e = 0;\n\n      for (p = 0; p < t.length; p++) {\n        e = e * a + c[t.charAt(p)];\n      }\n\n      return e;\n    }\n\n    function o() {\n      var t = n(+new Date());\n      return t !== i ? (u = 0, i = t) : t + \".\" + n(u++);\n    }\n\n    for (var i, s = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_\".split(\"\"), a = 64, c = {}, u = 0, p = 0; p < a; p++) {\n      c[s[p]] = p;\n    }\n\n    o.encode = n, o.decode = r, t.exports = o;\n  }, function (t, e, n) {\n    (function (e) {\n      function r() {}\n\n      function o() {\n        return \"undefined\" != typeof self ? self : \"undefined\" != typeof window ? window : \"undefined\" != typeof e ? e : {};\n      }\n\n      function i(t) {\n        if (s.call(this, t), this.query = this.query || {}, !c) {\n          var e = o();\n          c = e.___eio = e.___eio || [];\n        }\n\n        this.index = c.length;\n        var n = this;\n        c.push(function (t) {\n          n.onData(t);\n        }), this.query.j = this.index, \"function\" == typeof addEventListener && addEventListener(\"beforeunload\", function () {\n          n.script && (n.script.onerror = r);\n        }, !1);\n      }\n\n      var s = n(22),\n          a = n(33);\n      t.exports = i;\n      var c,\n          u = /\\n/g,\n          p = /\\\\n/g;\n      a(i, s), i.prototype.supportsBinary = !1, i.prototype.doClose = function () {\n        this.script && (this.script.parentNode.removeChild(this.script), this.script = null), this.form && (this.form.parentNode.removeChild(this.form), this.form = null, this.iframe = null), s.prototype.doClose.call(this);\n      }, i.prototype.doPoll = function () {\n        var t = this,\n            e = document.createElement(\"script\");\n        this.script && (this.script.parentNode.removeChild(this.script), this.script = null), e.async = !0, e.src = this.uri(), e.onerror = function (e) {\n          t.onError(\"jsonp poll error\", e);\n        };\n        var n = document.getElementsByTagName(\"script\")[0];\n        n ? n.parentNode.insertBefore(e, n) : (document.head || document.body).appendChild(e), this.script = e;\n        var r = \"undefined\" != typeof navigator && /gecko/i.test(navigator.userAgent);\n        r && setTimeout(function () {\n          var t = document.createElement(\"iframe\");\n          document.body.appendChild(t), document.body.removeChild(t);\n        }, 100);\n      }, i.prototype.doWrite = function (t, e) {\n        function n() {\n          r(), e();\n        }\n\n        function r() {\n          if (o.iframe) try {\n            o.form.removeChild(o.iframe);\n          } catch (t) {\n            o.onError(\"jsonp polling iframe removal error\", t);\n          }\n\n          try {\n            var e = '<iframe src=\"javascript:0\" name=\"' + o.iframeId + '\">';\n            i = document.createElement(e);\n          } catch (t) {\n            i = document.createElement(\"iframe\"), i.name = o.iframeId, i.src = \"javascript:0\";\n          }\n\n          i.id = o.iframeId, o.form.appendChild(i), o.iframe = i;\n        }\n\n        var o = this;\n\n        if (!this.form) {\n          var i,\n              s = document.createElement(\"form\"),\n              a = document.createElement(\"textarea\"),\n              c = this.iframeId = \"eio_iframe_\" + this.index;\n          s.className = \"socketio\", s.style.position = \"absolute\", s.style.top = \"-1000px\", s.style.left = \"-1000px\", s.target = c, s.method = \"POST\", s.setAttribute(\"accept-charset\", \"utf-8\"), a.name = \"d\", s.appendChild(a), document.body.appendChild(s), this.form = s, this.area = a;\n        }\n\n        this.form.action = this.uri(), r(), t = t.replace(p, \"\\\\\\n\"), this.area.value = t.replace(u, \"\\\\n\");\n\n        try {\n          this.form.submit();\n        } catch (h) {}\n\n        this.iframe.attachEvent ? this.iframe.onreadystatechange = function () {\n          \"complete\" === o.iframe.readyState && n();\n        } : this.iframe.onload = n;\n      };\n    }).call(e, function () {\n      return this;\n    }());\n  }, function (t, e, n) {\n    function r(t) {\n      var e = t && t.forceBase64;\n      e && (this.supportsBinary = !1), this.perMessageDeflate = t.perMessageDeflate, this.usingBrowserWebSocket = o && !t.forceNode, this.protocols = t.protocols, this.usingBrowserWebSocket || (l = i), s.call(this, t);\n    }\n\n    var o,\n        i,\n        s = n(23),\n        a = n(24),\n        c = n(32),\n        u = n(33),\n        p = n(34),\n        h = n(3)(\"engine.io-client:websocket\");\n    if (\"undefined\" != typeof WebSocket ? o = WebSocket : \"undefined\" != typeof self && (o = self.WebSocket || self.MozWebSocket), \"undefined\" == typeof window) try {\n      i = n(37);\n    } catch (f) {}\n    var l = o || i;\n    t.exports = r, u(r, s), r.prototype.name = \"websocket\", r.prototype.supportsBinary = !0, r.prototype.doOpen = function () {\n      if (this.check()) {\n        var t = this.uri(),\n            e = this.protocols,\n            n = {\n          agent: this.agent,\n          perMessageDeflate: this.perMessageDeflate\n        };\n        n.pfx = this.pfx, n.key = this.key, n.passphrase = this.passphrase, n.cert = this.cert, n.ca = this.ca, n.ciphers = this.ciphers, n.rejectUnauthorized = this.rejectUnauthorized, this.extraHeaders && (n.headers = this.extraHeaders), this.localAddress && (n.localAddress = this.localAddress);\n\n        try {\n          this.ws = this.usingBrowserWebSocket && !this.isReactNative ? e ? new l(t, e) : new l(t) : new l(t, e, n);\n        } catch (r) {\n          return this.emit(\"error\", r);\n        }\n\n        void 0 === this.ws.binaryType && (this.supportsBinary = !1), this.ws.supports && this.ws.supports.binary ? (this.supportsBinary = !0, this.ws.binaryType = \"nodebuffer\") : this.ws.binaryType = \"arraybuffer\", this.addEventListeners();\n      }\n    }, r.prototype.addEventListeners = function () {\n      var t = this;\n      this.ws.onopen = function () {\n        t.onOpen();\n      }, this.ws.onclose = function () {\n        t.onClose();\n      }, this.ws.onmessage = function (e) {\n        t.onData(e.data);\n      }, this.ws.onerror = function (e) {\n        t.onError(\"websocket error\", e);\n      };\n    }, r.prototype.write = function (t) {\n      function e() {\n        n.emit(\"flush\"), setTimeout(function () {\n          n.writable = !0, n.emit(\"drain\");\n        }, 0);\n      }\n\n      var n = this;\n      this.writable = !1;\n\n      for (var r = t.length, o = 0, i = r; o < i; o++) {\n        !function (t) {\n          a.encodePacket(t, n.supportsBinary, function (o) {\n            if (!n.usingBrowserWebSocket) {\n              var i = {};\n\n              if (t.options && (i.compress = t.options.compress), n.perMessageDeflate) {\n                var s = \"string\" == typeof o ? Buffer.byteLength(o) : o.length;\n                s < n.perMessageDeflate.threshold && (i.compress = !1);\n              }\n            }\n\n            try {\n              n.usingBrowserWebSocket ? n.ws.send(o) : n.ws.send(o, i);\n            } catch (a) {\n              h(\"websocket closed before onclose event\");\n            }\n\n            --r || e();\n          });\n        }(t[o]);\n      }\n    }, r.prototype.onClose = function () {\n      s.prototype.onClose.call(this);\n    }, r.prototype.doClose = function () {\n      \"undefined\" != typeof this.ws && this.ws.close();\n    }, r.prototype.uri = function () {\n      var t = this.query || {},\n          e = this.secure ? \"wss\" : \"ws\",\n          n = \"\";\n      this.port && (\"wss\" === e && 443 !== Number(this.port) || \"ws\" === e && 80 !== Number(this.port)) && (n = \":\" + this.port), this.timestampRequests && (t[this.timestampParam] = p()), this.supportsBinary || (t.b64 = 1), t = c.encode(t), t.length && (t = \"?\" + t);\n      var r = this.hostname.indexOf(\":\") !== -1;\n      return e + \"://\" + (r ? \"[\" + this.hostname + \"]\" : this.hostname) + n + this.path + t;\n    }, r.prototype.check = function () {\n      return !(!l || \"__initialize\" in l && this.name === r.prototype.name);\n    };\n  }, function (t, e) {}, function (t, e) {\n    var n = [].indexOf;\n\n    t.exports = function (t, e) {\n      if (n) return t.indexOf(e);\n\n      for (var r = 0; r < t.length; ++r) {\n        if (t[r] === e) return r;\n      }\n\n      return -1;\n    };\n  }, function (t, e, n) {\n    function r(t, e, n) {\n      this.io = t, this.nsp = e, this.json = this, this.ids = 0, this.acks = {}, this.receiveBuffer = [], this.sendBuffer = [], this.connected = !1, this.disconnected = !0, this.flags = {}, n && n.query && (this.query = n.query), this.io.autoConnect && this.open();\n    }\n\n    var o = n(7),\n        i = n(11),\n        s = n(40),\n        a = n(41),\n        c = n(42),\n        u = n(3)(\"socket.io-client:socket\"),\n        p = n(32),\n        h = n(26);\n    t.exports = e = r;\n    var f = {\n      connect: 1,\n      connect_error: 1,\n      connect_timeout: 1,\n      connecting: 1,\n      disconnect: 1,\n      error: 1,\n      reconnect: 1,\n      reconnect_attempt: 1,\n      reconnect_failed: 1,\n      reconnect_error: 1,\n      reconnecting: 1,\n      ping: 1,\n      pong: 1\n    },\n        l = i.prototype.emit;\n    i(r.prototype), r.prototype.subEvents = function () {\n      if (!this.subs) {\n        var t = this.io;\n        this.subs = [a(t, \"open\", c(this, \"onopen\")), a(t, \"packet\", c(this, \"onpacket\")), a(t, \"close\", c(this, \"onclose\"))];\n      }\n    }, r.prototype.open = r.prototype.connect = function () {\n      return this.connected ? this : (this.subEvents(), this.io.open(), \"open\" === this.io.readyState && this.onopen(), this.emit(\"connecting\"), this);\n    }, r.prototype.send = function () {\n      var t = s(arguments);\n      return t.unshift(\"message\"), this.emit.apply(this, t), this;\n    }, r.prototype.emit = function (t) {\n      if (f.hasOwnProperty(t)) return l.apply(this, arguments), this;\n      var e = s(arguments),\n          n = {\n        type: (void 0 !== this.flags.binary ? this.flags.binary : h(e)) ? o.BINARY_EVENT : o.EVENT,\n        data: e\n      };\n      return n.options = {}, n.options.compress = !this.flags || !1 !== this.flags.compress, \"function\" == typeof e[e.length - 1] && (u(\"emitting packet with ack id %d\", this.ids), this.acks[this.ids] = e.pop(), n.id = this.ids++), this.connected ? this.packet(n) : this.sendBuffer.push(n), this.flags = {}, this;\n    }, r.prototype.packet = function (t) {\n      t.nsp = this.nsp, this.io.packet(t);\n    }, r.prototype.onopen = function () {\n      if (u(\"transport is open - connecting\"), \"/\" !== this.nsp) if (this.query) {\n        var t = \"object\" == _typeof(this.query) ? p.encode(this.query) : this.query;\n        u(\"sending connect packet with query %s\", t), this.packet({\n          type: o.CONNECT,\n          query: t\n        });\n      } else this.packet({\n        type: o.CONNECT\n      });\n    }, r.prototype.onclose = function (t) {\n      u(\"close (%s)\", t), this.connected = !1, this.disconnected = !0, delete this.id, this.emit(\"disconnect\", t);\n    }, r.prototype.onpacket = function (t) {\n      var e = t.nsp === this.nsp,\n          n = t.type === o.ERROR && \"/\" === t.nsp;\n      if (e || n) switch (t.type) {\n        case o.CONNECT:\n          this.onconnect();\n          break;\n\n        case o.EVENT:\n          this.onevent(t);\n          break;\n\n        case o.BINARY_EVENT:\n          this.onevent(t);\n          break;\n\n        case o.ACK:\n          this.onack(t);\n          break;\n\n        case o.BINARY_ACK:\n          this.onack(t);\n          break;\n\n        case o.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case o.ERROR:\n          this.emit(\"error\", t.data);\n      }\n    }, r.prototype.onevent = function (t) {\n      var e = t.data || [];\n      u(\"emitting event %j\", e), null != t.id && (u(\"attaching ack callback to event\"), e.push(this.ack(t.id))), this.connected ? l.apply(this, e) : this.receiveBuffer.push(e);\n    }, r.prototype.ack = function (t) {\n      var e = this,\n          n = !1;\n      return function () {\n        if (!n) {\n          n = !0;\n          var r = s(arguments);\n          u(\"sending ack %j\", r), e.packet({\n            type: h(r) ? o.BINARY_ACK : o.ACK,\n            id: t,\n            data: r\n          });\n        }\n      };\n    }, r.prototype.onack = function (t) {\n      var e = this.acks[t.id];\n      \"function\" == typeof e ? (u(\"calling ack %s with %j\", t.id, t.data), e.apply(this, t.data), delete this.acks[t.id]) : u(\"bad ack %s\", t.id);\n    }, r.prototype.onconnect = function () {\n      this.connected = !0, this.disconnected = !1, this.emit(\"connect\"), this.emitBuffered();\n    }, r.prototype.emitBuffered = function () {\n      var t;\n\n      for (t = 0; t < this.receiveBuffer.length; t++) {\n        l.apply(this, this.receiveBuffer[t]);\n      }\n\n      for (this.receiveBuffer = [], t = 0; t < this.sendBuffer.length; t++) {\n        this.packet(this.sendBuffer[t]);\n      }\n\n      this.sendBuffer = [];\n    }, r.prototype.ondisconnect = function () {\n      u(\"server disconnect (%s)\", this.nsp), this.destroy(), this.onclose(\"io server disconnect\");\n    }, r.prototype.destroy = function () {\n      if (this.subs) {\n        for (var t = 0; t < this.subs.length; t++) {\n          this.subs[t].destroy();\n        }\n\n        this.subs = null;\n      }\n\n      this.io.destroy(this);\n    }, r.prototype.close = r.prototype.disconnect = function () {\n      return this.connected && (u(\"performing disconnect (%s)\", this.nsp), this.packet({\n        type: o.DISCONNECT\n      })), this.destroy(), this.connected && this.onclose(\"io client disconnect\"), this;\n    }, r.prototype.compress = function (t) {\n      return this.flags.compress = t, this;\n    }, r.prototype.binary = function (t) {\n      return this.flags.binary = t, this;\n    };\n  }, function (t, e) {\n    function n(t, e) {\n      var n = [];\n      e = e || 0;\n\n      for (var r = e || 0; r < t.length; r++) {\n        n[r - e] = t[r];\n      }\n\n      return n;\n    }\n\n    t.exports = n;\n  }, function (t, e) {\n    function n(t, e, n) {\n      return t.on(e, n), {\n        destroy: function destroy() {\n          t.removeListener(e, n);\n        }\n      };\n    }\n\n    t.exports = n;\n  }, function (t, e) {\n    var n = [].slice;\n\n    t.exports = function (t, e) {\n      if (\"string\" == typeof e && (e = t[e]), \"function\" != typeof e) throw new Error(\"bind() requires a function\");\n      var r = n.call(arguments, 2);\n      return function () {\n        return e.apply(t, r.concat(n.call(arguments)));\n      };\n    };\n  }, function (t, e) {\n    function n(t) {\n      t = t || {}, this.ms = t.min || 100, this.max = t.max || 1e4, this.factor = t.factor || 2, this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0, this.attempts = 0;\n    }\n\n    t.exports = n, n.prototype.duration = function () {\n      var t = this.ms * Math.pow(this.factor, this.attempts++);\n\n      if (this.jitter) {\n        var e = Math.random(),\n            n = Math.floor(e * this.jitter * t);\n        t = 0 == (1 & Math.floor(10 * e)) ? t - n : t + n;\n      }\n\n      return 0 | Math.min(t, this.max);\n    }, n.prototype.reset = function () {\n      this.attempts = 0;\n    }, n.prototype.setMin = function (t) {\n      this.ms = t;\n    }, n.prototype.setMax = function (t) {\n      this.max = t;\n    }, n.prototype.setJitter = function (t) {\n      this.jitter = t;\n    };\n  }]);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ \"./node_modules/buffer/index.js\").Buffer, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/socket.io.js\n");

/***/ }),

/***/ 2:
/*!*****************************************!*\
  !*** multi ./resources/js/socket.io.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /opt/lampp/htdocs/LantuuWeb/resources/js/socket.io.js */"./resources/js/socket.io.js");


/***/ })

/******/ });